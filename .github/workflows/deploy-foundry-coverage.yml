--- 
name: "Foundry Tests and Coverage"

on: 
  push: 
    paths: 
      - packages/foundry/**

env: 
  VERCEL_ORG_ID: "${{ secrets.VERCEL_ORG_ID }}"
  VERCEL_PROJECT_ID: "${{ secrets.VERCEL_FOUNDRY_PROJECT_ID }}"

jobs: 

  Forge-Test:
    build:
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2
          with:
            submodules: recursive

        - name: Install Foundry
          uses: foundry-rs/foundry-toolchain@v1
          with:
            version: nightly

        - name: Run Forge build
          run: cd packages/foundry && forge build
          id: build

        - name: Run tests
          run: cd packages/foundry && forge test -vvv
          env:
            FOUNDRY_PROFILE: ci
            RPC_URL: ${{secrets.RPC_URL}}
            FORKING_RPC_URL: ${{secrets.RPC_URL}}


  Publish-Coverage:
  
    runs-on: ubuntu-latest

    permissions:
      deployments: write

    steps: 
      - name: Install ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-utils
          sudo apt-get install libz3-dev libz3-4
          sudo apt-get install lcov
          sudo apt-get install libcppunit-dev
          python -m pip install pip --upgrade
          python -m pip install lcov_cobertura

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - 
        uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{secrets.GITHUB_TOKEN}}'


      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run Forge build
        run: |
          cd packages/foundry
          forge --version
          forge build --sizes
        id: build

      - name: Generate coverage report
        run: |
          ls
          cd packages/foundry
          forge coverage --report lcov
          genhtml lcov.info -o coverage_report --frame --legend

        env:
          FOUNDRY_PROFILE: ci
          RPC_URL: ${{secrets.RPC_URL}}
          FORKING_RPC_URL: ${{secrets.RPC_URL}}

      - 
        name: "Install Vercel CLI"
        run: "npm install --global vercel@latest"

      - 
        name: "Pull Vercel Environment Information"
        run: "vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}"

      - 
        name: "Build Project Artifacts"
        run: "vercel build --token=${{ secrets.VERCEL_TOKEN }}"

      - 
        name: "Deploy Project Artifacts to Vercel"
        run: |
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          echo "{vercel_preview_url}={$(cat deployment-url.txt)}" >> $GITHUB_OUTPUT
        id: vercel_deploy

      - 
        name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{secrets.GITHUB_TOKEN}}'
          environment-url: ${{ steps.vercel_deploy.outputs.vercel_preview_url }}
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - 
        name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{secrets.GITHUB_TOKEN}}'
          environment-url: ${{ steps.vercel_deploy.outputs.vercel_preview_url }}
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
