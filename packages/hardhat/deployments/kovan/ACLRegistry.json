{
  "address": "0xb0abCA446cd5D1A3b56A7B776C801501eC0e9019",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "permission",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "permission",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isRoleAdmin",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "requireApprovedContractOrEOA",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "permission",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "requirePermission",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "requireRole",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "permission",
          "type": "bytes32"
        }
      ],
      "name": "revokePermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3cd8f3a271500b3ef6ab5d2a0cf75026742f5611df86d44e43024ed78ad0b97",
  "receipt": {
    "to": null,
    "from": "0x4a7a11D12805A7570bD1CB65E1Ca1396a0B1aF6F",
    "contractAddress": "0xb0abCA446cd5D1A3b56A7B776C801501eC0e9019",
    "transactionIndex": 1,
    "gasUsed": "590967",
    "logsBloom": "0x
    "blockHash": "0x29af9383ce1589d8dffbd69279699d3cc7780d68ffea1f2cf2110355087b8a5e",
    "transactionHash": "0xe3cd8f3a271500b3ef6ab5d2a0cf75026742f5611df86d44e43024ed78ad0b97",
    "logs": [],
    "blockNumber": 28115290,
    "cumulativeGasUsed": "642543",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "14ebb96cd28696ce94a006a33973ed49",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRoleAdmin\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requireApprovedContractOrEOA\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requirePermission\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requireRole\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"revokePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasPermission(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `permission`.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/utils/ACLRegistry.sol\":\"ACLRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IACLRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IACLRegistry {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `permission`.\\n   */\\n  function hasPermission(bytes32 permission, address account)\\n    external\\n    view\\n    returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  function grantPermission(bytes32 permission, address account) external;\\n\\n  function revokePermission(bytes32 permission) external;\\n\\n  function requireApprovedContractOrEOA(address account) external view;\\n\\n  function requireRole(bytes32 role, address account) external view;\\n\\n  function requirePermission(bytes32 permission, address account) external view;\\n\\n  function isRoleAdmin(bytes32 role, address account) external view;\\n}\\n\",\"keccak256\":\"0x0cf6feefb51e54d54d0bcc253c85939eb8da36cd466dcb5c73ed7109bf402725\",\"license\":\"MIT\"},\"contracts/core/utils/ACLRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IACLRegistry.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\ncontract ACLRegistry is IACLRegistry {\\n  /* ========== STATE VARIABLES ========== */\\n\\n  struct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n  }\\n\\n  mapping(bytes32 => RoleData) private _roles;\\n  mapping(bytes32 => address) private _permissions;\\n\\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor() {\\n    _roles[DEFAULT_ADMIN_ROLE].members[msg.sender] = true;\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return _roles[role].members[account];\\n  }\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `permission`.\\n   */\\n  function hasPermission(bytes32 permission, address account)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return _permissions[permission] == account;\\n  }\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n    return _roles[role].adminRole;\\n  }\\n\\n  function requireRole(bytes32 role, address account) public view override {\\n    require(hasRole(role, account), \\\"you dont have the right role\\\");\\n  }\\n\\n  function requirePermission(bytes32 permission, address account)\\n    public\\n    view\\n    override\\n  {\\n    require(\\n      hasPermission(permission, account),\\n      \\\"you dont have the right permissions\\\"\\n    );\\n  }\\n\\n  function isRoleAdmin(bytes32 role, address account) public view override {\\n    require(hasRole(getRoleAdmin(role), account), \\\"you have to be role admin\\\");\\n  }\\n\\n  function requireApprovedContractOrEOA(address account) public view override {\\n    require(\\n      hasRole(keccak256(\\\"ApprovedContract\\\"), account) || account == tx.origin,\\n      \\\"Access denied for caller\\\"\\n    );\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account)\\n    public\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account)\\n    public\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _revokeRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) public override {\\n    require(\\n      account == msg.sender || hasRole(getRoleAdmin(role), msg.sender),\\n      \\\"you cant renounce this role\\\"\\n    );\\n\\n    _revokeRole(role, account);\\n  }\\n\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) public override {\\n    require(\\n      hasRole(getRoleAdmin(role), msg.sender) ||\\n        hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n      \\\"can only renounce roles for self\\\"\\n    );\\n\\n    _setRoleAdmin(role, adminRole);\\n  }\\n\\n  function grantPermission(bytes32 permission, address account)\\n    public\\n    override\\n  {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"only for admin\\\");\\n    _permissions[permission] = account;\\n  }\\n\\n  function revokePermission(bytes32 permission) public override {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"only for admin\\\");\\n    delete _permissions[permission];\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  /**\\n   * @dev Revert with a standard message if `account` is missing `role`.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   */\\n  function _requireRole(bytes32 role, address account) internal view {\\n    require(hasRole(role, account), \\\"you dont have the required role\\\");\\n  }\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event. Note that unlike {grantRole}, this function doesn't perform any\\n   * checks on the calling account.\\n   *\\n   * [WARNING]\\n   * ====\\n   * This function should only be called from the constructor when setting\\n   * up the initial roles for the system.\\n   *\\n   * Using this function in any other way is effectively circumventing the admin\\n   * system imposed by {AccessControl}.\\n   * ====\\n   */\\n  function _setupRole(bytes32 role, address account) internal {\\n    _grantRole(role, account);\\n  }\\n\\n  /**\\n   * @dev Sets `adminRole` as ``role``'s admin role.\\n   *\\n   * Emits a {RoleAdminChanged} event.\\n   */\\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n    bytes32 previousAdminRole = getRoleAdmin(role);\\n    _roles[role].adminRole = adminRole;\\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n  }\\n\\n  function _grantRole(bytes32 role, address account) private {\\n    if (!hasRole(role, account)) {\\n      _roles[role].members[account] = true;\\n      emit RoleGranted(role, account, msg.sender);\\n    }\\n  }\\n\\n  function _revokeRole(bytes32 role, address account) private {\\n    if (hasRole(role, account)) {\\n      _roles[role].members[account] = false;\\n      emit RoleRevoked(role, account, msg.sender);\\n    }\\n  }\\n\\n  /* ========== MODIFIER ========== */\\n\\n  /**\\n   * @dev Modifier that checks that an account has a specific role. Reverts\\n   * with a standardized message including the required role.\\n   *\\n   * The format of the revert reason is given by the following regular expression:\\n   *\\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n   *\\n   * _Available since v4.1._\\n   */\\n  modifier onlyRole(bytes32 role) {\\n    _requireRole(role, msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x9a918a52f58067ffaf7f366f54e53df5f4899248489b681809adfe27e85751f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b503360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560205260409020805460ff19166001179055610951806100596000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063bc5864561161008c578063d3e2f7fd11610066578063d3e2f7fd14610293578063d547741f146102bf578063db47d436146102eb578063e89005c714610311576100ea565b8063bc5864561461020f578063ce28a3011461023b578063d09a20c514610267576100ea565b80632f2ff15d116100c85780632f2ff15d1461018357806336568abe146101af57806391d14854146101db578063a217fddf14610207576100ea565b80631e4e0091146100ef578063248a9ca31461011457806328545c0d14610143575b600080fd5b6101126004803603604081101561010557600080fd5b508035906020013561032e565b005b6101316004803603602081101561012a57600080fd5b50356103b0565b60408051918252519081900360200190f35b61016f6004803603604081101561015957600080fd5b50803590602001356001600160a01b03166103c5565b604080519115158252519081900360200190f35b6101126004803603604081101561019957600080fd5b50803590602001356001600160a01b03166103e6565b610112600480360360408110156101c557600080fd5b50803590602001356001600160a01b0316610408565b61016f600480360360408110156101f157600080fd5b50803590602001356001600160a01b0316610481565b6101316104aa565b6101126004803603604081101561022557600080fd5b50803590602001356001600160a01b03166104af565b6101126004803603604081101561025157600080fd5b50803590602001356001600160a01b0316610546565b6101126004803603604081101561027d57600080fd5b50803590602001356001600160a01b03166105a9565b610112600480360360408110156102a957600080fd5b50803590602001356001600160a01b0316610604565b610112600480360360408110156102d557600080fd5b50803590602001356001600160a01b0316610649565b6101126004803603602081101561030157600080fd5b50356001600160a01b0316610666565b6101126004803603602081101561032757600080fd5b50356106f7565b61034061033a836103b0565b33610481565b806103515750610351600033610481565b6103a2576040805162461bcd60e51b815260206004820181905260248201527f63616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66604482015290519081900360640190fd5b6103ac828261077e565b5050565b60009081526020819052604090206001015490565b600091825260016020526040909120546001600160a01b0391821691161490565b6103ef826103b0565b6103f981336107d1565b610403838361082c565b505050565b6001600160a01b038116331480610426575061042661033a836103b0565b610477576040805162461bcd60e51b815260206004820152601b60248201527f796f752063616e742072656e6f756e6365207468697320726f6c650000000000604482015290519081900360640190fd5b6103ac8282610893565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600081565b6104ba600033610481565b61050b576040805162461bcd60e51b815260206004820152600e60248201527f6f6e6c7920666f722061646d696e000000000000000000000000000000000000604482015290519081900360640190fd5b600091825260016020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b610558610552836103b0565b82610481565b6103ac576040805162461bcd60e51b815260206004820152601960248201527f796f75206861766520746f20626520726f6c652061646d696e00000000000000604482015290519081900360640190fd5b6105b38282610481565b6103ac576040805162461bcd60e51b815260206004820152601c60248201527f796f7520646f6e7420686176652074686520726967687420726f6c6500000000604482015290519081900360640190fd5b61060e82826103c5565b6103ac5760405162461bcd60e51b81526004018080602001828103825260238152602001806108f96023913960400191505060405180910390fd5b610652826103b0565b61065c81336107d1565b6104038383610893565b6106907ffb639edf4b4a4724b8b9fb42a839b712c82108c1edf1beb051bcebce8e689dc482610481565b806106a357506001600160a01b03811632145b6106f4576040805162461bcd60e51b815260206004820152601860248201527f4163636573732064656e69656420666f722063616c6c65720000000000000000604482015290519081900360640190fd5b50565b610702600033610481565b610753576040805162461bcd60e51b815260206004820152600e60248201527f6f6e6c7920666f722061646d696e000000000000000000000000000000000000604482015290519081900360640190fd5b6000908152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610789836103b0565b600084815260208190526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6107db8282610481565b6103ac576040805162461bcd60e51b815260206004820152601f60248201527f796f7520646f6e7420686176652074686520726571756972656420726f6c6500604482015290519081900360640190fd5b6108368282610481565b6103ac576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b61089d8282610481565b156103ac576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4505056fe796f7520646f6e74206861766520746865207269676874207065726d697373696f6e73a264697066735822122067e2722c879f796760cc1aa64c23cdc74f0b79af92b6029e054ffc9cfa15d83064736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063bc5864561161008c578063d3e2f7fd11610066578063d3e2f7fd14610293578063d547741f146102bf578063db47d436146102eb578063e89005c714610311576100ea565b8063bc5864561461020f578063ce28a3011461023b578063d09a20c514610267576100ea565b80632f2ff15d116100c85780632f2ff15d1461018357806336568abe146101af57806391d14854146101db578063a217fddf14610207576100ea565b80631e4e0091146100ef578063248a9ca31461011457806328545c0d14610143575b600080fd5b6101126004803603604081101561010557600080fd5b508035906020013561032e565b005b6101316004803603602081101561012a57600080fd5b50356103b0565b60408051918252519081900360200190f35b61016f6004803603604081101561015957600080fd5b50803590602001356001600160a01b03166103c5565b604080519115158252519081900360200190f35b6101126004803603604081101561019957600080fd5b50803590602001356001600160a01b03166103e6565b610112600480360360408110156101c557600080fd5b50803590602001356001600160a01b0316610408565b61016f600480360360408110156101f157600080fd5b50803590602001356001600160a01b0316610481565b6101316104aa565b6101126004803603604081101561022557600080fd5b50803590602001356001600160a01b03166104af565b6101126004803603604081101561025157600080fd5b50803590602001356001600160a01b0316610546565b6101126004803603604081101561027d57600080fd5b50803590602001356001600160a01b03166105a9565b610112600480360360408110156102a957600080fd5b50803590602001356001600160a01b0316610604565b610112600480360360408110156102d557600080fd5b50803590602001356001600160a01b0316610649565b6101126004803603602081101561030157600080fd5b50356001600160a01b0316610666565b6101126004803603602081101561032757600080fd5b50356106f7565b61034061033a836103b0565b33610481565b806103515750610351600033610481565b6103a2576040805162461bcd60e51b815260206004820181905260248201527f63616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66604482015290519081900360640190fd5b6103ac828261077e565b5050565b60009081526020819052604090206001015490565b600091825260016020526040909120546001600160a01b0391821691161490565b6103ef826103b0565b6103f981336107d1565b610403838361082c565b505050565b6001600160a01b038116331480610426575061042661033a836103b0565b610477576040805162461bcd60e51b815260206004820152601b60248201527f796f752063616e742072656e6f756e6365207468697320726f6c650000000000604482015290519081900360640190fd5b6103ac8282610893565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600081565b6104ba600033610481565b61050b576040805162461bcd60e51b815260206004820152600e60248201527f6f6e6c7920666f722061646d696e000000000000000000000000000000000000604482015290519081900360640190fd5b600091825260016020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b610558610552836103b0565b82610481565b6103ac576040805162461bcd60e51b815260206004820152601960248201527f796f75206861766520746f20626520726f6c652061646d696e00000000000000604482015290519081900360640190fd5b6105b38282610481565b6103ac576040805162461bcd60e51b815260206004820152601c60248201527f796f7520646f6e7420686176652074686520726967687420726f6c6500000000604482015290519081900360640190fd5b61060e82826103c5565b6103ac5760405162461bcd60e51b81526004018080602001828103825260238152602001806108f96023913960400191505060405180910390fd5b610652826103b0565b61065c81336107d1565b6104038383610893565b6106907ffb639edf4b4a4724b8b9fb42a839b712c82108c1edf1beb051bcebce8e689dc482610481565b806106a357506001600160a01b03811632145b6106f4576040805162461bcd60e51b815260206004820152601860248201527f4163636573732064656e69656420666f722063616c6c65720000000000000000604482015290519081900360640190fd5b50565b610702600033610481565b610753576040805162461bcd60e51b815260206004820152600e60248201527f6f6e6c7920666f722061646d696e000000000000000000000000000000000000604482015290519081900360640190fd5b6000908152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000610789836103b0565b600084815260208190526040808220600101859055519192508391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6107db8282610481565b6103ac576040805162461bcd60e51b815260206004820152601f60248201527f796f7520646f6e7420686176652074686520726571756972656420726f6c6500604482015290519081900360640190fd5b6108368282610481565b6103ac576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916600117905551339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b61089d8282610481565b156103ac576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4505056fe796f7520646f6e74206861766520746865207269676874207065726d697373696f6e73a264697066735822122067e2722c879f796760cc1aa64c23cdc74f0b79af92b6029e054ffc9cfa15d83064736f6c63430007030033",
  "devdoc": {
    "details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasPermission(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `permission`."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 155,
        "contract": "contracts/core/utils/ACLRegistry.sol:ACLRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)151_storage)"
      },
      {
        "astId": 159,
        "contract": "contracts/core/utils/ACLRegistry.sol:ACLRegistry",
        "label": "_permissions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)151_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ACLRegistry.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)151_storage"
      },
      "t_struct(RoleData)151_storage": {
        "encoding": "inplace",
        "label": "struct ACLRegistry.RoleData",
        "members": [
          {
            "astId": 148,
            "contract": "contracts/core/utils/ACLRegistry.sol:ACLRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 150,
            "contract": "contracts/core/utils/ACLRegistry.sol:ACLRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}