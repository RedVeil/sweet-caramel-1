{
  "language": "Solidity",
  "sources": {
    "contracts/core/interfaces/IERC20Metadata.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/test_helpers/Faucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface Uniswap {\n  function swapExactETHForTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function WETH() external pure returns (address);\n}\n\ninterface CurveDepositZap {\n  function add_liquidity(\n    address pool,\n    uint256[4] calldata amounts,\n    uint256 min_mint_amounts,\n    address receiver\n  ) external returns (uint256);\n}\n\ninterface TriPool {\n  function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amounts)\n    external;\n}\n\ninterface CurveAddressProvider {\n  function get_registry() external view returns (address);\n}\n\ninterface CurveRegistry {\n  function get_pool_from_lp_token(address lp_token)\n    external\n    view\n    returns (address);\n}\n\ncontract Faucet {\n  Uniswap public uniswap;\n  CurveDepositZap public curveDepositZap;\n  CurveAddressProvider public curveAddressProvider;\n  CurveRegistry public curveRegistry;\n  address public triPool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n  IERC20 public dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n  IERC20 public threeCrv = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n\n  constructor(\n    address uniswap_,\n    address curveAddressProvider_,\n    address curveDepositZap_\n  ) {\n    uniswap = Uniswap(uniswap_);\n    curveDepositZap = CurveDepositZap(curveDepositZap_);\n    curveAddressProvider = CurveAddressProvider(curveAddressProvider_);\n    curveRegistry = CurveRegistry(curveAddressProvider.get_registry());\n    dai.approve(address(triPool), type(uint256).max);\n    dai.approve(address(curveDepositZap), type(uint256).max);\n  }\n\n  function sendTokens(\n    address token,\n    uint256 amount,\n    address recipient\n  ) public {\n    address[] memory path = new address[](2);\n    path[0] = uniswap.WETH();\n    path[1] = token;\n    uniswap.swapExactETHForTokens{value: amount * 1 ether}(\n      0,\n      path,\n      recipient,\n      block.timestamp\n    );\n  }\n\n  function sendCurveLPTokens(\n    address lpToken,\n    uint256 amount,\n    address recipient\n  ) public {\n    address[] memory path = new address[](2);\n    path[0] = uniswap.WETH();\n    path[1] = address(dai);\n    uint256 daiAmount = uniswap.swapExactETHForTokens{value: amount * 1 ether}(\n      0,\n      path,\n      address(this),\n      block.timestamp\n    )[1];\n    address curvePool = curveRegistry.get_pool_from_lp_token(lpToken);\n    curveDepositZap.add_liquidity(\n      curvePool,\n      [0, daiAmount, 0, 0],\n      0,\n      recipient\n    );\n  }\n\n  function sendThreeCrv(uint256 amount, address recipient) public {\n    address[] memory path = new address[](2);\n    path[0] = uniswap.WETH();\n    path[1] = address(dai);\n    uint256 daiAmount = uniswap.swapExactETHForTokens{value: amount * 1 ether}(\n      0,\n      path,\n      address(this),\n      block.timestamp\n    )[1];\n    TriPool(triPool).add_liquidity([daiAmount, 0, 0], 0);\n    threeCrv.transfer(recipient, threeCrv.balanceOf(address(this)));\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/lbp/LBPManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ILBPFactory} from \"./interfaces/ILBPFactory.sol\";\nimport {ILBP} from \"./interfaces/ILBP.sol\";\nimport {IVault, JoinPoolRequest, IAsset, PoolBalanceChangeKind, ExitPoolRequest} from \"./interfaces/IVault.sol\";\n\ncontract LBPManager is Ownable {\n  struct PoolConfiguration {\n    string name;\n    string symbol;\n    IERC20[] tokens;\n    uint256[] tokenAmounts;\n    uint256[] startWeights;\n    uint256[] endWeights;\n    uint256 durationInSeconds;\n    uint256 swapFee;\n    address owner;\n    bool swapEnabledOnStart;\n    uint256 startTime;\n    bool deployed;\n  }\n\n  struct Balancer {\n    ILBPFactory lbpFactory;\n    IVault vault;\n  }\n\n  Balancer public balancer;\n  PoolConfiguration public poolConfig;\n\n  ILBP public lbp;\n  address public dao;\n\n  event SwapEnabled(bool enabled);\n  event PoolCreated(address poolAddress);\n  event PoolJoined(bytes32 poolID);\n\n  constructor(\n    Balancer memory _balancer,\n    string memory _name,\n    string memory _symbol,\n    IERC20[] memory _tokens,\n    uint256[] memory _tokenAmounts,\n    uint256[] memory _startWeights,\n    uint256[] memory _endWeights,\n    uint256 _swapFee,\n    uint256 _durationInSeconds,\n    uint256 _startTime,\n    address _dao\n  ) {\n    balancer = Balancer({lbpFactory: _balancer.lbpFactory, vault: _balancer.vault});\n\n    dao = _dao;\n\n    poolConfig = PoolConfiguration({\n      name: _name,\n      symbol: _symbol,\n      tokens: _tokens,\n      tokenAmounts: _tokenAmounts,\n      startWeights: _startWeights,\n      endWeights: _endWeights,\n      durationInSeconds: _durationInSeconds,\n      swapFee: _swapFee,\n      owner: address(this),\n      swapEnabledOnStart: false,\n      startTime: _startTime,\n      deployed: false\n    });\n\n    _approveBalancerVaultAsSpender();\n  }\n\n  function _approveBalancerVaultAsSpender() internal {\n    (IERC20 pop, IERC20 usdc) = getPoolTokens();\n    pop.approve(address(balancer.vault), type(uint256).max);\n    usdc.approve(address(balancer.vault), type(uint256).max);\n  }\n\n  function deployLBP() external {\n    require(msg.sender == dao, \"Only DAO can call this\");\n\n    lbp = ILBP(\n      balancer.lbpFactory.create(\n        poolConfig.name,\n        poolConfig.symbol,\n        poolConfig.tokens,\n        poolConfig.startWeights,\n        poolConfig.swapFee,\n        poolConfig.owner,\n        poolConfig.swapEnabledOnStart\n      )\n    );\n\n    poolConfig.deployed = true;\n\n    emit PoolCreated(address(lbp));\n\n    _transferPoolTokens();\n    _joinPool();\n  }\n\n  function _joinPool() internal {\n    uint256[] memory maxAmountsIn = new uint256[](poolConfig.tokens.length);\n    for (uint256 i; i < poolConfig.tokens.length; i++) {\n      maxAmountsIn[i] = type(uint256).max;\n    }\n\n    JoinPoolRequest memory request = JoinPoolRequest({\n      assets: _convertERC20sToAssets(poolConfig.tokens),\n      maxAmountsIn: maxAmountsIn,\n      userData: abi.encode(uint256(0), poolConfig.tokenAmounts),\n      fromInternalBalance: false\n    });\n\n    balancer.vault.joinPool(lbp.getPoolId(), address(this), address(this), request);\n    emit PoolJoined(lbp.getPoolId());\n  }\n\n  function withdrawFromPool() external {\n    require(msg.sender == dao, \"no bueno\");\n\n    uint256[] memory minAmountsOut = new uint256[](poolConfig.tokens.length);\n    for (uint256 i; i < poolConfig.tokens.length; i++) {\n      minAmountsOut[i] = uint256(0);\n    }\n\n    lbp.setSwapEnabled(false);\n\n    (, uint256[] memory balances, ) = balancer.vault.getPoolTokens(lbp.getPoolId());\n\n    ExitPoolRequest memory request = ExitPoolRequest({\n      assets: _convertERC20sToAssets(poolConfig.tokens),\n      minAmountsOut: minAmountsOut,\n      userData: abi.encode(uint256(PoolBalanceChangeKind.EXIT), balances),\n      toInternalBalance: false\n    });\n\n    balancer.vault.exitPool(lbp.getPoolId(), address(this), address(this), request);\n  }\n\n  /**\n   * @dev This helper function is a fast and cheap way to convert between IERC20[] and IAsset[] types\n   */\n  function _convertERC20sToAssets(IERC20[] memory tokens) internal pure returns (IAsset[] memory assets) {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      assets := tokens\n    }\n  }\n\n  function _transferPoolTokens() internal {\n    (IERC20 pop, IERC20 usdc) = getPoolTokens();\n\n    pop.transferFrom(dao, address(this), poolConfig.tokenAmounts[0]);\n    usdc.transferFrom(dao, address(this), poolConfig.tokenAmounts[1]);\n  }\n\n  function getPoolTokens() internal view returns (IERC20, IERC20) {\n    return (poolConfig.tokens[0], poolConfig.tokens[1]);\n  }\n\n  function enableTrading() external {\n    require(poolConfig.deployed, \"Pool has not been deployed yet\");\n    require(poolConfig.startTime <= block.timestamp, \"Trading can not be enabled yet\");\n\n    uint256 endtime = block.timestamp + poolConfig.durationInSeconds;\n\n    lbp.updateWeightsGradually(block.timestamp, endtime, poolConfig.endWeights);\n\n    lbp.setSwapEnabled(true);\n    emit SwapEnabled(true);\n  }\n}\n"
    },
    "contracts/lbp/interfaces/ILBPFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ILBPFactory {\n  function create(\n    string memory name,\n    string memory symbol,\n    IERC20[] memory tokens,\n    uint256[] memory weights,\n    uint256 swapFeePercentage,\n    address owner,\n    bool swapEnabledOnStart\n  ) external returns (address);\n}\n"
    },
    "contracts/lbp/interfaces/ILBP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ILBP {\n  function setSwapEnabled(bool swapEnabled) external;\n\n  /**\n   * @dev Schedule a gradual weight change, from the current weights to the given\n   * endWeights, over startTime to endTime\n   */\n  function updateWeightsGradually(\n    uint256 startTime,\n    uint256 endTime,\n    uint256[] memory endWeights\n  ) external;\n\n  function getPoolId() external returns (bytes32 poolID);\n}\n"
    },
    "contracts/lbp/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n * types.\n *\n * This concept is unrelated to a Pool's Asset Managers.\n */\ninterface IAsset {\n  // solhint-disable-previous-line no-empty-blocks\n}\n\nenum PoolBalanceChangeKind {\n  JOIN,\n  EXIT\n}\n\nstruct JoinPoolRequest {\n  IAsset[] assets;\n  uint256[] maxAmountsIn;\n  bytes userData;\n  bool fromInternalBalance;\n}\nstruct ExitPoolRequest {\n  IAsset[] assets;\n  uint256[] minAmountsOut;\n  bytes userData;\n  bool toInternalBalance;\n}\n\ninterface IVault {\n  function setPaused(bool paused) external;\n\n  function joinPool(\n    bytes32 poolId,\n    address sender,\n    address recipient,\n    JoinPoolRequest memory request\n  ) external payable;\n\n  function exitPool(\n    bytes32 poolId,\n    address sender,\n    address recipient,\n    ExitPoolRequest memory request\n  ) external payable;\n\n  function getPoolTokens(bytes32 poolId)\n    external\n    returns (\n      IERC20[] memory tokens,\n      uint256[] memory balances,\n      uint256 maxBlockNumber\n    );\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n  uint8 public __decimals = 18;\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    uint8 _decimals\n  ) ERC20(_name, _symbol) {\n    __decimals = _decimals;\n  }\n\n  function decimals() public view virtual override returns (uint8) {\n    return __decimals;\n  }\n\n  function mint(address to_, uint256 amount_) public {\n    _mint(to_, amount_);\n  }\n\n  function burn(address from_, uint256 amount_) public {\n    _burn(from_, amount_);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}