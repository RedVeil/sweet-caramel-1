{
  "address": "0x8198f5d8F8CfFE8f9C413d98a0A55aEB8ab9FbB7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IContractRegistry",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_threeCrv",
          "type": "address"
        },
        {
          "internalType": "contract BasicIssuanceModule",
          "name": "_basicIssuanceModule",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_yTokenAddresses",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "contract CurveMetapool",
              "name": "curveMetaPool",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "crvLPToken",
              "type": "address"
            }
          ],
          "internalType": "struct HysiBatchInteraction.CurvePoolTokenPair[]",
          "name": "_curvePoolTokenPairs",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_batchCooldown",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_redeemThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "suppliedTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hysiAmount",
          "type": "uint256"
        }
      ],
      "name": "BatchMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "suppliedTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threeCrvAmount",
          "type": "uint256"
        }
      ],
      "name": "BatchRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum HysiBatchInteraction.BatchType",
          "name": "batchType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedToken",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum HysiBatchInteraction.BatchType",
          "name": "batchType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MovedUnclaimedDepositsIntoCurrentBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        }
      ],
      "name": "TokenSetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "WithdrawnFromBatch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountBatches",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "batchCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountToMint",
          "type": "uint256"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_min3crvToReceive",
          "type": "uint256"
        }
      ],
      "name": "batchRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "batches",
      "outputs": [
        {
          "internalType": "enum HysiBatchInteraction.BatchType",
          "name": "batchType",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "claimable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "unclaimedShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "suppliedTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "suppliedTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "claimableTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_claimFor",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "contract IContractRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMintBatchId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRedeemBatchId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "curvePoolTokenPairs",
      "outputs": [
        {
          "internalType": "contract CurveMetapool",
          "name": "curveMetaPool",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "crvLPToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositFor",
          "type": "address"
        }
      ],
      "name": "depositForMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositForRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountBatches",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMintedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRedeemedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_batchIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_shares",
          "type": "uint256[]"
        },
        {
          "internalType": "enum HysiBatchInteraction.BatchType",
          "name": "_batchType",
          "type": "uint8"
        }
      ],
      "name": "moveUnclaimedDepositsIntoCurrentBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setBasicIssuanceModule",
      "outputs": [
        {
          "internalType": "contract BasicIssuanceModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cooldown",
          "type": "uint256"
        }
      ],
      "name": "setBatchCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_yTokenAddresses",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "contract CurveMetapool",
              "name": "curveMetaPool",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "crvLPToken",
              "type": "address"
            }
          ],
          "internalType": "struct HysiBatchInteraction.CurvePoolTokenPair[]",
          "name": "_curvePoolTokenPairs",
          "type": "tuple[]"
        }
      ],
      "name": "setCurvePoolTokenPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setMintThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setRedeemThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setToken",
      "outputs": [
        {
          "internalType": "contract ISetToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "threeCrv",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountToWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_withdrawFor",
          "type": "address"
        }
      ],
      "name": "withdrawFromBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa2a184c7392ee7f03bc7f2cb6c899306217aa02defd77e54a91a97dd7b389b5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8198f5d8F8CfFE8f9C413d98a0A55aEB8ab9FbB7",
    "transactionIndex": 0,
    "gasUsed": "4564735",
    "logsBloom": "0x
    "blockHash": "0x8f3620ae7d46b499eef9f199a1f768d03989a975c44b9f807ff35513de1728e6",
    "transactionHash": "0xfa2a184c7392ee7f03bc7f2cb6c899306217aa02defd77e54a91a97dd7b389b5",
    "logs": [],
    "blockNumber": 13206633,
    "cumulativeGasUsed": "4564735",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB0D4afd8879eD9F52b28595d31B441D079B2Ca07",
    "0x8d1621A27BB8c84e59ca339Cf9B21e15b907e408",
    "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
    "0xd8EF3cACe8b4907117a45B0b125c68560532F94D",
    [
      "0x30FCf7c6cDfC46eC237783D94Fc78553E79d4E9C",
      "0xB4AdA607B9d6b2c9Ee07A275e9616B84AC560139",
      "0x3B96d491f067912D18563d56858Ba7d6EC67a6fa",
      "0x1C6a9783F812b3Af3aBbf7de64c3cD7CC7D1af44"
    ],
    [
      {
        "curveMetaPool": "0x8038C01A0390a8c547446a0b2c18fc9aEFEcc10c",
        "crvLPToken": "0x3a664Ab939FD8482048609f652f9a0B0677337B9"
      },
      {
        "curveMetaPool": "0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B",
        "crvLPToken": "0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B"
      },
      {
        "curveMetaPool": "0x0f9cb53Ebe405d49A0bbdBD291A65Ff571bC83e1",
        "crvLPToken": "0x4f3E8F405CF5aFC05D68142F3783bDfE13811522"
      },
      {
        "curveMetaPool": "0x890f4e345B1dAED0367A877a1612f86A1f86985f",
        "crvLPToken": "0x94e131324b6054c0D789b190b2dAC504e4361b53"
      }
    ],
    1,
    "1000000000000000000",
    "100000000000000000"
  ],
  "solcInputHash": "0e2d243efd06c5832267e40ce916613e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_threeCrv\",\"type\":\"address\"},{\"internalType\":\"contract BasicIssuanceModule\",\"name\":\"_basicIssuanceModule\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_yTokenAddresses\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"contract CurveMetapool\",\"name\":\"curveMetaPool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"crvLPToken\",\"type\":\"address\"}],\"internalType\":\"struct HysiBatchInteraction.CurvePoolTokenPair[]\",\"name\":\"_curvePoolTokenPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_batchCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"suppliedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hysiAmount\",\"type\":\"uint256\"}],\"name\":\"BatchMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"suppliedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threeCrvAmount\",\"type\":\"uint256\"}],\"name\":\"BatchRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum HysiBatchInteraction.BatchType\",\"name\":\"batchType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedToken\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum HysiBatchInteraction.BatchType\",\"name\":\"batchType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MovedUnclaimedDepositsIntoCurrentBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"TokenSetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawnFromBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountBatches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountToMint\",\"type\":\"uint256\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min3crvToReceive\",\"type\":\"uint256\"}],\"name\":\"batchRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"enum HysiBatchInteraction.BatchType\",\"name\":\"batchType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suppliedTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"suppliedTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimableTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_claimFor\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMintBatchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRedeemBatchId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curvePoolTokenPairs\",\"outputs\":[{\"internalType\":\"contract CurveMetapool\",\"name\":\"curveMetaPool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"crvLPToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositFor\",\"type\":\"address\"}],\"name\":\"depositForMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositForRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountBatches\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRedeemedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_batchIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"enum HysiBatchInteraction.BatchType\",\"name\":\"_batchType\",\"type\":\"uint8\"}],\"name\":\"moveUnclaimedDepositsIntoCurrentBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBasicIssuanceModule\",\"outputs\":[{\"internalType\":\"contract BasicIssuanceModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"setBatchCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_yTokenAddresses\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"contract CurveMetapool\",\"name\":\"curveMetaPool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"crvLPToken\",\"type\":\"address\"}],\"internalType\":\"struct HysiBatchInteraction.CurvePoolTokenPair[]\",\"name\":\"_curvePoolTokenPairs\",\"type\":\"tuple[]\"}],\"name\":\"setCurvePoolTokenPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setMintThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setRedeemThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setToken\",\"outputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threeCrv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawFor\",\"type\":\"address\"}],\"name\":\"withdrawFromBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchMint(uint256)\":{\"details\":\"This function deposits 3CRV in the underlying Metapool and deposits these LP token to get yToken which in turn are used to mint HYSIThis process leaves some leftovers which are partially used in the next mint batches.In order to get 3CRV we can implement a zap to move stables into the curve tri-poolhandleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol)\",\"params\":{\"_minAmountToMint\":\"The expected min amount of hysi to mint. If hysiAmount is lower than minAmountToMint_ the transaction will revert.\"}},\"batchRedeem(uint256)\":{\"details\":\"This function reedeems HYSI for the underlying yToken and deposits these yToken in curve Metapools for 3CRVIn order to get stablecoins from 3CRV we can use a zap to redeem 3CRV for stables in the curve tri-poolhandleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol)\",\"params\":{\"_min3crvToReceive\":\"sets minimum amount of 3crv to redeem HYSI for, otherwise the transaction will revert\"}},\"claim(bytes32,address)\":{\"params\":{\"_batchId\":\"Id of batch to claim from\",\"_claimFor\":\"User that gets the shares attributed to (for use in zapper contract)\"}},\"depositForMint(uint256,address)\":{\"details\":\"Should this be secured we nonReentrant?\",\"params\":{\"_amount\":\"Amount of 3cr3CRV to use for minting\",\"_depositFor\":\"User that gets the shares attributed to (for use in zapper contract)\"}},\"depositForRedeem(uint256)\":{\"details\":\"Should this be secured we nonReentrant?\",\"params\":{\"_amount\":\"amount of HYSI to be redeemed\"}},\"getAccountBatches(address)\":{\"params\":{\"_account\":\"The address for whom we want to retrieve batches\"}},\"moveUnclaimedDepositsIntoCurrentBatch(bytes32[],uint256[],uint8)\":{\"details\":\"the indices of batchIds must match the amountsInHysi to work properly (This will be done by the frontend)\",\"params\":{\"_batchIds\":\"the ids of each batch where hysi should be moved from\",\"_batchType\":\"the batchType where funds should be taken from (Mint -> Take Hysi and redeem then, Redeem -> Take 3Crv and Mint HYSI)\",\"_shares\":\"how many shares should redeemed in each of the batches\"}},\"setBatchCooldown(uint256)\":{\"details\":\"The cooldown is the same for redeem and mint batches\",\"params\":{\"_cooldown\":\"Cooldown in seconds\"}},\"setCurvePoolTokenPairs(address[],(address,address)[])\":{\"params\":{\"_curvePoolTokenPairs\":\"An array structs describing underlying yToken, crvToken and curve metapool\",\"_yTokenAddresses\":\"An array of addresses for the yToken needed to mint HYSI\"}},\"setMintThreshold(uint256)\":{\"params\":{\"_threshold\":\"Amount of 3CRV necessary to mint immediately\"}},\"setRedeemThreshold(uint256)\":{\"params\":{\"_threshold\":\"Amount of HYSI necessary to mint immediately\"}},\"withdrawFromBatch(bytes32,uint256,address)\":{\"params\":{\"_amountToWithdraw\":\"Amount of HYSI or 3CRV to be withdrawn from the queue (depending on mintBatch / redeemBatch)\",\"_batchId\":\"From which batch should funds be withdrawn from\",\"_withdrawFor\":\"User that gets the shares attributed to (for use in zapper contract)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountBalances(bytes32,address)\":{\"notice\":\"This maps batch ids to addresses with share balances\"},\"batchMint(uint256)\":{\"notice\":\"Mint HYSI token with deposited 3CRV. This function goes through all the steps necessary to mint an optimal amount of HYSI\"},\"batchRedeem(uint256)\":{\"notice\":\"Redeems HYSI for 3CRV. This function goes through all the steps necessary to get 3CRV\"},\"claim(bytes32,address)\":{\"notice\":\"Claims funds after the batch has been processed (get HYSI from a mint batch and 3CRV from a redeem batch)\"},\"depositForMint(uint256,address)\":{\"notice\":\"Deposits funds in the current mint batch\"},\"depositForRedeem(uint256)\":{\"notice\":\"deposits funds in the current redeem batch\"},\"getAccountBatches(address)\":{\"notice\":\"Get ids for all batches that a user has interacted with\"},\"moveUnclaimedDepositsIntoCurrentBatch(bytes32[],uint256[],uint8)\":{\"notice\":\"Moves unclaimed token (3crv or Hysi) from their respective Batches into a new redeemBatch / mintBatch without needing to claim them first. This will typically be used when hysi has already been minted and a user has never claimed / transfered the token to their address and they would like to convert it to stablecoin.\"},\"setBatchCooldown(uint256)\":{\"notice\":\"Changes the current batch cooldown\"},\"setCurvePoolTokenPairs(address[],(address,address)[])\":{\"notice\":\"This function allows the owner to change the composition of underlying token of the HYSI\"},\"setMintThreshold(uint256)\":{\"notice\":\"Changes the Threshold of 3CRV which need to be deposited to be able to mint immediately\"},\"setRedeemThreshold(uint256)\":{\"notice\":\"Changes the Threshold of HYSI which need to be deposited to be able to redeem immediately\"},\"withdrawFromBatch(bytes32,uint256,address)\":{\"notice\":\"This function allows a user to withdraw their funds from a batch before that batch has been processed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/defi/butter/HysiBatchInteraction.sol\":\"HysiBatchInteraction\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xe936fc79332de2ca7b1c06a70f81345aa2466958aab00f463e312ca0585e85cf\",\"license\":\"MIT\"},\"contracts/core/defi/butter/HysiBatchInteraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../interfaces/IACLRegistry.sol\\\";\\nimport \\\"../../../externals/interfaces/YearnVault.sol\\\";\\nimport \\\"../../../externals/interfaces/BasicIssuanceModule.sol\\\";\\nimport \\\"../../../externals/interfaces/ISetToken.sol\\\";\\nimport \\\"../../../externals/interfaces/CurveContracts.sol\\\";\\nimport \\\"../../interfaces/IContractRegistry.sol\\\";\\nimport \\\"../../utils/KeeperIncentive.sol\\\";\\n\\n/*\\nThis Contract allows smaller depositors to mint and redeem HYSI without needing to through all the steps necessary on their own...\\n...which not only takes long but mainly costs enormous amounts of gas.\\nThe HYSI is created from 4 different yToken which in turn need each a deposit of a crvLPToken.\\nThis means 12 approvals and 9 deposits are necessary to mint one HYSI.\\nWe Batch this process and allow users to pool their funds. Than we pay keeper to Mint or Redeem HYSI regularly.\\n*/\\ncontract HysiBatchInteraction {\\n  using SafeERC20 for YearnVault;\\n  using SafeERC20 for ISetToken;\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * @notice Defines if the Batch will mint or redeem HYSI\\n   */\\n  enum BatchType {\\n    Mint,\\n    Redeem\\n  }\\n\\n  /**\\n   * @notice Defines if the Batch will mint or redeem HYSI\\n   * @param curveMetaPool A CurveMetaPool for trading an exotic stablecoin against 3CRV\\n   * @param crvLPToken The LP-Token of the CurveMetapool\\n   */\\n  struct CurvePoolTokenPair {\\n    CurveMetapool curveMetaPool;\\n    IERC20 crvLPToken;\\n  }\\n\\n  /**\\n   * @notice The Batch structure is used both for Batches of Minting and Redeeming\\n   * @param batchType Determines if this Batch is for Minting or Redeeming HYSI\\n   * @param batchId bytes32 id of the batch\\n   * @param claimable Shows if a batch has been processed and is ready to be claimed, the suppliedToken cant be withdrawn if a batch is claimable\\n   * @param unclaimedShares The total amount of unclaimed shares in this batch\\n   * @param suppliedTokenBalance The total amount of deposited token (either 3CRV or HYSI)\\n   * @param claimableTokenBalance The total amount of claimable token (either 3CRV or HYSI)\\n   * @param tokenAddress The address of the the token to be claimed\\n   * @param shareBalance The individual share balance per user that has deposited token\\n   */\\n  struct Batch {\\n    BatchType batchType;\\n    bytes32 batchId;\\n    bool claimable;\\n    uint256 unclaimedShares;\\n    uint256 suppliedTokenBalance;\\n    uint256 claimableTokenBalance;\\n    address suppliedTokenAddress;\\n    address claimableTokenAddress;\\n  }\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  bytes32 public immutable contractName = \\\"HysiBatchInteraction\\\";\\n\\n  IContractRegistry public contractRegistry;\\n  ISetToken public setToken;\\n  IERC20 public threeCrv;\\n  BasicIssuanceModule public setBasicIssuanceModule;\\n  mapping(address => CurvePoolTokenPair) public curvePoolTokenPairs;\\n\\n  /**\\n   * @notice This maps batch ids to addresses with share balances\\n   */\\n  mapping(bytes32 => mapping(address => uint256)) public accountBalances;\\n  mapping(address => bytes32[]) public accountBatches;\\n  mapping(bytes32 => Batch) public batches;\\n  bytes32[] public batchIds;\\n\\n  uint256 public lastMintedAt;\\n  uint256 public lastRedeemedAt;\\n  bytes32 public currentMintBatchId;\\n  bytes32 public currentRedeemBatchId;\\n  uint256 public batchCooldown;\\n  uint256 public mintThreshold;\\n  uint256 public redeemThreshold;\\n\\n  /* ========== EVENTS ========== */\\n\\n  event Deposit(address indexed from, uint256 deposit);\\n  event Withdrawal(address indexed to, uint256 amount);\\n  event BatchMinted(\\n    bytes32 indexed batchId,\\n    uint256 suppliedTokenAmount,\\n    uint256 hysiAmount\\n  );\\n  event BatchRedeemed(\\n    bytes32 indexed batchId,\\n    uint256 suppliedTokenAmount,\\n    uint256 threeCrvAmount\\n  );\\n  event Claimed(\\n    address indexed account,\\n    BatchType batchType,\\n    uint256 shares,\\n    uint256 claimedToken\\n  );\\n  event TokenSetAdded(ISetToken setToken);\\n  event WithdrawnFromBatch(bytes32 batchId, uint256 amount, address to);\\n  event MovedUnclaimedDepositsIntoCurrentBatch(\\n    uint256 amount,\\n    BatchType batchType,\\n    address account\\n  );\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(\\n    IContractRegistry _contractRegistry,\\n    ISetToken _setToken,\\n    IERC20 _threeCrv,\\n    BasicIssuanceModule _basicIssuanceModule,\\n    address[] memory _yTokenAddresses,\\n    CurvePoolTokenPair[] memory _curvePoolTokenPairs,\\n    uint256 _batchCooldown,\\n    uint256 _mintThreshold,\\n    uint256 _redeemThreshold\\n  ) {\\n    contractRegistry = _contractRegistry;\\n    setToken = _setToken;\\n    threeCrv = _threeCrv;\\n    setBasicIssuanceModule = _basicIssuanceModule;\\n\\n    _setCurvePoolTokenPairs(_yTokenAddresses, _curvePoolTokenPairs);\\n\\n    batchCooldown = _batchCooldown;\\n    mintThreshold = _mintThreshold;\\n    redeemThreshold = _redeemThreshold;\\n    lastMintedAt = block.timestamp;\\n    lastRedeemedAt = block.timestamp;\\n\\n    _generateNextBatch(bytes32(\\\"mint\\\"), BatchType.Mint);\\n    _generateNextBatch(bytes32(\\\"redeem\\\"), BatchType.Redeem);\\n  }\\n\\n  /* ========== VIEWS ========== */\\n  /**\\n   * @notice Get ids for all batches that a user has interacted with\\n   * @param _account The address for whom we want to retrieve batches\\n   */\\n  function getAccountBatches(address _account)\\n    external\\n    view\\n    returns (bytes32[] memory)\\n  {\\n    return accountBatches[_account];\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * @notice Deposits funds in the current mint batch\\n   * @param _amount Amount of 3cr3CRV to use for minting\\n   * @param _depositFor User that gets the shares attributed to (for use in zapper contract)\\n   * @dev Should this be secured we nonReentrant?\\n   */\\n  function depositForMint(uint256 _amount, address _depositFor) external {\\n    require(\\n      IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n        .hasRole(keccak256(\\\"HysiZapper\\\"), msg.sender) ||\\n        msg.sender == _depositFor,\\n      \\\"you cant transfer other funds\\\"\\n    );\\n    require(threeCrv.balanceOf(msg.sender) >= _amount, \\\"insufficent balance\\\");\\n    threeCrv.transferFrom(msg.sender, address(this), _amount);\\n    _deposit(_amount, currentMintBatchId, _depositFor);\\n  }\\n\\n  /**\\n   * @notice deposits funds in the current redeem batch\\n   * @param _amount amount of HYSI to be redeemed\\n   * @dev Should this be secured we nonReentrant?\\n   */\\n  function depositForRedeem(uint256 _amount) external {\\n    require(setToken.balanceOf(msg.sender) >= _amount, \\\"insufficient balance\\\");\\n    setToken.transferFrom(msg.sender, address(this), _amount);\\n    _deposit(_amount, currentRedeemBatchId, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This function allows a user to withdraw their funds from a batch before that batch has been processed\\n   * @param _batchId From which batch should funds be withdrawn from\\n   * @param _amountToWithdraw Amount of HYSI or 3CRV to be withdrawn from the queue (depending on mintBatch / redeemBatch)\\n   * @param _withdrawFor User that gets the shares attributed to (for use in zapper contract)\\n   */\\n  function withdrawFromBatch(\\n    bytes32 _batchId,\\n    uint256 _amountToWithdraw,\\n    address _withdrawFor\\n  ) external {\\n    address recipient = _getRecipient(_withdrawFor);\\n\\n    Batch storage batch = batches[_batchId];\\n    uint256 accountBalance = accountBalances[_batchId][_withdrawFor];\\n    require(batch.claimable == false, \\\"already processed\\\");\\n    require(\\n      accountBalance >= _amountToWithdraw,\\n      \\\"account has insufficient funds\\\"\\n    );\\n\\n    //At this point the share balance is equal to the supplied token and can be used interchangeably\\n    accountBalances[_batchId][_withdrawFor] =\\n      accountBalance -\\n      _amountToWithdraw;\\n    batch.suppliedTokenBalance = batch.suppliedTokenBalance - _amountToWithdraw;\\n    batch.unclaimedShares = batch.unclaimedShares - _amountToWithdraw;\\n\\n    if (batch.batchType == BatchType.Mint) {\\n      threeCrv.safeTransfer(recipient, _amountToWithdraw);\\n    } else {\\n      setToken.safeTransfer(recipient, _amountToWithdraw);\\n    }\\n    emit WithdrawnFromBatch(_batchId, _amountToWithdraw, _withdrawFor);\\n  }\\n\\n  /**\\n   * @notice Claims funds after the batch has been processed (get HYSI from a mint batch and 3CRV from a redeem batch)\\n   * @param _batchId Id of batch to claim from\\n   * @param _claimFor User that gets the shares attributed to (for use in zapper contract)\\n   */\\n  function claim(bytes32 _batchId, address _claimFor)\\n    external\\n    returns (uint256)\\n  {\\n    Batch storage batch = batches[_batchId];\\n    require(batch.claimable, \\\"not yet claimable\\\");\\n\\n    address recipient = _getRecipient(_claimFor);\\n    uint256 accountBalance = accountBalances[_batchId][_claimFor];\\n    require(\\n      accountBalance <= batch.unclaimedShares,\\n      \\\"claiming too many shares\\\"\\n    );\\n\\n    //Calculate how many token will be claimed\\n    uint256 tokenAmountToClaim = (batch.claimableTokenBalance *\\n      accountBalance) / batch.unclaimedShares;\\n\\n    //Subtract the claimed token from the batch\\n    batch.claimableTokenBalance =\\n      batch.claimableTokenBalance -\\n      tokenAmountToClaim;\\n    batch.unclaimedShares = batch.unclaimedShares - accountBalance;\\n    accountBalances[_batchId][_claimFor] = 0;\\n\\n    //Transfer token\\n    if (batch.batchType == BatchType.Mint) {\\n      setToken.safeTransfer(recipient, tokenAmountToClaim);\\n    } else {\\n      threeCrv.safeTransfer(recipient, tokenAmountToClaim);\\n    }\\n\\n    emit Claimed(\\n      _claimFor,\\n      batch.batchType,\\n      accountBalance,\\n      tokenAmountToClaim\\n    );\\n\\n    return tokenAmountToClaim;\\n  }\\n\\n  /**\\n   * @notice Moves unclaimed token (3crv or Hysi) from their respective Batches into a new redeemBatch / mintBatch without needing to claim them first. This will typically be used when hysi has already been minted and a user has never claimed / transfered the token to their address and they would like to convert it to stablecoin.\\n   * @param _batchIds the ids of each batch where hysi should be moved from\\n   * @param _shares how many shares should redeemed in each of the batches\\n   * @param _batchType the batchType where funds should be taken from (Mint -> Take Hysi and redeem then, Redeem -> Take 3Crv and Mint HYSI)\\n   * @dev the indices of batchIds must match the amountsInHysi to work properly (This will be done by the frontend)\\n   */\\n  function moveUnclaimedDepositsIntoCurrentBatch(\\n    bytes32[] calldata _batchIds,\\n    uint256[] calldata _shares,\\n    BatchType _batchType\\n  ) external {\\n    require(_batchIds.length == _shares.length, \\\"array lengths must match\\\");\\n\\n    uint256 totalAmount;\\n\\n    for (uint256 i; i < _batchIds.length; i++) {\\n      Batch storage batch = batches[_batchIds[i]];\\n      uint256 accountBalance = accountBalances[batch.batchId][msg.sender];\\n      //Check that the user has enough funds and that the batch was already minted\\n      //Only the current redeemBatch is claimable == false so this check allows us to not adjust batch.suppliedTokenBalance\\n      //Additionally it makes no sense to move funds from the current redeemBatch to the current redeemBatch\\n      require(batch.claimable == true, \\\"has not yet been processed\\\");\\n      require(batch.batchType == _batchType, \\\"incorrect batchType\\\");\\n      require(accountBalance >= _shares[i], \\\"account has insufficient funds\\\");\\n\\n      uint256 tokenAmountToClaim = (batch.claimableTokenBalance * _shares[i]) /\\n        batch.unclaimedShares;\\n      batch.claimableTokenBalance =\\n        batch.claimableTokenBalance -\\n        tokenAmountToClaim;\\n      batch.unclaimedShares = batch.unclaimedShares - _shares[i];\\n      accountBalances[batch.batchId][msg.sender] = accountBalance - _shares[i];\\n\\n      totalAmount = totalAmount + tokenAmountToClaim;\\n    }\\n    require(totalAmount > 0, \\\"totalAmount must be larger 0\\\");\\n\\n    if (BatchType.Mint == _batchType) {\\n      _deposit(totalAmount, currentRedeemBatchId, msg.sender);\\n    }\\n\\n    if (BatchType.Redeem == _batchType) {\\n      _deposit(totalAmount, currentMintBatchId, msg.sender);\\n    }\\n\\n    emit MovedUnclaimedDepositsIntoCurrentBatch(\\n      totalAmount,\\n      _batchType,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @notice Mint HYSI token with deposited 3CRV. This function goes through all the steps necessary to mint an optimal amount of HYSI\\n   * @param _minAmountToMint The expected min amount of hysi to mint. If hysiAmount is lower than minAmountToMint_ the transaction will revert.\\n   * @dev This function deposits 3CRV in the underlying Metapool and deposits these LP token to get yToken which in turn are used to mint HYSI\\n   * @dev This process leaves some leftovers which are partially used in the next mint batches.\\n   * @dev In order to get 3CRV we can implement a zap to move stables into the curve tri-pool\\n   * @dev handleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol)\\n   */\\n  function batchMint(uint256 _minAmountToMint) external {\\n    KeeperIncentive(contractRegistry.getContract(keccak256(\\\"KeeperIncentive\\\")))\\n      .handleKeeperIncentive(contractName, 0, msg.sender);\\n    Batch storage batch = batches[currentMintBatchId];\\n\\n    //Check if there was enough time between the last batch minting and this attempt...\\n    //...or if enough 3CRV was deposited to make the minting worthwhile\\n    //This is to prevent excessive gas consumption and costs as we will pay keeper to call this function\\n    require(\\n      (block.timestamp - lastMintedAt) >= batchCooldown ||\\n        (batch.suppliedTokenBalance >= mintThreshold),\\n      \\\"can not execute batch action yet\\\"\\n    );\\n\\n    //Check if the Batch got already processed -- should technically not be possible\\n    require(batch.claimable == false, \\\"already minted\\\");\\n\\n    //Check if this contract has enough 3CRV -- should technically not be necessary\\n    require(\\n      threeCrv.balanceOf(address(this)) >= batch.suppliedTokenBalance,\\n      \\\"account has insufficient balance of token to mint\\\"\\n    );\\n\\n    //Get the quantity of yToken for one HYSI\\n    (\\n      address[] memory tokenAddresses,\\n      uint256[] memory quantities\\n    ) = setBasicIssuanceModule.getRequiredComponentUnitsForIssue(\\n        setToken,\\n        1e18\\n      );\\n\\n    //Total value of leftover yToken valued in 3CRV\\n    uint256 totalLeftoverIn3Crv;\\n\\n    //Individual yToken leftovers valued in 3CRV\\n    uint256[] memory leftoversIn3Crv = new uint256[](quantities.length);\\n\\n    for (uint256 i; i < tokenAddresses.length; i++) {\\n      //Check how many crvLPToken are needed to mint one yToken\\n      uint256 yTokenInCrvToken = YearnVault(tokenAddresses[i]).pricePerShare();\\n\\n      //Check how many 3CRV are needed to mint one crvLPToken\\n      uint256 crvLPTokenIn3Crv = uint256(2e18) -\\n        curvePoolTokenPairs[tokenAddresses[i]]\\n          .curveMetaPool\\n          .calc_withdraw_one_coin(1e18, 1);\\n\\n      //Calculate how many 3CRV are needed to mint one yToken\\n      uint256 yTokenIn3Crv = (yTokenInCrvToken * crvLPTokenIn3Crv) / 1e18;\\n\\n      //Calculate how much the yToken leftover are worth in 3CRV\\n      uint256 leftoverIn3Crv = (YearnVault(tokenAddresses[i]).balanceOf(\\n        address(this)\\n      ) * yTokenIn3Crv) / 1e18;\\n\\n      //Add the leftover value to the array of leftovers for later use\\n      leftoversIn3Crv[i] = leftoverIn3Crv;\\n\\n      //Add the leftover value to the total leftover value\\n      totalLeftoverIn3Crv = totalLeftoverIn3Crv + leftoverIn3Crv;\\n    }\\n\\n    //Calculate the total value of supplied token + leftovers in 3CRV\\n    uint256 suppliedTokenBalancePlusLeftovers = batch.suppliedTokenBalance +\\n      totalLeftoverIn3Crv;\\n\\n    for (uint256 i; i < tokenAddresses.length; i++) {\\n      //Calculate the pool allocation by dividing the suppliedTokenBalance by 4 and take leftovers into account\\n      uint256 poolAllocation = suppliedTokenBalancePlusLeftovers /\\n        4 -\\n        leftoversIn3Crv[i];\\n\\n      //Pool 3CRV to get crvLPToken\\n      _sendToCurve(\\n        poolAllocation,\\n        curvePoolTokenPairs[tokenAddresses[i]].curveMetaPool\\n      );\\n\\n      //Deposit crvLPToken to get yToken\\n      _sendToYearn(\\n        curvePoolTokenPairs[tokenAddresses[i]].crvLPToken.balanceOf(\\n          address(this)\\n        ),\\n        curvePoolTokenPairs[tokenAddresses[i]].crvLPToken,\\n        YearnVault(tokenAddresses[i])\\n      );\\n\\n      //Approve yToken for minting\\n      YearnVault(tokenAddresses[i]).safeIncreaseAllowance(\\n        address(setBasicIssuanceModule),\\n        YearnVault(tokenAddresses[i]).balanceOf(address(this))\\n      );\\n    }\\n\\n    //Get the minimum amount of hysi that we can mint with our balances of yToken\\n    uint256 hysiAmount = (YearnVault(tokenAddresses[0]).balanceOf(\\n      address(this)\\n    ) * 1e18) / quantities[0];\\n\\n    for (uint256 i = 1; i < tokenAddresses.length; i++) {\\n      hysiAmount = Math.min(\\n        hysiAmount,\\n        (YearnVault(tokenAddresses[i]).balanceOf(address(this)) * 1e18) /\\n          quantities[i]\\n      );\\n    }\\n\\n    require(hysiAmount >= _minAmountToMint, \\\"slippage too high\\\");\\n\\n    //Mint HYSI\\n    setBasicIssuanceModule.issue(setToken, hysiAmount, address(this));\\n\\n    //Save the minted amount HYSI as claimable token for the batch\\n    batch.claimableTokenBalance = hysiAmount;\\n\\n    //Set claimable to true so users can claim their HYSI\\n    batch.claimable = true;\\n\\n    //Update lastMintedAt for cooldown calculations\\n    lastMintedAt = block.timestamp;\\n\\n    emit BatchMinted(\\n      currentMintBatchId,\\n      batch.suppliedTokenBalance,\\n      hysiAmount\\n    );\\n\\n    //Create the next mint batch\\n    _generateNextBatch(currentMintBatchId, BatchType.Mint);\\n  }\\n\\n  /**\\n   * @notice Redeems HYSI for 3CRV. This function goes through all the steps necessary to get 3CRV\\n   * @param _min3crvToReceive sets minimum amount of 3crv to redeem HYSI for, otherwise the transaction will revert\\n   * @dev This function reedeems HYSI for the underlying yToken and deposits these yToken in curve Metapools for 3CRV\\n   * @dev In order to get stablecoins from 3CRV we can use a zap to redeem 3CRV for stables in the curve tri-pool\\n   * @dev handleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol)\\n   */\\n  function batchRedeem(uint256 _min3crvToReceive) external {\\n    KeeperIncentive(contractRegistry.getContract(keccak256(\\\"KeeperIncentive\\\")))\\n      .handleKeeperIncentive(contractName, 1, msg.sender);\\n    Batch storage batch = batches[currentRedeemBatchId];\\n\\n    //Check if there was enough time between the last batch redemption and this attempt...\\n    //...or if enough HYSI was deposited to make the redemption worthwhile\\n    //This is to prevent excessive gas consumption and costs as we will pay keeper to call this function\\n    require(\\n      (block.timestamp - lastRedeemedAt >= batchCooldown) ||\\n        (batch.suppliedTokenBalance >= redeemThreshold),\\n      \\\"can not execute batch action yet\\\"\\n    );\\n    //Check if the Batch got already processed -- should technically not be possible\\n    require(batch.claimable == false, \\\"already redeemed\\\");\\n\\n    //Check if this contract has enough HYSI -- should technically not be necessary\\n    require(\\n      setToken.balanceOf(address(this)) >= batch.suppliedTokenBalance,\\n      \\\"contract has insufficient balance of token to redeem\\\"\\n    );\\n\\n    //Get tokenAddresses for mapping of underlying\\n    (\\n      address[] memory tokenAddresses,\\n      uint256[] memory quantities\\n    ) = setBasicIssuanceModule.getRequiredComponentUnitsForIssue(\\n        setToken,\\n        1e18\\n      );\\n\\n    //Allow setBasicIssuanceModule to use HYSI\\n    setToken.safeIncreaseAllowance(\\n      address(setBasicIssuanceModule),\\n      batch.suppliedTokenBalance\\n    );\\n\\n    //Redeem HYSI for yToken\\n    setBasicIssuanceModule.redeem(\\n      setToken,\\n      batch.suppliedTokenBalance,\\n      address(this)\\n    );\\n\\n    //Check our balance of 3CRV since we could have some still around from previous batches\\n    uint256 oldBalance = threeCrv.balanceOf(address(this));\\n\\n    for (uint256 i; i < tokenAddresses.length; i++) {\\n      //Deposit yToken to receive crvLPToken\\n      _withdrawFromYearn(\\n        YearnVault(tokenAddresses[i]).balanceOf(address(this)),\\n        YearnVault(tokenAddresses[i])\\n      );\\n\\n      uint256 crvLPTokenBalance = curvePoolTokenPairs[tokenAddresses[i]]\\n        .crvLPToken\\n        .balanceOf(address(this));\\n\\n      //Deposit crvLPToken to receive 3CRV\\n      _withdrawFromCurve(\\n        crvLPTokenBalance,\\n        curvePoolTokenPairs[tokenAddresses[i]].crvLPToken,\\n        curvePoolTokenPairs[tokenAddresses[i]].curveMetaPool\\n      );\\n    }\\n\\n    //Save the redeemed amount of 3CRV as claimable token for the batch\\n    batch.claimableTokenBalance =\\n      threeCrv.balanceOf(address(this)) -\\n      oldBalance;\\n\\n    require(\\n      batch.claimableTokenBalance >= _min3crvToReceive,\\n      \\\"slippage too high\\\"\\n    );\\n\\n    emit BatchRedeemed(\\n      currentRedeemBatchId,\\n      batch.suppliedTokenBalance,\\n      batch.claimableTokenBalance\\n    );\\n\\n    //Set claimable to true so users can claim their HYSI\\n    batch.claimable = true;\\n\\n    //Update lastRedeemedAt for cooldown calculations\\n    lastRedeemedAt = block.timestamp;\\n\\n    //Create the next redeem batch id\\n    _generateNextBatch(currentRedeemBatchId, BatchType.Redeem);\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  /**\\n   * @notice makes sure only zapper or user can withdraw from accout_ and returns the recipient of the withdrawn token\\n   * @param _account is the address which gets withdrawn from\\n   * @dev returns recipient of the withdrawn funds\\n   * @dev By default a user should set _account to their address\\n   * @dev If zapper is used to withdraw and swap for a user the msg.sender will be zapper and _account is the user which we withdraw from. The zapper than sends the swapped funds afterwards to the user\\n   */\\n  function _getRecipient(address _account) internal returns (address) {\\n    //Make sure that only zapper can withdraw from someone else\\n    require(\\n      IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n        .hasRole(keccak256(\\\"HysiZapper\\\"), msg.sender) || msg.sender == _account,\\n      \\\"you cant transfer other funds\\\"\\n    );\\n\\n    //Set recipient per default to _account\\n    address recipient = _account;\\n\\n    //set the recipient to zapper if its called by the zapper\\n    if (\\n      IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n        .hasRole(keccak256(\\\"HysiZapper\\\"), msg.sender)\\n    ) {\\n      recipient = msg.sender;\\n    }\\n    return recipient;\\n  }\\n\\n  /**\\n   * @notice Generates the next batch id for new deposits\\n   * @param _currentBatchId takes the current mint or redeem batch id\\n   * @param _batchType BatchType of the newly created id\\n   */\\n  function _generateNextBatch(bytes32 _currentBatchId, BatchType _batchType)\\n    internal\\n    returns (bytes32)\\n  {\\n    bytes32 id = _generateNextBatchId(_currentBatchId);\\n    batchIds.push(id);\\n    Batch storage batch = batches[id];\\n    batch.batchType = _batchType;\\n    batch.batchId = id;\\n\\n    if (BatchType.Mint == _batchType) {\\n      currentMintBatchId = id;\\n      batch.suppliedTokenAddress = address(threeCrv);\\n      batch.claimableTokenAddress = address(setToken);\\n    }\\n    if (BatchType.Redeem == _batchType) {\\n      currentRedeemBatchId = id;\\n      batch.suppliedTokenAddress = address(setToken);\\n      batch.claimableTokenAddress = address(threeCrv);\\n    }\\n    return id;\\n  }\\n\\n  /**\\n   * @notice Deposit either HYSI or 3CRV in their respective batches\\n   * @param _amount The amount of 3CRV or HYSI a user is depositing\\n   * @param _currentBatchId The current reedem or mint batch id to place the funds in the next batch to be processed\\n   * @param _depositFor User that gets the shares attributed to (for use in zapper contract)\\n   * @dev This function will be called by depositForMint or depositForRedeem and simply reduces code duplication\\n   */\\n  function _deposit(\\n    uint256 _amount,\\n    bytes32 _currentBatchId,\\n    address _depositFor\\n  ) internal {\\n    Batch storage batch = batches[_currentBatchId];\\n\\n    //Add the new funds to the batch\\n    batch.suppliedTokenBalance = batch.suppliedTokenBalance + _amount;\\n    batch.unclaimedShares = batch.unclaimedShares + _amount;\\n    accountBalances[_currentBatchId][_depositFor] =\\n      accountBalances[_currentBatchId][_depositFor] +\\n      _amount;\\n\\n    //Save the batchId for the user so they can be retrieved to claim the batch\\n    accountBatches[_depositFor].push(_currentBatchId);\\n\\n    emit Deposit(_depositFor, _amount);\\n  }\\n\\n  /**\\n   * @notice Deposit 3CRV in a curve metapool for its LP-Token\\n   * @param _amount The amount of 3CRV that gets deposited\\n   * @param _curveMetapool The metapool where we want to provide liquidity\\n   */\\n  function _sendToCurve(uint256 _amount, CurveMetapool _curveMetapool)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 allowanceAmount = threeCrv.allowance(\\n      address(this),\\n      address(_curveMetapool)\\n    );\\n    threeCrv.safeDecreaseAllowance(address(_curveMetapool), allowanceAmount);\\n    threeCrv.safeIncreaseAllowance(address(_curveMetapool), type(uint256).max);\\n\\n    //Takes 3CRV and sends lpToken to this contract\\n    //Metapools take an array of amounts with the exoctic stablecoin at the first spot and 3CRV at the second.\\n    //The second variable determines the min amount of LP-Token we want to receive (slippage control)\\n    _curveMetapool.add_liquidity([0, _amount], 0);\\n  }\\n\\n  /**\\n   * @notice Withdraws 3CRV for deposited crvLPToken\\n   * @param _amount The amount of crvLPToken that get deposited\\n   * @param _lpToken Which crvLPToken we deposit\\n   * @param _curveMetapool The metapool where we want to provide liquidity\\n   */\\n  function _withdrawFromCurve(\\n    uint256 _amount,\\n    IERC20 _lpToken,\\n    CurveMetapool _curveMetapool\\n  ) internal returns (uint256) {\\n    uint256 allowanceAmount = _lpToken.allowance(\\n      address(this),\\n      address(_curveMetapool)\\n    );\\n    _lpToken.safeDecreaseAllowance(address(_curveMetapool), allowanceAmount);\\n    _lpToken.safeIncreaseAllowance(address(_curveMetapool), type(uint256).max);\\n\\n    //Takes lp Token and sends 3CRV to this contract\\n    //The second variable is the index for the token we want to receive (0 = exotic stablecoin, 1 = 3CRV)\\n    //The third variable determines min amount of token we want to receive (slippage control)\\n    _curveMetapool.remove_liquidity_one_coin(_amount, 1, 0);\\n  }\\n\\n  /**\\n   * @notice Deposits crvLPToken for yToken\\n   * @param _amount The amount of crvLPToken that get deposited\\n   * @param _crvLPToken The crvLPToken which we deposit\\n   * @param _yearnVault The yearn Vault in which we deposit\\n   */\\n  function _sendToYearn(\\n    uint256 _amount,\\n    IERC20 _crvLPToken,\\n    YearnVault _yearnVault\\n  ) internal {\\n    uint256 allowanceAmount = _crvLPToken.allowance(\\n      address(this),\\n      address(_yearnVault)\\n    );\\n    _crvLPToken.safeDecreaseAllowance(address(_yearnVault), allowanceAmount);\\n    _crvLPToken.safeIncreaseAllowance(address(_yearnVault), type(uint256).max);\\n\\n    //Mints yToken and sends them to msg.sender (this contract)\\n    _yearnVault.deposit(_amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw crvLPToken from yearn\\n   * @param _amount The amount of crvLPToken which we deposit\\n   * @param _yearnVault The yearn Vault in which we deposit\\n   */\\n  function _withdrawFromYearn(uint256 _amount, YearnVault _yearnVault)\\n    internal\\n  {\\n    uint256 allowanceAmount = _yearnVault.allowance(\\n      address(this),\\n      address(_yearnVault)\\n    );\\n    _yearnVault.safeDecreaseAllowance(address(_yearnVault), allowanceAmount);\\n    _yearnVault.safeIncreaseAllowance(address(_yearnVault), type(uint256).max);\\n\\n    //Takes yToken and sends crvLPToken to this contract\\n    _yearnVault.withdraw(_amount);\\n  }\\n\\n  /**\\n   * @notice Generates the next batch id for new deposits\\n   * @param _currentBatchId takes the current mint or redeem batch id\\n   */\\n  function _generateNextBatchId(bytes32 _currentBatchId)\\n    internal\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(block.timestamp, _currentBatchId));\\n  }\\n\\n  /* ========== SETTER ========== */\\n\\n  /**\\n   * @notice This function allows the owner to change the composition of underlying token of the HYSI\\n   * @param _yTokenAddresses An array of addresses for the yToken needed to mint HYSI\\n   * @param _curvePoolTokenPairs An array structs describing underlying yToken, crvToken and curve metapool\\n   */\\n  function setCurvePoolTokenPairs(\\n    address[] memory _yTokenAddresses,\\n    CurvePoolTokenPair[] calldata _curvePoolTokenPairs\\n  ) public {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    _setCurvePoolTokenPairs(_yTokenAddresses, _curvePoolTokenPairs);\\n  }\\n\\n  /**\\n   * @notice This function defines which underlying token and pools are needed to mint a hysi token\\n   * @param _yTokenAddresses An array of addresses for the yToken needed to mint HYSI\\n   * @param _curvePoolTokenPairs An array structs describing underlying yToken, crvToken and curve metapool\\n   * @dev since our calculations for minting just iterate through the index and match it with the quantities given by Set\\n   * @dev we must make sure to align them correctly by index, otherwise our whole calculation breaks down\\n   */\\n  function _setCurvePoolTokenPairs(\\n    address[] memory _yTokenAddresses,\\n    CurvePoolTokenPair[] memory _curvePoolTokenPairs\\n  ) internal {\\n    for (uint256 i; i < _yTokenAddresses.length; i++) {\\n      curvePoolTokenPairs[_yTokenAddresses[i]] = _curvePoolTokenPairs[i];\\n    }\\n  }\\n\\n  /**\\n   * @notice Changes the current batch cooldown\\n   * @param _cooldown Cooldown in seconds\\n   * @dev The cooldown is the same for redeem and mint batches\\n   */\\n  function setBatchCooldown(uint256 _cooldown) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    batchCooldown = _cooldown;\\n  }\\n\\n  /**\\n   * @notice Changes the Threshold of 3CRV which need to be deposited to be able to mint immediately\\n   * @param _threshold Amount of 3CRV necessary to mint immediately\\n   */\\n  function setMintThreshold(uint256 _threshold) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    mintThreshold = _threshold;\\n  }\\n\\n  /**\\n   * @notice Changes the Threshold of HYSI which need to be deposited to be able to redeem immediately\\n   * @param _threshold Amount of HYSI necessary to mint immediately\\n   */\\n  function setRedeemThreshold(uint256 _threshold) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    redeemThreshold = _threshold;\\n  }\\n}\\n\",\"keccak256\":\"0x7f64a3a11e74b18d289d09d57a0979cbbfcd159e02ab478062e2fcf12e841f01\",\"license\":\"MIT\"},\"contracts/core/interfaces/IACLRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IACLRegistry {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `permission`.\\n   */\\n  function hasPermission(bytes32 permission, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  function grantPermission(bytes32 permission, address account) external;\\n\\n  function revokePermission(bytes32 permission) external;\\n\\n  function requireApprovedContractOrEOA(address account) external view;\\n\\n  function requireRole(bytes32 role, address account) external view;\\n\\n  function requirePermission(bytes32 permission, address account) external view;\\n\\n  function isRoleAdmin(bytes32 role, address account) external view;\\n}\\n\",\"keccak256\":\"0xa4794a01a8dca3385b545642fc378d7c01f787190d8614d3d9e2f374bdc6ab19\",\"license\":\"MIT\"},\"contracts/core/interfaces/IContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of ContractRegistry.\\n */\\ninterface IContractRegistry {\\n  function getContract(bytes32 _name) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc43db33e962fbd24ff774f9ced47a5278276e38d709a5d8cf963f007f4bac0c9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStaking {\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function stake(uint256 amount, uint256 lengthOfTime) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getVoiceCredits(address _address) external view returns (uint256);\\n\\n  function getWithdrawableBalance(address _address)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function notifyRewardAmount(uint256 reward) external;\\n}\\n\",\"keccak256\":\"0x8206c98c4a5afea6e615835bec8b801200efef75b8333623e9e184ea54e2be5c\",\"license\":\"MIT\"},\"contracts/core/utils/KeeperIncentive.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IACLRegistry.sol\\\";\\nimport \\\"../interfaces/IContractRegistry.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\n\\ncontract KeeperIncentive {\\n  using SafeERC20 for IERC20;\\n\\n  struct Incentive {\\n    uint256 reward; //pop reward for calling the function\\n    bool enabled;\\n    bool openToEveryone; //can everyone call the function to get the reward or only approved?\\n  }\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IContractRegistry public contractRegistry;\\n\\n  uint256 public incentiveBudget;\\n  mapping(bytes32 => Incentive[]) public incentives;\\n  mapping(bytes32 => address) public controllerContracts;\\n  uint256 public burnRate;\\n  address internal immutable burnAddress =\\n    0x00000000219ab540356cBB839Cbe05303d7705Fa; //ETH2.0 Staking Contract\\n  uint256 public requiredKeeperStake;\\n\\n  /* ========== EVENTS ========== */\\n\\n  event IncentiveCreated(\\n    bytes32 contractName,\\n    uint256 reward,\\n    bool openToEveryone\\n  );\\n  event IncentiveChanged(\\n    bytes32 contractName,\\n    uint256 oldReward,\\n    uint256 newReward,\\n    bool oldOpenToEveryone,\\n    bool newOpenToEveryone\\n  );\\n  event IncentiveFunded(uint256 amount);\\n  event ApprovalToggled(bytes32 contractName, bool openToEveryone);\\n  event IncentiveToggled(bytes32 contractName, bool enabled);\\n  event ControllerContractAdded(bytes32 contractName, address contractAddress);\\n  event Burned(uint256 amount);\\n  event BurnRateChanged(uint256 oldRate, uint256 newRate);\\n  event RequiredKeeperStakeChanged(\\n    uint256 oldRequirement,\\n    uint256 newRequirement\\n  );\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(\\n    IContractRegistry _contractRegistry,\\n    uint256 _burnRate,\\n    uint256 _requiredKeeperStake\\n  ) public {\\n    contractRegistry = _contractRegistry;\\n    burnRate = _burnRate; //25e16\\n    requiredKeeperStake = _requiredKeeperStake; // 2000 ether\\n  }\\n\\n  /* ==========  MUTATIVE FUNCTIONS  ========== */\\n\\n  function handleKeeperIncentive(\\n    bytes32 _contractName,\\n    uint8 _i,\\n    address _keeper\\n  ) external {\\n    require(\\n      msg.sender == controllerContracts[_contractName],\\n      \\\"Can only be called by the controlling contract\\\"\\n    );\\n\\n    Incentive memory incentive = incentives[_contractName][_i];\\n\\n    if (!incentive.openToEveryone) {\\n      IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n        .requireRole(keccak256(\\\"Keeper\\\"), _keeper);\\n      require(\\n        IStaking(contractRegistry.getContract(keccak256(\\\"Staking\\\"))).balanceOf(\\n          _keeper\\n        ) >= requiredKeeperStake,\\n        \\\"not enough pop at stake\\\"\\n      );\\n    }\\n    if (incentive.enabled && incentive.reward <= incentiveBudget) {\\n      incentiveBudget = incentiveBudget - incentive.reward;\\n      uint256 amountToBurn = (incentive.reward * burnRate) / 1e18;\\n      uint256 incentivePayout = incentive.reward - amountToBurn;\\n      IERC20(contractRegistry.getContract(keccak256(\\\"POP\\\"))).safeTransfer(\\n        _keeper,\\n        incentivePayout\\n      );\\n      _burn(amountToBurn);\\n    }\\n  }\\n\\n  /* ========== SETTER ========== */\\n\\n  /**\\n   * @notice Create Incentives for keeper to call a function\\n   * @param _contractName Name of contract that uses ParticipationRewards in bytes32\\n   * @param _reward The amount in POP the Keeper receives for calling the function\\n   * @param _enabled Is this Incentive currently enabled?\\n   * @param _openToEveryone Can anyone call the function for rewards or only keeper?\\n   * @dev This function is only for creating unique incentives for future contracts\\n   * @dev Multiple functions can use the same incentive which can than be updated with one governance vote\\n   */\\n  function createIncentive(\\n    bytes32 _contractName,\\n    uint256 _reward,\\n    bool _enabled,\\n    bool _openToEveryone\\n  ) public {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    incentives[_contractName].push(\\n      Incentive({\\n        reward: _reward,\\n        enabled: _enabled,\\n        openToEveryone: _openToEveryone\\n      })\\n    );\\n    emit IncentiveCreated(_contractName, _reward, _openToEveryone);\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function updateIncentive(\\n    bytes32 _contractName,\\n    uint8 _i,\\n    uint256 _reward,\\n    bool _enabled,\\n    bool _openToEveryone\\n  ) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    Incentive storage incentive = incentives[_contractName][_i];\\n    uint256 oldReward = incentive.reward;\\n    bool oldOpenToEveryone = incentive.openToEveryone;\\n    incentive.reward = _reward;\\n    incentive.enabled = _enabled;\\n    incentive.openToEveryone = _openToEveryone;\\n    emit IncentiveChanged(\\n      _contractName,\\n      oldReward,\\n      _reward,\\n      oldOpenToEveryone,\\n      _openToEveryone\\n    );\\n  }\\n\\n  function toggleApproval(bytes32 _contractName, uint8 _i) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    Incentive storage incentive = incentives[_contractName][_i];\\n    incentive.openToEveryone = !incentive.openToEveryone;\\n    emit ApprovalToggled(_contractName, incentive.openToEveryone);\\n  }\\n\\n  function toggleIncentive(bytes32 _contractName, uint8 _i) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    Incentive storage incentive = incentives[_contractName][_i];\\n    incentive.enabled = !incentive.enabled;\\n    emit IncentiveToggled(_contractName, incentive.enabled);\\n  }\\n\\n  function fundIncentive(uint256 _amount) external {\\n    IERC20(contractRegistry.getContract(keccak256(\\\"POP\\\"))).safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      _amount\\n    );\\n    incentiveBudget = incentiveBudget + _amount;\\n    emit IncentiveFunded(_amount);\\n  }\\n\\n  /**\\n   * @notice In order to allow a contract to use ParticipationReward they need to be added as a controller contract\\n   * @param _contractName the name of the controller contract in bytes32\\n   * @param contract_ the address of the controller contract\\n   * @dev all critical functions to init/open vaults and add shares to them can only be called by controller contracts\\n   */\\n  function addControllerContract(bytes32 _contractName, address contract_)\\n    external\\n  {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    controllerContracts[_contractName] = contract_;\\n    emit ControllerContractAdded(_contractName, contract_);\\n  }\\n\\n  /**\\n   * @notice Sets the current burn rate as a percentage of the incentive reward.\\n   * @param _burnRate Percentage in Mantissa. (1e14 = 1 Basis Point)\\n   */\\n  function updateBurnRate(uint256 _burnRate) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    emit BurnRateChanged(burnRate, _burnRate);\\n    burnRate = _burnRate;\\n  }\\n\\n  function _burn(uint256 _amount) internal {\\n    IERC20(contractRegistry.getContract(keccak256(\\\"POP\\\"))).transfer(\\n      burnAddress,\\n      _amount\\n    );\\n    emit Burned(_amount);\\n  }\\n\\n  /**\\n   * @notice Sets the required amount of POP a keeper needs to have staked to handle incentivized functions.\\n   * @param _amount Amount of POP a keeper needs to stake\\n   */\\n  function updateRequiredKeeperStake(uint256 _amount) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    emit RequiredKeeperStakeChanged(requiredKeeperStake, _amount);\\n    requiredKeeperStake = _amount;\\n  }\\n}\\n\",\"keccak256\":\"0x73ee9b75acaa3870eee474a6d267b6bc220dd92e57892f2de607ab2d60cb424a\"},\"contracts/externals/interfaces/BasicIssuanceModule.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./ISetToken.sol\\\";\\n\\ninterface BasicIssuanceModule {\\n  function getRequiredComponentUnitsForIssue(\\n    ISetToken _setToken,\\n    uint256 _quantity\\n  ) external view returns (address[] memory, uint256[] memory);\\n\\n  function issue(\\n    ISetToken _setToken,\\n    uint256 _quantity,\\n    address _to\\n  ) external;\\n\\n  function redeem(\\n    ISetToken _setToken,\\n    uint256 _quantity,\\n    address _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa14668c2cf3960611470c8c00acc5e4337e5e2693e5faa24fdd2ea8b251dc335\"},\"contracts/externals/interfaces/CurveContracts.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface CurveAddressProvider {\\n  function get_registry() external view returns (address);\\n}\\n\\ninterface CurveRegistry {\\n  function get_pool_from_lp_token(address lp_token)\\n    external\\n    view\\n    returns (address);\\n}\\n\\ninterface CurveMetapool {\\n  function get_virtual_price() external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amounts)\\n    external\\n    returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] calldata _amounts,\\n    uint256 _min_mint_amounts,\\n    address _receiver\\n  ) external returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 amount,\\n    int128 i,\\n    uint256 min_underlying_amount\\n  ) external returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\ninterface ThreeCrv is IERC20 {}\\n\\ninterface CrvLPToken is IERC20 {}\\n\",\"keccak256\":\"0xb5dfa1b5c16d6e535d6ff8d5c9fa4af805119ba7906ae844f46fa4d979491857\"},\"contracts/externals/interfaces/ISetToken.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n * @author Set Protocol\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n  /* ============ Enums ============ */\\n\\n  enum ModuleState {\\n    NONE,\\n    PENDING,\\n    INITIALIZED\\n  }\\n\\n  /* ============ Structs ============ */\\n  /**\\n   * The base definition of a SetToken Position\\n   *\\n   * @param component           Address of token in the Position\\n   * @param module              If not in default state, the address of associated module\\n   * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n   * @param positionState       Position ENUM. Default is 0; External is 1\\n   * @param data                Arbitrary data\\n   */\\n  struct Position {\\n    address component;\\n    address module;\\n    int256 unit;\\n    uint8 positionState;\\n    bytes data;\\n  }\\n\\n  /**\\n   * A struct that stores a component's cash position details and external positions\\n   * This data structure allows O(1) access to a component's cash position units and\\n   * virtual units.\\n   *\\n   * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n   *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n   *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n   * @param componentIndex\\n   * @param externalPositionModules   List of external modules attached to each external position. Each module\\n   *                                  maps to an external position\\n   * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n   */\\n  struct ComponentPosition {\\n    int256 virtualUnit;\\n    address[] externalPositionModules;\\n    mapping(address => ExternalPosition) externalPositions;\\n  }\\n\\n  /**\\n   * A struct that stores a component's external position details including virtual unit and any\\n   * auxiliary data.\\n   *\\n   * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n   * @param data              Arbitrary data\\n   */\\n  struct ExternalPosition {\\n    int256 virtualUnit;\\n    bytes data;\\n  }\\n\\n  /* ============ Functions ============ */\\n\\n  function addComponent(address _component) external;\\n\\n  function removeComponent(address _component) external;\\n\\n  function editDefaultPositionUnit(address _component, int256 _realUnit)\\n    external;\\n\\n  function addExternalPositionModule(\\n    address _component,\\n    address _positionModule\\n  ) external;\\n\\n  function removeExternalPositionModule(\\n    address _component,\\n    address _positionModule\\n  ) external;\\n\\n  function editExternalPositionUnit(\\n    address _component,\\n    address _positionModule,\\n    int256 _realUnit\\n  ) external;\\n\\n  function editExternalPositionData(\\n    address _component,\\n    address _positionModule,\\n    bytes calldata _data\\n  ) external;\\n\\n  function invoke(\\n    address _target,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external returns (bytes memory);\\n\\n  function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n  function mint(address _account, uint256 _quantity) external;\\n\\n  function burn(address _account, uint256 _quantity) external;\\n\\n  function lock() external;\\n\\n  function unlock() external;\\n\\n  function addModule(address _module) external;\\n\\n  function removeModule(address _module) external;\\n\\n  function initializeModule() external;\\n\\n  function setManager(address _manager) external;\\n\\n  function manager() external view returns (address);\\n\\n  function moduleStates(address _module) external view returns (ModuleState);\\n\\n  function getModules() external view returns (address[] memory);\\n\\n  function getDefaultPositionRealUnit(address _component)\\n    external\\n    view\\n    returns (int256);\\n\\n  function getExternalPositionRealUnit(\\n    address _component,\\n    address _positionModule\\n  ) external view returns (int256);\\n\\n  function getComponents() external view returns (address[] memory);\\n\\n  function getExternalPositionModules(address _component)\\n    external\\n    view\\n    returns (address[] memory);\\n\\n  function getExternalPositionData(address _component, address _positionModule)\\n    external\\n    view\\n    returns (bytes memory);\\n\\n  function isExternalPositionModule(address _component, address _module)\\n    external\\n    view\\n    returns (bool);\\n\\n  function isComponent(address _component) external view returns (bool);\\n\\n  function positionMultiplier() external view returns (int256);\\n\\n  function getPositions() external view returns (Position[] memory);\\n\\n  function getTotalComponentRealUnits(address _component)\\n    external\\n    view\\n    returns (int256);\\n\\n  function isInitializedModule(address _module) external view returns (bool);\\n\\n  function isPendingModule(address _module) external view returns (bool);\\n\\n  function isLocked() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x820258eb7073078747882b0c37943a4ee6f1343c30ff0fe9397715502dc9f153\",\"license\":\"Apache License\"},\"contracts/externals/interfaces/YearnVault.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface YearnVault is IERC20 {\\n  function token() external view returns (address);\\n\\n  function deposit(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function pricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb44dc04ae77cefcce52006f1fe3ae894f4c5065e96c33dabd603ab6606aec5c6\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806390f2ca8711610104578063b3d346b9116100a2578063d75e952711610071578063d75e952714610395578063ed09e19d146103a8578063ed9cf58c146103bb578063eddcb7d1146103c3576101cf565b8063b3d346b914610335578063c81e25ab14610348578063cd02bd7f1461036f578063d030d2b314610382576101cf565b8063976874cc116100de578063976874cc146102f15780639c8dead214610312578063ab6a55391461031a578063abf410e51461032d576101cf565b806390f2ca87146102c3578063961b7d86146102cb57806396c144f0146102de576101cf565b80633af3bfb5116101715780637190bc291161014b5780637190bc291461028d57806375d0c0dc146102a05780638467be0d146102a857806390d1f245146102bb576101cf565b80633af3bfb51461025f5780633eea44fe146102725780635a3f0ca014610285576101cf565b806328d3ef0b116101ad57806328d3ef0b1461021a5780632a9ca9961461023a5780632da9a6941461024f5780633739158014610257576101cf565b806307da06a5146101d4578063264c7984146101e957806327360d6914610207575b600080fd5b6101e76101e2366004613a67565b6103cb565b005b6101f1610706565b6040516101fe9190613d33565b60405180910390f35b6101e7610215366004613b0b565b61070c565b61022d61022836600461387c565b610841565b6040516101fe9190613cb7565b6102426108ad565b6040516101fe9190613c4c565b6102426108bc565b6101f16108cb565b6101e761026d366004613b52565b6108d1565b6101e7610280366004613b0b565b610a3a565b6101f1610b5f565b6101e761029b3660046138df565b610b65565b6101f1610ce3565b6101e76102b6366004613b0b565b610d07565b6101f161193a565b6101f1611940565b6101e76102d9366004613b23565b611946565b6101f16102ec366004613b23565b611be8565b6103046102ff36600461387c565b611d94565b6040516101fe929190613c60565b6101f1611dba565b6101e7610328366004613b0b565b611dc0565b61024261255a565b6101f1610343366004613b0b565b612569565b61035b610356366004613b0b565b61258a565b6040516101fe989796959493929190613db7565b6101e761037d366004613b0b565b6125e3565b6101f16103903660046138b4565b612708565b6101e76103a3366004613b0b565b612739565b6101f16103b6366004613b23565b61285e565b61024261287b565b6101f161288a565b8382146103f35760405162461bcd60e51b81526004016103ea90613fa3565b60405180910390fd5b6000805b8581101561063c5760006007600089898581811061042557634e487b7160e01b600052603260045260246000fd5b6020908102929092013583525081810192909252604090810160009081206001808201548352600585528383203384529094529190205460028201549193509160ff9091161515146104895760405162461bcd60e51b81526004016103ea90613ed8565b8460018111156104a957634e487b7160e01b600052602160045260246000fd5b825460ff1660018111156104cd57634e487b7160e01b600052602160045260246000fd5b146104ea5760405162461bcd60e51b81526004016103ea9061406e565b86868481811061050a57634e487b7160e01b600052603260045260246000fd5b905060200201358110156105305760405162461bcd60e51b81526004016103ea9061433b565b6000826003015488888681811061055757634e487b7160e01b600052603260045260246000fd5b90506020020135846005015461056d9190614473565b6105779190614453565b90508083600501546105899190614492565b60058401558787858181106105ae57634e487b7160e01b600052603260045260246000fd5b9050602002013583600301546105c49190614492565b60038401558787858181106105e957634e487b7160e01b600052603260045260246000fd5b90506020020135826105fb9190614492565b60018401546000908152600560209081526040808320338452909152902055610624818661443b565b94505050508080610634906144d5565b9150506103f7565b506000811161065d5760405162461bcd60e51b81526004016103ea90613e6a565b81600181111561067d57634e487b7160e01b600052602160045260246000fd5b61068e5761068e81600c5433612890565b8160018111156106ae57634e487b7160e01b600052602160045260246000fd5b600114156106c3576106c381600b5433612890565b7ffacb7348a2212313d980cebc23550b0462adb394310473ee7758995398765c708183336040516106f6939291906143a9565b60405180910390a1505050505050565b60095481565b6001546040516370a0823160e01b815282916001600160a01b0316906370a082319061073c903390600401613c4c565b60206040518083038186803b15801561075457600080fd5b505afa158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190613be8565b10156107aa5760405162461bcd60e51b81526004016103ea906141cd565b6001546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906107de90339030908690600401613c7a565b602060405180830381600087803b1580156107f857600080fd5b505af115801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190613aeb565b5061083e81600c5433612890565b50565b6001600160a01b0381166000908152600660209081526040918290208054835181840281018401909452808452606093928301828280156108a157602002820191906000526020600020905b81548152602001906001019080831161088d575b50505050509050919050565b6003546001600160a01b031681565b6002546001600160a01b031681565b600d5481565b60006108dc82612974565b6000858152600760209081526040808320600583528184206001600160a01b0388168552909252909120546002820154929350909160ff16156109315760405162461bcd60e51b81526004016103ea90614196565b848110156109515760405162461bcd60e51b81526004016103ea9061433b565b61095b8582614492565b60008781526005602090815260408083206001600160a01b0389168452909152902055600482015461098e908690614492565b600483015560038201546109a3908690614492565b60038301556000825460ff1660018111156109ce57634e487b7160e01b600052602160045260246000fd5b14156109f0576002546109eb906001600160a01b03168487612c2c565b610a07565b600154610a07906001600160a01b03168487612c2c565b7f08afc380d5171e1371c567cd7562cc8ff4e9c38c66d5e479c613fdf38106d8458686866040516106f693929190613d75565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610a8a907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401613d33565b60206040518083038186803b158015610aa257600080fd5b505afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada9190613898565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401610b27929190613d3c565b60006040518083038186803b158015610b3f57600080fd5b505afa158015610b53573d6000803e3d6000fd5b505050600d9190915550565b600a5481565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610bb5907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401613d33565b60206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190613898565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401610c52929190613d3c565b60006040518083038186803b158015610c6a57600080fd5b505afa158015610c7e573d6000803e3d6000fd5b50505050610cde838383808060200260200160405190810160405280939291908181526020016000905b82821015610cd457610cc560408302860136819003810190613b8a565b81526020019060010190610ca8565b5050505050612caf565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610d57907f35ed2e1befd3b2dcf1ec7a6834437fa3212881ed81fd3a13dc97c3438896e1ba90600401613d33565b60206040518083038186803b158015610d6f57600080fd5b505afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da79190613898565b6001600160a01b03166355b8efcc7f00000000000000000000000000000000000000000000000000000000000000006000336040518463ffffffff1660e01b8152600401610df793929190613d53565b600060405180830381600087803b158015610e1157600080fd5b505af1158015610e25573d6000803e3d6000fd5b5050600b546000908152600760205260409020600d546009549193509150610e4d9042614492565b101580610e605750600e54816004015410155b610e7c5760405162461bcd60e51b81526004016103ea90614204565b600281015460ff1615610ea15760405162461bcd60e51b81526004016103ea90614372565b6004808201546002546040516370a0823160e01b815291926001600160a01b03909116916370a0823191610ed791309101613c4c565b60206040518083038186803b158015610eef57600080fd5b505afa158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f279190613be8565b1015610f455760405162461bcd60e51b81526004016103ea906140a5565b600354600154604051637a4ffd0360e01b815260009283926001600160a01b0391821692637a4ffd0392610f87921690670de0b6b3a764000090600401613c9e565b60006040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fdb91908101906139a4565b91509150600080825167ffffffffffffffff81111561100a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611033578160200160208202803683370190505b50905060005b845181101561130d57600085828151811061106457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc9190613be8565b905060006004600088858151811061110457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683529082019290925260409081016000205490517fcc2b27d700000000000000000000000000000000000000000000000000000000815291169063cc2b27d79061117490670de0b6b3a764000090600190600401613e26565b60206040518083038186803b15801561118c57600080fd5b505afa1580156111a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c49190613be8565b6111d690671bc16d674ec80000614492565b90506000670de0b6b3a76400006111ed8385614473565b6111f79190614453565b90506000670de0b6b3a7640000828a878151811061122557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016112589190613c4c565b60206040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a89190613be8565b6112b29190614473565b6112bc9190614453565b9050808686815181106112df57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526112f4818861443b565b9650505050508080611305906144d5565b915050611039565b506000828660040154611320919061443b565b905060005b855181101561162657600083828151811061135057634e487b7160e01b600052603260045260246000fd5b60200260200101516004846113659190614453565b61136f9190614492565b90506113c681600460008a868151811061139957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b039081168352908201929092526040016000205416612d7b565b5061151d600460008985815181106113ee57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683529082019290925260409081016000206001015490516370a0823160e01b81529116906370a082319061143d903090600401613c4c565b60206040518083038186803b15801561145557600080fd5b505afa158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190613be8565b600460008a86815181106114b157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060010160009054906101000a90046001600160a01b031689858151811061151057634e487b7160e01b600052603260045260246000fd5b6020026020010151612ee9565b6003548751611613916001600160a01b03169089908590811061155057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016115839190613c4c565b60206040518083038186803b15801561159b57600080fd5b505afa1580156115af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d39190613be8565b8985815181106115f357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166130139092919063ffffffff16565b508061161e816144d5565b915050611325565b5060008460008151811061164a57634e487b7160e01b600052603260045260246000fd5b60200260200101518660008151811061167357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116a69190613c4c565b60206040518083038186803b1580156116be57600080fd5b505afa1580156116d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f69190613be8565b61170890670de0b6b3a7640000614473565b6117129190614453565b905060015b8651811015611824576118108287838151811061174457634e487b7160e01b600052603260045260246000fd5b602002602001015189848151811061176c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161179f9190613c4c565b60206040518083038186803b1580156117b757600080fd5b505afa1580156117cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ef9190613be8565b61180190670de0b6b3a7640000614473565b61180b9190614453565b6130c5565b91508061181c816144d5565b915050611717565b50878110156118455760405162461bcd60e51b81526004016103ea906142a7565b6003546001546040517f6d78f47a0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831692636d78f47a926118969291169085903090600401613d94565b600060405180830381600087803b1580156118b057600080fd5b505af11580156118c4573d6000803e3d6000fd5b505050506005870181905560028701805460ff1916600117905542600955600b5460048801546040517fa018ec75c77c2e90d17863c91c2f7440710e48d57f99510358116fb0e34bdf6d9161191a918590613c3e565b60405180910390a261192f600b5460006130dd565b505050505050505050565b600c5481565b600f5481565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890611996907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401613d33565b60206040518083038186803b1580156119ae57600080fd5b505afa1580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190613898565b6001600160a01b03166391d148547fde3f120e60938f665f938e828e860a96c02a4ce6b71b26b4001ac807f65ae33f336040518363ffffffff1660e01b8152600401611a33929190613d3c565b60206040518083038186803b158015611a4b57600080fd5b505afa158015611a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a839190613aeb565b80611a965750336001600160a01b038216145b611ab25760405162461bcd60e51b81526004016103ea90613fda565b6002546040516370a0823160e01b815283916001600160a01b0316906370a0823190611ae2903390600401613c4c565b60206040518083038186803b158015611afa57600080fd5b505afa158015611b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b329190613be8565b1015611b505760405162461bcd60e51b81526004016103ea90613f6c565b6002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611b8490339030908790600401613c7a565b602060405180830381600087803b158015611b9e57600080fd5b505af1158015611bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd69190613aeb565b50611be482600b5483612890565b5050565b6000828152600760205260408120600281015460ff16611c1a5760405162461bcd60e51b81526004016103ea90613ea1565b6000611c2584612974565b60008681526005602090815260408083206001600160a01b0389168452909152902054600384015491925090811115611c705760405162461bcd60e51b81526004016103ea90614102565b60008360030154828560050154611c879190614473565b611c919190614453565b9050808460050154611ca39190614492565b60058501556003840154611cb8908390614492565b600385015560008781526005602090815260408083206001600160a01b038a1684529091528120819055845460ff166001811115611d0657634e487b7160e01b600052602160045260246000fd5b1415611d2857600154611d23906001600160a01b03168483612c2c565b611d3f565b600254611d3f906001600160a01b03168483612c2c565b83546040516001600160a01b038816917f8d2dd554e7207f2edcec3f94a370536aa5b74554b28e814f77ec34780a18552491611d829160ff169086908690613e07565b60405180910390a29695505050505050565b600460205260009081526040902080546001909101546001600160a01b03918216911682565b600e5481565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890611e10907f35ed2e1befd3b2dcf1ec7a6834437fa3212881ed81fd3a13dc97c3438896e1ba90600401613d33565b60206040518083038186803b158015611e2857600080fd5b505afa158015611e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e609190613898565b6001600160a01b03166355b8efcc7f00000000000000000000000000000000000000000000000000000000000000006001336040518463ffffffff1660e01b8152600401611eb093929190613d53565b600060405180830381600087803b158015611eca57600080fd5b505af1158015611ede573d6000803e3d6000fd5b5050600c546000908152600760205260409020600d54600a549193509150611f069042614492565b101580611f195750600f54816004015410155b611f355760405162461bcd60e51b81526004016103ea90614204565b600281015460ff1615611f5a5760405162461bcd60e51b81526004016103ea90614239565b6004808201546001546040516370a0823160e01b815291926001600160a01b03909116916370a0823191611f9091309101613c4c565b60206040518083038186803b158015611fa857600080fd5b505afa158015611fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe09190613be8565b1015611ffe5760405162461bcd60e51b81526004016103ea90614139565b600354600154604051637a4ffd0360e01b815260009283926001600160a01b0391821692637a4ffd0392612040921690670de0b6b3a764000090600401613c9e565b60006040518083038186803b15801561205857600080fd5b505afa15801561206c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261209491908101906139a4565b60035460048601546001549395509193506120bd926001600160a01b0390811692911690613013565b6003546001546004808601546040517f5c833bfd0000000000000000000000000000000000000000000000000000000081526001600160a01b0394851694635c833bfd946121119491169291309101613d94565b600060405180830381600087803b15801561212b57600080fd5b505af115801561213f573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190612176903090600401613c4c565b60206040518083038186803b15801561218e57600080fd5b505afa1580156121a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c69190613be8565b905060005b835181101561243b576122a78482815181106121f757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161222a9190613c4c565b60206040518083038186803b15801561224257600080fd5b505afa158015612256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227a9190613be8565b85838151811061229a57634e487b7160e01b600052603260045260246000fd5b6020026020010151613248565b6000600460008684815181106122cd57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683529082019290925260409081016000206001015490516370a0823160e01b81529116906370a082319061231c903090600401613c4c565b60206040518083038186803b15801561233457600080fd5b505afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c9190613be8565b9050612426816004600088868151811061239657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060010160009054906101000a90046001600160a01b0316600460008987815181106123f957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b039081168352908201929092526040016000205416613371565b50508080612433906144d5565b9150506121cb565b506002546040516370a0823160e01b815282916001600160a01b0316906370a082319061246c903090600401613c4c565b60206040518083038186803b15801561248457600080fd5b505afa158015612498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bc9190613be8565b6124c69190614492565b600585018190558511156124ec5760405162461bcd60e51b81526004016103ea906142a7565b600c547ffe5f8735d3a150c5afdab27148da5543b04feb55f87613477a9a65621c910ddf85600401548660050154604051612528929190613c3e565b60405180910390a260028401805460ff1916600190811790915542600a55600c54612552916130dd565b505050505050565b6000546001600160a01b031681565b6008818154811061257957600080fd5b600091825260209091200154905081565b60076020819052600091825260409091208054600182015460028301546003840154600485015460058601546006870154969097015460ff95861697949693909516949193909290916001600160a01b03918216911688565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890612633907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401613d33565b60206040518083038186803b15801561264b57600080fd5b505afa15801561265f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126839190613898565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b81526004016126d0929190613d3c565b60006040518083038186803b1580156126e857600080fd5b505afa1580156126fc573d6000803e3d6000fd5b505050600e9190915550565b6006602052816000526040600020818154811061272457600080fd5b90600052602060002001600091509150505481565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890612789907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401613d33565b60206040518083038186803b1580156127a157600080fd5b505afa1580156127b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d99190613898565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401612826929190613d3c565b60006040518083038186803b15801561283e57600080fd5b505afa158015612852573d6000803e3d6000fd5b505050600f9190915550565b600560209081526000928352604080842090915290825290205481565b6001546001600160a01b031681565b600b5481565b600082815260076020526040902060048101546128ae90859061443b565b600482015560038101546128c390859061443b565b600382015560008381526005602090815260408083206001600160a01b03861684529091529020546128f690859061443b565b60008481526005602090815260408083206001600160a01b038716808552908352818420949094556006825280832080546001810182559084529190922001859055517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90612966908790613d33565b60405180910390a250505050565b60008054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d98906129c5907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401613d33565b60206040518083038186803b1580156129dd57600080fd5b505afa1580156129f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a159190613898565b6001600160a01b03166391d148547fde3f120e60938f665f938e828e860a96c02a4ce6b71b26b4001ac807f65ae33f336040518363ffffffff1660e01b8152600401612a62929190613d3c565b60206040518083038186803b158015612a7a57600080fd5b505afa158015612a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab29190613aeb565b80612ac55750336001600160a01b038316145b612ae15760405162461bcd60e51b81526004016103ea90613fda565b600054604051631c2d8fb360e31b815283916001600160a01b03169063e16c7d9890612b31907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401613d33565b60206040518083038186803b158015612b4957600080fd5b505afa158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b819190613898565b6001600160a01b03166391d148547fde3f120e60938f665f938e828e860a96c02a4ce6b71b26b4001ac807f65ae33f336040518363ffffffff1660e01b8152600401612bce929190613d3c565b60206040518083038186803b158015612be657600080fd5b505afa158015612bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1e9190613aeb565b15612c265750335b92915050565b610cde8363a9059cbb60e01b8484604051602401612c4b929190613c9e565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526134c4565b60005b8251811015610cde57818181518110612cdb57634e487b7160e01b600052603260045260246000fd5b602002602001015160046000858481518110612d0757634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683528282019390935260409091016000208351815473ffffffffffffffffffffffffffffffffffffffff19908116918516919091178255939091015160019091018054909316911617905580612d73816144d5565b915050612cb2565b600254604051636eb1769f60e11b815260009182916001600160a01b039091169063dd62ed3e90612db29030908790600401613c60565b60206040518083038186803b158015612dca57600080fd5b505afa158015612dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e029190613be8565b600254909150612e1c906001600160a01b03168483613553565b600254612e35906001600160a01b031684600019613013565b60408051808201825260008082526020820187905291517f0b4c7e4d0000000000000000000000000000000000000000000000000000000081526001600160a01b03861692630b4c7e4d92612e8f92909190600401613cfb565b602060405180830381600087803b158015612ea957600080fd5b505af1158015612ebd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee19190613be8565b505092915050565b604051636eb1769f60e11b81526000906001600160a01b0384169063dd62ed3e90612f1a9030908690600401613c60565b60206040518083038186803b158015612f3257600080fd5b505afa158015612f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6a9190613be8565b9050612f806001600160a01b0384168383613553565b612f966001600160a01b03841683600019613013565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063b6b55f2590612fdb908790600401613d33565b600060405180830381600087803b158015612ff557600080fd5b505af1158015613009573d6000803e3d6000fd5b5050505050505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613044929190613c60565b60206040518083038186803b15801561305c57600080fd5b505afa158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190613be8565b61309e919061443b565b90506130bf8463095ea7b360e01b8584604051602401612c4b929190613c9e565b50505050565b60008183106130d457816130d6565b825b9392505050565b6000806130e98461363c565b6008805460018181019092557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30182905560008281526007602052604090208054929350918591839160ff191690838181111561315657634e487b7160e01b600052602160045260246000fd5b02179055506001808201839055849081111561318257634e487b7160e01b600052602160045260246000fd5b6131cf57600b8290556002546006820180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff19918216179091556001546007840180549190931691161790555b8360018111156131ef57634e487b7160e01b600052602160045260246000fd5b6001141561324057600c8290556001546006820180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff19918216179091556002546007840180549190931691161790555b509392505050565b604051636eb1769f60e11b81526000906001600160a01b0383169063dd62ed3e906132799030908690600401613c60565b60206040518083038186803b15801561329157600080fd5b505afa1580156132a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c99190613be8565b90506132df6001600160a01b0383168383613553565b6132f56001600160a01b03831683600019613013565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b03831690632e1a7d4d9061333a908690600401613d33565b600060405180830381600087803b15801561335457600080fd5b505af1158015613368573d6000803e3d6000fd5b50505050505050565b600080836001600160a01b031663dd62ed3e30856040518363ffffffff1660e01b81526004016133a2929190613c60565b60206040518083038186803b1580156133ba57600080fd5b505afa1580156133ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f29190613be8565b90506134086001600160a01b0385168483613553565b61341e6001600160a01b03851684600019613013565b6040517f1a4d01d20000000000000000000000000000000000000000000000000000000081526001600160a01b03841690631a4d01d2906134699088906001906000906004016143d4565b602060405180830381600087803b15801561348357600080fd5b505af1158015613497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134bb9190613be8565b50509392505050565b6000613519826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661366e9092919063ffffffff16565b805190915015610cde57808060200190518101906135379190613aeb565b610cde5760405162461bcd60e51b81526004016103ea906142de565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e906135849030908790600401613c60565b60206040518083038186803b15801561359c57600080fd5b505afa1580156135b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d49190613be8565b9050818110156135f65760405162461bcd60e51b81526004016103ea90613f0f565b604051828203906136359086907f095ea7b30000000000000000000000000000000000000000000000000000000090612c4b9088908690602401613c9e565b5050505050565b60004282604051602001613651929190613c3e565b604051602081830303815290604052805190602001209050919050565b606061367d8484600085613685565b949350505050565b6060824710156136a75760405162461bcd60e51b81526004016103ea90614011565b6136b085613745565b6136cc5760405162461bcd60e51b81526004016103ea90614270565b600080866001600160a01b031685876040516136e89190613c22565b60006040518083038185875af1925050503d8060008114613725576040519150601f19603f3d011682016040523d82523d6000602084013e61372a565b606091505b509150915061373a82828661374b565b979650505050505050565b3b151590565b6060831561375a5750816130d6565b82511561376a5782518084602001fd5b8160405162461bcd60e51b81526004016103ea9190613e37565b60008083601f840112613795578182fd5b50813567ffffffffffffffff8111156137ac578182fd5b60208301915083602080830285010111156137c657600080fd5b9250929050565b60008083601f8401126137de578182fd5b50813567ffffffffffffffff8111156137f5578182fd5b6020830191508360206040830285010111156137c657600080fd5b600082601f830112613820578081fd5b8151602061383561383083614417565b6143ed565b8281528181019085830183850287018401881015613851578586fd5b855b8581101561386f57815184529284019290840190600101613853565b5090979650505050505050565b60006020828403121561388d578081fd5b81356130d68161451c565b6000602082840312156138a9578081fd5b81516130d68161451c565b600080604083850312156138c6578081fd5b82356138d18161451c565b946020939093013593505050565b6000806000604084860312156138f3578081fd5b833567ffffffffffffffff8082111561390a578283fd5b818601915086601f83011261391d578283fd5b8135602061392d61383083614417565b82815281810190858301838502870184018c1015613949578788fd5b8796505b848710156139745780356139608161451c565b83526001969096019591830191830161394d565b509750508701359250508082111561398a578283fd5b50613997868287016137cd565b9497909650939450505050565b600080604083850312156139b6578182fd5b825167ffffffffffffffff808211156139cd578384fd5b818501915085601f8301126139e0578384fd5b815160206139f061383083614417565b82815281810190858301838502870184018b1015613a0c578889fd5b8896505b84871015613a37578051613a238161451c565b835260019690960195918301918301613a10565b5091880151919650909350505080821115613a50578283fd5b50613a5d85828601613810565b9150509250929050565b600080600080600060608688031215613a7e578081fd5b853567ffffffffffffffff80821115613a95578283fd5b613aa189838a01613784565b90975095506020880135915080821115613ab9578283fd5b50613ac688828901613784565b909450925050604086013560028110613add578182fd5b809150509295509295909350565b600060208284031215613afc578081fd5b815180151581146130d6578182fd5b600060208284031215613b1c578081fd5b5035919050565b60008060408385031215613b35578182fd5b823591506020830135613b478161451c565b809150509250929050565b600080600060608486031215613b66578081fd5b83359250602084013591506040840135613b7f8161451c565b809150509250925092565b600060408284031215613b9b578081fd5b6040516040810181811067ffffffffffffffff82111715613bbe57613bbe614506565b6040528235613bcc8161451c565b81526020830135613bdc8161451c565b60208201529392505050565b600060208284031215613bf9578081fd5b5051919050565b60028110613c1e57634e487b7160e01b600052602160045260246000fd5b9052565b60008251613c348184602087016144a9565b9190910192915050565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015613cef57835183529284019291840191600101613cd3565b50909695505050505050565b60608101818460005b6002811015613d23578151835260209283019290910190600101613d04565b5050508260408301529392505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b92835260ff9190911660208301526001600160a01b0316604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6101008101613dc6828b613c00565b602082019890985295151560408701526060860194909452608085019290925260a08401526001600160a01b0390811660c08401521660e090910152919050565b60608101613e158286613c00565b602082019390935260400152919050565b918252600f0b602082015260400190565b6000602082528251806020840152613e568160408501602087016144a9565b601f01601f19169190910160400192915050565b6020808252601c908201527f746f74616c416d6f756e74206d757374206265206c6172676572203000000000604082015260600190565b60208082526011908201527f6e6f742079657420636c61696d61626c65000000000000000000000000000000604082015260600190565b6020808252601a908201527f686173206e6f7420796574206265656e2070726f636573736564000000000000604082015260600190565b60208082526029908201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260408201527f656c6f77207a65726f0000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f696e737566666963656e742062616c616e636500000000000000000000000000604082015260600190565b60208082526018908201527f6172726179206c656e67746873206d757374206d617463680000000000000000604082015260600190565b6020808252601d908201527f796f752063616e74207472616e73666572206f746865722066756e6473000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526013908201527f696e636f72726563742062617463685479706500000000000000000000000000604082015260600190565b60208082526031908201527f6163636f756e742068617320696e73756666696369656e742062616c616e636560408201527f206f6620746f6b656e20746f206d696e74000000000000000000000000000000606082015260800190565b60208082526018908201527f636c61696d696e6720746f6f206d616e79207368617265730000000000000000604082015260600190565b60208082526034908201527f636f6e74726163742068617320696e73756666696369656e742062616c616e6360408201527f65206f6620746f6b656e20746f2072656465656d000000000000000000000000606082015260800190565b60208082526011908201527f616c72656164792070726f636573736564000000000000000000000000000000604082015260600190565b60208082526014908201527f696e73756666696369656e742062616c616e6365000000000000000000000000604082015260600190565b6020808252818101527f63616e206e6f74206578656375746520626174636820616374696f6e20796574604082015260600190565b60208082526010908201527f616c72656164792072656465656d656400000000000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526011908201527f736c69707061676520746f6f2068696768000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f6163636f756e742068617320696e73756666696369656e742066756e64730000604082015260600190565b6020808252600e908201527f616c7265616479206d696e746564000000000000000000000000000000000000604082015260600190565b838152606081016143bd6020830185613c00565b6001600160a01b0383166040830152949350505050565b928352600f9190910b6020830152604082015260600190565b60405181810167ffffffffffffffff8111828210171561440f5761440f614506565b604052919050565b600067ffffffffffffffff82111561443157614431614506565b5060209081020190565b6000821982111561444e5761444e6144f0565b500190565b60008261446e57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561448d5761448d6144f0565b500290565b6000828210156144a4576144a46144f0565b500390565b60005b838110156144c45781810151838201526020016144ac565b838111156130bf5750506000910152565b60006000198214156144e9576144e96144f0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461083e57600080fdfea2646970667358221220a8fe38a1db651760e99279d644abc3d295823f41b03f6594c29741546794963364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchMint(uint256)": {
        "details": "This function deposits 3CRV in the underlying Metapool and deposits these LP token to get yToken which in turn are used to mint HYSIThis process leaves some leftovers which are partially used in the next mint batches.In order to get 3CRV we can implement a zap to move stables into the curve tri-poolhandleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol)",
        "params": {
          "_minAmountToMint": "The expected min amount of hysi to mint. If hysiAmount is lower than minAmountToMint_ the transaction will revert."
        }
      },
      "batchRedeem(uint256)": {
        "details": "This function reedeems HYSI for the underlying yToken and deposits these yToken in curve Metapools for 3CRVIn order to get stablecoins from 3CRV we can use a zap to redeem 3CRV for stables in the curve tri-poolhandleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol)",
        "params": {
          "_min3crvToReceive": "sets minimum amount of 3crv to redeem HYSI for, otherwise the transaction will revert"
        }
      },
      "claim(bytes32,address)": {
        "params": {
          "_batchId": "Id of batch to claim from",
          "_claimFor": "User that gets the shares attributed to (for use in zapper contract)"
        }
      },
      "depositForMint(uint256,address)": {
        "details": "Should this be secured we nonReentrant?",
        "params": {
          "_amount": "Amount of 3cr3CRV to use for minting",
          "_depositFor": "User that gets the shares attributed to (for use in zapper contract)"
        }
      },
      "depositForRedeem(uint256)": {
        "details": "Should this be secured we nonReentrant?",
        "params": {
          "_amount": "amount of HYSI to be redeemed"
        }
      },
      "getAccountBatches(address)": {
        "params": {
          "_account": "The address for whom we want to retrieve batches"
        }
      },
      "moveUnclaimedDepositsIntoCurrentBatch(bytes32[],uint256[],uint8)": {
        "details": "the indices of batchIds must match the amountsInHysi to work properly (This will be done by the frontend)",
        "params": {
          "_batchIds": "the ids of each batch where hysi should be moved from",
          "_batchType": "the batchType where funds should be taken from (Mint -> Take Hysi and redeem then, Redeem -> Take 3Crv and Mint HYSI)",
          "_shares": "how many shares should redeemed in each of the batches"
        }
      },
      "setBatchCooldown(uint256)": {
        "details": "The cooldown is the same for redeem and mint batches",
        "params": {
          "_cooldown": "Cooldown in seconds"
        }
      },
      "setCurvePoolTokenPairs(address[],(address,address)[])": {
        "params": {
          "_curvePoolTokenPairs": "An array structs describing underlying yToken, crvToken and curve metapool",
          "_yTokenAddresses": "An array of addresses for the yToken needed to mint HYSI"
        }
      },
      "setMintThreshold(uint256)": {
        "params": {
          "_threshold": "Amount of 3CRV necessary to mint immediately"
        }
      },
      "setRedeemThreshold(uint256)": {
        "params": {
          "_threshold": "Amount of HYSI necessary to mint immediately"
        }
      },
      "withdrawFromBatch(bytes32,uint256,address)": {
        "params": {
          "_amountToWithdraw": "Amount of HYSI or 3CRV to be withdrawn from the queue (depending on mintBatch / redeemBatch)",
          "_batchId": "From which batch should funds be withdrawn from",
          "_withdrawFor": "User that gets the shares attributed to (for use in zapper contract)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountBalances(bytes32,address)": {
        "notice": "This maps batch ids to addresses with share balances"
      },
      "batchMint(uint256)": {
        "notice": "Mint HYSI token with deposited 3CRV. This function goes through all the steps necessary to mint an optimal amount of HYSI"
      },
      "batchRedeem(uint256)": {
        "notice": "Redeems HYSI for 3CRV. This function goes through all the steps necessary to get 3CRV"
      },
      "claim(bytes32,address)": {
        "notice": "Claims funds after the batch has been processed (get HYSI from a mint batch and 3CRV from a redeem batch)"
      },
      "depositForMint(uint256,address)": {
        "notice": "Deposits funds in the current mint batch"
      },
      "depositForRedeem(uint256)": {
        "notice": "deposits funds in the current redeem batch"
      },
      "getAccountBatches(address)": {
        "notice": "Get ids for all batches that a user has interacted with"
      },
      "moveUnclaimedDepositsIntoCurrentBatch(bytes32[],uint256[],uint8)": {
        "notice": "Moves unclaimed token (3crv or Hysi) from their respective Batches into a new redeemBatch / mintBatch without needing to claim them first. This will typically be used when hysi has already been minted and a user has never claimed / transfered the token to their address and they would like to convert it to stablecoin."
      },
      "setBatchCooldown(uint256)": {
        "notice": "Changes the current batch cooldown"
      },
      "setCurvePoolTokenPairs(address[],(address,address)[])": {
        "notice": "This function allows the owner to change the composition of underlying token of the HYSI"
      },
      "setMintThreshold(uint256)": {
        "notice": "Changes the Threshold of 3CRV which need to be deposited to be able to mint immediately"
      },
      "setRedeemThreshold(uint256)": {
        "notice": "Changes the Threshold of HYSI which need to be deposited to be able to redeem immediately"
      },
      "withdrawFromBatch(bytes32,uint256,address)": {
        "notice": "This function allows a user to withdraw their funds from a batch before that batch has been processed"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2976,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IContractRegistry)5395"
      },
      {
        "astId": 2979,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "setToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISetToken)8009"
      },
      {
        "astId": 2982,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "threeCrv",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)860"
      },
      {
        "astId": 2985,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "setBasicIssuanceModule",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(BasicIssuanceModule)7629"
      },
      {
        "astId": 2990,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "curvePoolTokenPairs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(CurvePoolTokenPair)2952_storage)"
      },
      {
        "astId": 2997,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "accountBalances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3002,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "accountBatches",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 3007,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "batches",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Batch)2970_storage)"
      },
      {
        "astId": 3010,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "batchIds",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3012,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "lastMintedAt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3014,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "lastRedeemedAt",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3016,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "currentMintBatchId",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 3018,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "currentRedeemBatchId",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 3020,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "batchCooldown",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3022,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "mintThreshold",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3024,
        "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
        "label": "redeemThreshold",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BasicIssuanceModule)7629": {
        "encoding": "inplace",
        "label": "contract BasicIssuanceModule",
        "numberOfBytes": "20"
      },
      "t_contract(CurveMetapool)7749": {
        "encoding": "inplace",
        "label": "contract CurveMetapool",
        "numberOfBytes": "20"
      },
      "t_contract(IContractRegistry)5395": {
        "encoding": "inplace",
        "label": "contract IContractRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)860": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISetToken)8009": {
        "encoding": "inplace",
        "label": "contract ISetToken",
        "numberOfBytes": "20"
      },
      "t_enum(BatchType)2945": {
        "encoding": "inplace",
        "label": "enum HysiBatchInteraction.BatchType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_struct(CurvePoolTokenPair)2952_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HysiBatchInteraction.CurvePoolTokenPair)",
        "numberOfBytes": "32",
        "value": "t_struct(CurvePoolTokenPair)2952_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(Batch)2970_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HysiBatchInteraction.Batch)",
        "numberOfBytes": "32",
        "value": "t_struct(Batch)2970_storage"
      },
      "t_struct(Batch)2970_storage": {
        "encoding": "inplace",
        "label": "struct HysiBatchInteraction.Batch",
        "members": [
          {
            "astId": 2955,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "batchType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(BatchType)2945"
          },
          {
            "astId": 2957,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "batchId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2959,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "claimable",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2961,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "unclaimedShares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2963,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "suppliedTokenBalance",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2965,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "claimableTokenBalance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2967,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "suppliedTokenAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2969,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "claimableTokenAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(CurvePoolTokenPair)2952_storage": {
        "encoding": "inplace",
        "label": "struct HysiBatchInteraction.CurvePoolTokenPair",
        "members": [
          {
            "astId": 2948,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "curveMetaPool",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(CurveMetapool)7749"
          },
          {
            "astId": 2951,
            "contract": "contracts/core/defi/butter/HysiBatchInteraction.sol:HysiBatchInteraction",
            "label": "crvLPToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)860"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}