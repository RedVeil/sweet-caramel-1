{
  "address": "0x3aAde2dCD2Df6a8cAc689EE797591b2913658659",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IContractRegistry",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "contract Curve3Pool",
          "name": "_curve3Pool",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_threeCrv",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stableCoinIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threeCurveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableCoinAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ClaimedIntoStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threeCurveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ZappedIntoBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stableCoinIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threeCurveAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableCoinAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ZappedOutOfBatch",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_stableCoinIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_min_amount",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapToStable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[3]",
          "name": "_amounts",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256",
          "name": "_min_mint_amounts",
          "type": "uint256"
        }
      ],
      "name": "zapIntoBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountToWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_stableCoinIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_min_amount",
          "type": "uint256"
        }
      ],
      "name": "zapOutOfBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2562aeaaffeafe09c7c4cfe6df1f6aed938442f094de2f31d7a996bb207fe7c3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3aAde2dCD2Df6a8cAc689EE797591b2913658659",
    "transactionIndex": 0,
    "gasUsed": "1176168",
    "logsBloom": "0x
    "blockHash": "0xb9c7a668168115ec73d2afc5bcfd08cc2b516ed6bcb87aa418d7534bdc8c9300",
    "transactionHash": "0x2562aeaaffeafe09c7c4cfe6df1f6aed938442f094de2f31d7a996bb207fe7c3",
    "logs": [],
    "blockNumber": 13739708,
    "cumulativeGasUsed": "1176168",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff",
    "0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7",
    "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490"
  ],
  "solcInputHash": "0e2d243efd06c5832267e40ce916613e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"contract Curve3Pool\",\"name\":\"_curve3Pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_threeCrv\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stableCoinIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threeCurveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ClaimedIntoStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threeCurveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ZappedIntoBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stableCoinIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threeCurveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ZappedOutOfBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_stableCoinIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_min_amount\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapToStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amounts\",\"type\":\"uint256\"}],\"name\":\"zapIntoBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stableCoinIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_min_amount\",\"type\":\"uint256\"}],\"name\":\"zapOutOfBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimAndSwapToStable(bytes32,uint8,uint256)\":{\"details\":\"The _stableCoinIndex must align with the index in the curve three-pool\",\"params\":{\"_batchId\":\"Defines which batch gets withdrawn from\",\"_min_amount\":\"The min amount of stables which should be returned by the curve three-pool (slippage control)\",\"_stableCoinIndex\":\"Defines which stablecoin the user wants to receive\"}},\"zapIntoBatch(uint256[3],uint256)\":{\"details\":\"The amounts in _amounts must align with their index in the curve three-pool\",\"params\":{\"_amounts\":\"An array of amounts in stablecoins the user wants to deposit\",\"_min_mint_amounts\":\"The min amount of 3CRV which should be minted by the curve three-pool (slippage control)\"}},\"zapOutOfBatch(bytes32,uint256,uint8,uint256)\":{\"details\":\"The _stableCoinIndex must align with the index in the curve three-pool\",\"params\":{\"_amountToWithdraw\":\"3CRV amount that shall be withdrawn\",\"_batchId\":\"Defines which batch gets withdrawn from\",\"_min_amount\":\"The min amount of stables which should be returned by the curve three-pool (slippage control)\",\"_stableCoinIndex\":\"Defines which stablecoin the user wants to receive\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimAndSwapToStable(bytes32,uint8,uint256)\":{\"notice\":\"claimAndSwapToStable allows a user to claim their processed 3CRV from a redeemBatch and directly receive stablecoins\"},\"zapIntoBatch(uint256[3],uint256)\":{\"notice\":\"zapIntoBatch allows a user to deposit into a mintBatch directly with stablecoins\"},\"zapOutOfBatch(bytes32,uint256,uint8,uint256)\":{\"notice\":\"zapOutOfBatch allows a user to retrieve their not yet processed 3CRV and directly receive stablecoins\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/defi/butter/HysiBatchZapper.sol\":\"HysiBatchZapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/core/defi/butter/HysiBatchZapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {BatchType, Batch, IHysiBatchInteraction} from \\\"../../interfaces/IHysiBatchInteraction.sol\\\";\\nimport \\\"../../../externals/interfaces/Curve3Pool.sol\\\";\\nimport \\\"../../interfaces/IContractRegistry.sol\\\";\\n\\n/*\\nThis Contract allows user to use and receive stablecoins directly when interacting with HysiBatchInteraction.\\nThis contract mainly takes stablecoins swaps them into 3CRV and deposits them or the other way around.\\n */\\ncontract HysiBatchZapper {\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IContractRegistry private contractRegistry;\\n  Curve3Pool private curve3Pool;\\n  IERC20 private threeCrv;\\n\\n  /* ========== EVENTS ========== */\\n\\n  event ZappedIntoBatch(uint256 threeCurveAmount, address account);\\n  event ZappedOutOfBatch(\\n    bytes32 batchId,\\n    uint8 stableCoinIndex,\\n    uint256 threeCurveAmount,\\n    uint256 stableCoinAmount,\\n    address account\\n  );\\n  event ClaimedIntoStable(\\n    bytes32 batchId,\\n    uint8 stableCoinIndex,\\n    uint256 threeCurveAmount,\\n    uint256 stableCoinAmount,\\n    address account\\n  );\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(\\n    IContractRegistry _contractRegistry,\\n    Curve3Pool _curve3Pool,\\n    IERC20 _threeCrv\\n  ) {\\n    contractRegistry = _contractRegistry;\\n    curve3Pool = _curve3Pool;\\n    threeCrv = _threeCrv;\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * @notice zapIntoBatch allows a user to deposit into a mintBatch directly with stablecoins\\n   * @param _amounts An array of amounts in stablecoins the user wants to deposit\\n   * @param _min_mint_amounts The min amount of 3CRV which should be minted by the curve three-pool (slippage control)\\n   * @dev The amounts in _amounts must align with their index in the curve three-pool\\n   */\\n  function zapIntoBatch(uint256[3] memory _amounts, uint256 _min_mint_amounts)\\n    external\\n  {\\n    address hysiBatchInteraction = contractRegistry.getContract(\\n      keccak256(\\\"HysiBatchInteraction\\\")\\n    );\\n    for (uint8 i; i < _amounts.length; i++) {\\n      if (_amounts[i] > 0) {\\n        //Deposit Stables\\n        IERC20(curve3Pool.coins(i)).safeTransferFrom(\\n          msg.sender,\\n          address(this),\\n          _amounts[i]\\n        );\\n        //Allow Stables for user in curve three-pool\\n        IERC20(curve3Pool.coins(i)).safeIncreaseAllowance(\\n          address(curve3Pool),\\n          _amounts[i]\\n        );\\n      }\\n    }\\n    //Deposit stables to receive 3CRV\\n    curve3Pool.add_liquidity(_amounts, _min_mint_amounts);\\n\\n    //Check the amount of returned 3CRV\\n    /*\\n    While curves metapools return the amount of minted 3CRV this is not possible with the three-pool which is why we simply have to check our balance after depositing our stables.\\n    If a user sends 3CRV to this contract by accident (Which cant be retrieved anyway) they will be used aswell.\\n    */\\n    uint256 threeCrvAmount = threeCrv.balanceOf(address(this));\\n\\n    //Allow hysiBatchInteraction to use 3CRV\\n    threeCrv.safeIncreaseAllowance(hysiBatchInteraction, threeCrvAmount);\\n\\n    //Deposit 3CRV in current mint batch\\n    IHysiBatchInteraction(hysiBatchInteraction).depositForMint(\\n      threeCrvAmount,\\n      msg.sender\\n    );\\n    emit ZappedIntoBatch(threeCrvAmount, msg.sender);\\n  }\\n\\n  /**\\n   * @notice zapOutOfBatch allows a user to retrieve their not yet processed 3CRV and directly receive stablecoins\\n   * @param _batchId Defines which batch gets withdrawn from\\n   * @param _amountToWithdraw 3CRV amount that shall be withdrawn\\n   * @param _stableCoinIndex Defines which stablecoin the user wants to receive\\n   * @param _min_amount The min amount of stables which should be returned by the curve three-pool (slippage control)\\n   * @dev The _stableCoinIndex must align with the index in the curve three-pool\\n   */\\n  function zapOutOfBatch(\\n    bytes32 _batchId,\\n    uint256 _amountToWithdraw,\\n    uint8 _stableCoinIndex,\\n    uint256 _min_amount\\n  ) external {\\n    // Allows the zapepr to withdraw 3CRV from batch for the user\\n    IHysiBatchInteraction(\\n      contractRegistry.getContract(keccak256(\\\"HysiBatchInteraction\\\"))\\n    ).withdrawFromBatch(_batchId, _amountToWithdraw, msg.sender);\\n\\n    //Burns 3CRV for stables and sends them to the user\\n    //stableBalance is only returned for the event\\n    uint256 stableBalance = _swapAndTransfer3Crv(\\n      _amountToWithdraw,\\n      _stableCoinIndex,\\n      _min_amount\\n    );\\n\\n    emit ZappedOutOfBatch(\\n      _batchId,\\n      _stableCoinIndex,\\n      _amountToWithdraw,\\n      stableBalance,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @notice claimAndSwapToStable allows a user to claim their processed 3CRV from a redeemBatch and directly receive stablecoins\\n   * @param _batchId Defines which batch gets withdrawn from\\n   * @param _stableCoinIndex Defines which stablecoin the user wants to receive\\n   * @param _min_amount The min amount of stables which should be returned by the curve three-pool (slippage control)\\n   * @dev The _stableCoinIndex must align with the index in the curve three-pool\\n   */\\n  function claimAndSwapToStable(\\n    bytes32 _batchId,\\n    uint8 _stableCoinIndex,\\n    uint256 _min_amount\\n  ) external {\\n    //We can only deposit 3CRV which come from mintBatches otherwise this could claim HYSI which we cant process here\\n    IHysiBatchInteraction hysiBatchInteraction = IHysiBatchInteraction(\\n      contractRegistry.getContract(keccak256(\\\"HysiBatchInteraction\\\"))\\n    );\\n    require(\\n      hysiBatchInteraction.batches(_batchId).batchType == BatchType.Redeem,\\n      \\\"needs to return 3crv\\\"\\n    );\\n\\n    //Zapper claims 3CRV for the user\\n    uint256 threeCurveAmount = hysiBatchInteraction.claim(_batchId, msg.sender);\\n\\n    //Burns 3CRV for stables and sends them to the user\\n    //stableBalance is only returned for the event\\n    uint256 stableBalance = _swapAndTransfer3Crv(\\n      threeCurveAmount,\\n      _stableCoinIndex,\\n      _min_amount\\n    );\\n\\n    emit ClaimedIntoStable(\\n      _batchId,\\n      _stableCoinIndex,\\n      threeCurveAmount,\\n      stableBalance,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n   * @notice _swapAndTransfer3Crv burns 3CRV and sends the returned stables to the user\\n   * @param _threeCurveAmount How many 3CRV shall be burned\\n   * @param _stableCoinIndex Defines which stablecoin the user wants to receive\\n   * @param _min_amount The min amount of stables which should be returned by the curve three-pool (slippage control)\\n   * @dev The stableCoinIndex_ must align with the index in the curve three-pool\\n   */\\n  function _swapAndTransfer3Crv(\\n    uint256 _threeCurveAmount,\\n    uint8 _stableCoinIndex,\\n    uint256 _min_amount\\n  ) internal returns (uint256) {\\n    //Allow curve three-pool to use 3CRV\\n    threeCrv.safeIncreaseAllowance(address(curve3Pool), _threeCurveAmount);\\n\\n    //Burn 3CRV to receive stables\\n    curve3Pool.remove_liquidity_one_coin(\\n      _threeCurveAmount,\\n      _stableCoinIndex,\\n      _min_amount\\n    );\\n\\n    //Check the amount of returned stables\\n    /*\\n    If a user sends Stables to this contract by accident (Which cant be retrieved anyway) they will be used aswell.\\n    */\\n    uint256 stableBalance = IERC20(curve3Pool.coins(_stableCoinIndex))\\n      .balanceOf(address(this));\\n\\n    //Transfer stables to user\\n    IERC20(curve3Pool.coins(_stableCoinIndex)).safeTransfer(\\n      msg.sender,\\n      stableBalance\\n    );\\n\\n    //Return stablebalance for event\\n    return stableBalance;\\n  }\\n}\\n\",\"keccak256\":\"0xdc4fb1a5abe9806fa482066ffa4f83b7dbe47c65b802a875abb4b31154c349d9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of ContractRegistry.\\n */\\ninterface IContractRegistry {\\n  function getContract(bytes32 _name) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc43db33e962fbd24ff774f9ced47a5278276e38d709a5d8cf963f007f4bac0c9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IHysiBatchInteraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nenum BatchType {\\n  Mint,\\n  Redeem\\n}\\n\\nstruct Batch {\\n  BatchType batchType;\\n  bytes32 batchId;\\n  bool claimable;\\n  uint256 unclaimedShares;\\n  uint256 suppliedTokenBalance;\\n  uint256 claimableTokenBalance;\\n  address suppliedTokenAddress;\\n  address claimableTokenAddress;\\n}\\n\\ninterface IHysiBatchInteraction {\\n  function batches(bytes32 batchId) external view returns (Batch memory);\\n\\n  function depositForMint(uint256 amount_, address account_) external;\\n\\n  function claim(bytes32 batchId_, address account_) external returns (uint256);\\n\\n  function withdrawFromBatch(\\n    bytes32 batchId_,\\n    uint256 amountToWithdraw_,\\n    address account_\\n  ) external;\\n}\\n\",\"keccak256\":\"0x9c0967abc1000f68bb9ed353388b905b6d9e8ead9e499ccf0231bc5f740a76a1\",\"license\":\"MIT\"},\"contracts/externals/interfaces/Curve3Pool.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface Curve3Pool {\\n  function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amounts)\\n    external;\\n\\n  function remove_liquidity_one_coin(\\n    uint256 burn_amount,\\n    int128 i,\\n    uint256 min_amount\\n  ) external;\\n\\n  function get_virtual_price() external view returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function coins(uint256 i) external view returns (address);\\n\\n  function calc_token_amount(uint256[3] calldata amounts, bool deposit)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0xf85585f2be267a6a36d7719ba6aec0540ed789791ee4092a48076fcbf80077ee\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80636a1c241314610046578063bb03c5c21461005b578063ea2b15c51461006e575b600080fd5b610059610054366004610ecd565b610081565b005b610059610069366004610e2a565b6101d7565b61005961007c366004610f09565b61063d565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d98906100d1907faa821177e27c4d8c5b6e0ea8808c02d26a94b8d2b70e222f4a392ed9113644bb906004016110bc565b60206040518083038186803b1580156100e957600080fd5b505afa1580156100fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101219190610e10565b6001600160a01b0316633af3bfb58585336040518463ffffffff1660e01b8152600401610150939291906110dc565b600060405180830381600087803b15801561016a57600080fd5b505af115801561017e573d6000803e3d6000fd5b50505050600061018f8484846108b1565b90507f488e809ec3972782422dc6e318706816f07653f88f15bfa0c345418d9892ad7e85848684336040516101c89594939291906110fb565b60405180910390a15050505050565b60008054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610228907faa821177e27c4d8c5b6e0ea8808c02d26a94b8d2b70e222f4a392ed9113644bb906004016110bc565b60206040518083038186803b15801561024057600080fd5b505afa158015610254573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102789190610e10565b905060005b60038160ff161015610451576000848260ff16600381106102ae57634e487b7160e01b600052603260045260246000fd5b6020020151111561043f576103773330868460ff16600381106102e157634e487b7160e01b600052603260045260246000fd5b602002015160015460405163c661065760e01b81526001600160a01b039091169063c661065790610316908890600401611241565b60206040518083038186803b15801561032e57600080fd5b505afa158015610342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103669190610e10565b6001600160a01b0316929190610af3565b60015461043f906001600160a01b03168560ff8416600381106103aa57634e487b7160e01b600052603260045260246000fd5b602002015160015460405163c661065760e01b81526001600160a01b039091169063c6610657906103df908790600401611241565b60206040518083038186803b1580156103f757600080fd5b505afa15801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f9190610e10565b6001600160a01b03169190610b7e565b8061044981611293565b91505061027d565b506001546040517f4515cef30000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634515cef39061049d9086908690600401611084565b600060405180830381600087803b1580156104b757600080fd5b505af11580156104cb573d6000803e3d6000fd5b50506002546040517f70a08231000000000000000000000000000000000000000000000000000000008152600093506001600160a01b0390911691506370a082319061051b903090600401611019565b60206040518083038186803b15801561053357600080fd5b505afa158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b9190610fe5565b600254909150610585906001600160a01b03168383610b7e565b6040517f961b7d860000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063961b7d86906105cc90849033906004016110c5565b600060405180830381600087803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b505050507fa59c8e0fff5360b5d65a99cba38825db122305108affae79287f0029d5b4b6e3813360405161062f9291906110c5565b60405180910390a150505050565b60008054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d989061068e907faa821177e27c4d8c5b6e0ea8808c02d26a94b8d2b70e222f4a392ed9113644bb906004016110bc565b60206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190610e10565b905060016040517fc81e25ab0000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063c81e25ab906107279088906004016110bc565b6101006040518083038186803b15801561074057600080fd5b505afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190610f3d565b51600181111561079857634e487b7160e01b600052602160045260246000fd5b146107be5760405162461bcd60e51b81526004016107b59061115d565b60405180910390fd5b6040517f96c144f00000000000000000000000000000000000000000000000000000000081526000906001600160a01b038316906396c144f09061080890889033906004016110c5565b602060405180830381600087803b15801561082257600080fd5b505af1158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190610fe5565b905060006108698286866108b1565b90507e4f8bcfa3280478204e9c5d36884938428f1ab9462917d29faed37570b5978b86868484336040516108a19594939291906110fb565b60405180910390a1505050505050565b6001546002546000916108d1916001600160a01b03908116911686610b7e565b6001546040517f1a4d01d20000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690631a4d01d29061091e90879087908790600401611228565b600060405180830381600087803b15801561093857600080fd5b505af115801561094c573d6000803e3d6000fd5b505060015460405163c661065760e01b8152600093506001600160a01b03909116915063c661065790610983908790600401611241565b60206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d39190610e10565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109fe9190611019565b60206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190610fe5565b60015460405163c661065760e01b8152919250610ae991339184916001600160a01b039091169063c661065790610a89908a90600401611241565b60206040518083038186803b158015610aa157600080fd5b505afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190610e10565b6001600160a01b03169190610c2a565b90505b9392505050565b610b78846323b872dd60e01b858585604051602401610b1493929190611047565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610c4e565b50505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401610baf92919061102d565b60206040518083038186803b158015610bc757600080fd5b505afa158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff9190610fe5565b610c09919061124f565b9050610b788463095ea7b360e01b8584604051602401610b1492919061106b565b610c498363a9059cbb60e01b8484604051602401610b1492919061106b565b505050565b6000610ca3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610cdd9092919063ffffffff16565b805190915015610c495780806020019051810190610cc19190610eb3565b610c495760405162461bcd60e51b81526004016107b5906111cb565b6060610ae9848460008585610cf185610d86565b610d0d5760405162461bcd60e51b81526004016107b590611194565b600080866001600160a01b03168587604051610d299190610ffd565b60006040518083038185875af1925050503d8060008114610d66576040519150601f19603f3d011682016040523d82523d6000602084013e610d6b565b606091505b5091509150610d7b828286610d90565b979650505050505050565b803b15155b919050565b60608315610d9f575081610aec565b825115610daf5782518084602001fd5b8160405162461bcd60e51b81526004016107b5919061112a565b80516001600160a01b0381168114610d8b57600080fd5b80518015158114610d8b57600080fd5b805160028110610d8b57600080fd5b803560ff81168114610d8b57600080fd5b600060208284031215610e21578081fd5b610aec82610dc9565b60008060808385031215610e3c578081fd5b83601f840112610e4a578081fd5b6040516060810181811067ffffffffffffffff82111715610e6d57610e6d6112c9565b60405280846060810187811115610e82578485fd5b845b6003811015610ea3578235845260209384019390920191600101610e84565b5092979235965091945050505050565b600060208284031215610ec4578081fd5b610aec82610de0565b60008060008060808587031215610ee2578182fd5b8435935060208501359250610ef960408601610dff565b9396929550929360600135925050565b600080600060608486031215610f1d578283fd5b83359250610f2d60208501610dff565b9150604084013590509250925092565b6000610100808385031215610f50578182fd5b6040519081019067ffffffffffffffff82118183101715610f7357610f736112c9565b81604052610f8084610df0565b815260208401516020820152610f9860408501610de0565b6040820152606084015160608201526080840151608082015260a084015160a0820152610fc760c08501610dc9565b60c0820152610fd860e08501610dc9565b60e0820152949350505050565b600060208284031215610ff6578081fd5b5051919050565b6000825161100f818460208701611267565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60808101818460005b60038110156110ac57815183526020928301929091019060010161108d565b5050508260608301529392505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b94855260ff939093166020850152604084019190915260608301526001600160a01b0316608082015260a00190565b6000602082528251806020840152611149816040850160208701611267565b601f01601f19169190910160400192915050565b60208082526014908201527f6e6565647320746f2072657475726e2033637276000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b92835260ff919091166020830152604082015260600190565b60ff91909116815260200190565b60008219821115611262576112626112b3565b500190565b60005b8381101561128257818101518382015260200161126a565b83811115610b785750506000910152565b600060ff821660ff8114156112aa576112aa6112b3565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122039690dd8c1678a3f183dea38d583e908adfa0a6cba23b70ff5fb3ccc54ee8cfa64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimAndSwapToStable(bytes32,uint8,uint256)": {
        "details": "The _stableCoinIndex must align with the index in the curve three-pool",
        "params": {
          "_batchId": "Defines which batch gets withdrawn from",
          "_min_amount": "The min amount of stables which should be returned by the curve three-pool (slippage control)",
          "_stableCoinIndex": "Defines which stablecoin the user wants to receive"
        }
      },
      "zapIntoBatch(uint256[3],uint256)": {
        "details": "The amounts in _amounts must align with their index in the curve three-pool",
        "params": {
          "_amounts": "An array of amounts in stablecoins the user wants to deposit",
          "_min_mint_amounts": "The min amount of 3CRV which should be minted by the curve three-pool (slippage control)"
        }
      },
      "zapOutOfBatch(bytes32,uint256,uint8,uint256)": {
        "details": "The _stableCoinIndex must align with the index in the curve three-pool",
        "params": {
          "_amountToWithdraw": "3CRV amount that shall be withdrawn",
          "_batchId": "Defines which batch gets withdrawn from",
          "_min_amount": "The min amount of stables which should be returned by the curve three-pool (slippage control)",
          "_stableCoinIndex": "Defines which stablecoin the user wants to receive"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimAndSwapToStable(bytes32,uint8,uint256)": {
        "notice": "claimAndSwapToStable allows a user to claim their processed 3CRV from a redeemBatch and directly receive stablecoins"
      },
      "zapIntoBatch(uint256[3],uint256)": {
        "notice": "zapIntoBatch allows a user to deposit into a mintBatch directly with stablecoins"
      },
      "zapOutOfBatch(bytes32,uint256,uint8,uint256)": {
        "notice": "zapOutOfBatch allows a user to retrieve their not yet processed 3CRV and directly receive stablecoins"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4916,
        "contract": "contracts/core/defi/butter/HysiBatchZapper.sol:HysiBatchZapper",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IContractRegistry)5395"
      },
      {
        "astId": 4919,
        "contract": "contracts/core/defi/butter/HysiBatchZapper.sol:HysiBatchZapper",
        "label": "curve3Pool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Curve3Pool)7682"
      },
      {
        "astId": 4922,
        "contract": "contracts/core/defi/butter/HysiBatchZapper.sol:HysiBatchZapper",
        "label": "threeCrv",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)860"
      }
    ],
    "types": {
      "t_contract(Curve3Pool)7682": {
        "encoding": "inplace",
        "label": "contract Curve3Pool",
        "numberOfBytes": "20"
      },
      "t_contract(IContractRegistry)5395": {
        "encoding": "inplace",
        "label": "contract IContractRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)860": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}