{
  "address": "0xcbEAF3BDe82155F56486Fb5a1072cb8baAf547cc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IACLRegistry",
          "name": "_aclRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_version",
          "type": "bytes32"
        }
      ],
      "name": "ContractAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "ContractDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_version",
          "type": "bytes32"
        }
      ],
      "name": "ContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aclRegistry",
      "outputs": [
        {
          "internalType": "contract IACLRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_version",
          "type": "bytes32"
        }
      ],
      "name": "addContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractNames",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "version",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_contractIndex",
          "type": "uint256"
        }
      ],
      "name": "deleteContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractNames",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_version",
          "type": "bytes32"
        }
      ],
      "name": "updateContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a46e027eae8636dc8618de0cd7b22b73ddfd1fefcc2265b14ddcb27c074e044",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xcbEAF3BDe82155F56486Fb5a1072cb8baAf547cc",
    "transactionIndex": 0,
    "gasUsed": "647103",
    "logsBloom": "0x
    "blockHash": "0x5585210a2d55fde5b97f81f5db934e7349e22be961a0b2aed8d791686554876d",
    "transactionHash": "0x2a46e027eae8636dc8618de0cd7b22b73ddfd1fefcc2265b14ddcb27c074e044",
    "logs": [],
    "blockNumber": 13206606,
    "cumulativeGasUsed": "647103",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650"
  ],
  "solcInputHash": "461dca20ad4e06213db0a60c759fc812",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IACLRegistry\",\"name\":\"_aclRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"ContractDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aclRegistry\",\"outputs\":[{\"internalType\":\"contract IACLRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractNames\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"version\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_contractIndex\",\"type\":\"uint256\"}],\"name\":\"deleteContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractNames\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"updateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This Contract holds reference to all our contracts. Every contract A that needs to interact with another contract B calls this contract to ask for the address of B. This allows us to update addresses in one central point and reduces constructing and management overhead.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/utils/ContractRegistry.sol\":\"ContractRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/core/interfaces/IACLRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IACLRegistry {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(\\n    bytes32 indexed role,\\n    bytes32 indexed previousAdminRole,\\n    bytes32 indexed newAdminRole\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(\\n    bytes32 indexed role,\\n    address indexed account,\\n    address indexed sender\\n  );\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `permission`.\\n   */\\n  function hasPermission(bytes32 permission, address account)\\n    external\\n    view\\n    returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  function grantPermission(bytes32 permission, address account) external;\\n\\n  function revokePermission(bytes32 permission) external;\\n\\n  function requireApprovedContractOrEOA(address account) external view;\\n\\n  function requireRole(bytes32 role, address account) external view;\\n\\n  function requirePermission(bytes32 permission, address account) external view;\\n\\n  function isRoleAdmin(bytes32 role, address account) external view;\\n}\\n\",\"keccak256\":\"0xff2bc1d68e6f144a2aa914aedf0e28ef3649830504d5398b21603eb58525b51d\",\"license\":\"MIT\"},\"contracts/core/interfaces/IContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of ContractRegistry.\\n */\\ninterface IContractRegistry {\\n  function getContract(bytes32 _name) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc43db33e962fbd24ff774f9ced47a5278276e38d709a5d8cf963f007f4bac0c9\",\"license\":\"MIT\"},\"contracts/core/utils/ContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IACLRegistry.sol\\\";\\nimport \\\"../interfaces/IContractRegistry.sol\\\";\\n\\n/**\\n * @dev This Contract holds reference to all our contracts. Every contract A that needs to interact with another contract B calls this contract\\n * to ask for the address of B.\\n * This allows us to update addresses in one central point and reduces constructing and management overhead.\\n */\\ncontract ContractRegistry is IContractRegistry {\\n  struct Contract {\\n    address contractAddress;\\n    bytes32 version;\\n  }\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IACLRegistry public aclRegistry;\\n\\n  mapping(bytes32 => Contract) public contracts;\\n  bytes32[] public contractNames;\\n\\n  /* ========== EVENTS ========== */\\n\\n  event ContractAdded(bytes32 _name, address _address, bytes32 _version);\\n  event ContractUpdated(bytes32 _name, address _address, bytes32 _version);\\n  event ContractDeleted(bytes32 _name);\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(IACLRegistry _aclRegistry) {\\n    aclRegistry = _aclRegistry;\\n    contracts[keccak256(\\\"ACLRegistry\\\")] = Contract({\\n      contractAddress: address(_aclRegistry),\\n      version: keccak256(\\\"1\\\")\\n    });\\n    contractNames.push(keccak256(\\\"ACLRegistry\\\"));\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  function getContractNames() external view returns (bytes32[] memory) {\\n    return contractNames;\\n  }\\n\\n  function getContract(bytes32 _name) external view override returns (address) {\\n    return contracts[_name].contractAddress;\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  function addContract(\\n    bytes32 _name,\\n    address _address,\\n    bytes32 _version\\n  ) external {\\n    aclRegistry.requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    require(\\n      contracts[_name].contractAddress == address(0),\\n      \\\"contract already exists\\\"\\n    );\\n    contracts[_name] = Contract({contractAddress: _address, version: _version});\\n    contractNames.push(_name);\\n    emit ContractAdded(_name, _address, _version);\\n  }\\n\\n  function updateContract(\\n    bytes32 _name,\\n    address _newAddress,\\n    bytes32 _version\\n  ) external {\\n    aclRegistry.requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    require(\\n      contracts[_name].contractAddress != address(0),\\n      \\\"contract doesnt exist\\\"\\n    );\\n    contracts[_name] = Contract({\\n      contractAddress: _newAddress,\\n      version: _version\\n    });\\n    emit ContractUpdated(_name, _newAddress, _version);\\n  }\\n\\n  function deleteContract(bytes32 _name, uint256 _contractIndex) external {\\n    aclRegistry.requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    require(\\n      contracts[_name].contractAddress != address(0),\\n      \\\"contract doesnt exist\\\"\\n    );\\n    require(\\n      contractNames[_contractIndex] == _name,\\n      \\\"this is not the contract you are looking for\\\"\\n    );\\n    delete contracts[_name];\\n    delete contractNames[_contractIndex];\\n    emit ContractDeleted(_name);\\n  }\\n}\\n\",\"keccak256\":\"0xdfe89ee7cb9421cb7eebe1e3a0ffbb373e92957bfa093341eb40ef73ec44bcae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a19380380610a1983398101604081905261002f91610138565b600080546001600160a01b039283166001600160a01b031991821681178355604080518082019091529081527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660208083019182527f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e80865260019182905292517f7361e8ccf7a27163a98e050d746a5c73d23616ea599eb9af9e4a86e96a9dfc0880549190971694169390931790945592517f7361e8ccf7a27163a98e050d746a5c73d23616ea599eb9af9e4a86e96a9dfc09556002805491820181559091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0155610166565b600060208284031215610149578081fd5b81516001600160a01b038116811461015f578182fd5b9392505050565b6108a4806101756000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d5a161091161005b578063d5a16109146100f5578063e16c7d9814610108578063ec56a3731461011b578063fe3c458e1461013c57610088565b806334d40a8f1461008d57806337df1e9d146100a25780633ca6bb92146100c05780639160380e146100e0575b600080fd5b6100a061009b366004610690565b61014f565b005b6100aa6102a4565b6040516100b79190610720565b60405180910390f35b6100d36100ce366004610678565b6102fc565b6040516100b79190610764565b6100e861031d565b6040516100b791906106f3565b6100a06101033660046106d2565b61032c565b6100e8610116366004610678565b6104c7565b61012e610129366004610678565b6104e2565b6040516100b7929190610707565b6100a061014a366004610690565b610507565b60005460405163d09a20c560e01b81526001600160a01b039091169063d09a20c5906101a1907fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e90339060040161076d565b60006040518083038186803b1580156101b957600080fd5b505afa1580156101cd573d6000803e3d6000fd5b5050506000848152600160205260409020546001600160a01b0316151590506102115760405162461bcd60e51b8152600401610208906107da565b60405180910390fd5b6040805180820182526001600160a01b038481168252602080830185815260008881526001928390528590209351845473ffffffffffffffffffffffffffffffffffffffff191693169290921783559051910155517fb69768dcac5758cdbac4aa0c3113c765359474832ce059d53f5e799e0922db6f9061029790859085908590610784565b60405180910390a1505050565b606060028054806020026020016040519081016040528092919081815260200182805480156102f257602002820191906000526020600020905b8154815260200190600101908083116102de575b5050505050905090565b6002818154811061030c57600080fd5b600091825260209091200154905081565b6000546001600160a01b031681565b60005460405163d09a20c560e01b81526001600160a01b039091169063d09a20c59061037e907fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e90339060040161076d565b60006040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b5050506000838152600160205260409020546001600160a01b0316151590506103e55760405162461bcd60e51b8152600401610208906107da565b816002828154811061040757634e487b7160e01b600052603260045260246000fd5b90600052602060002001541461042f5760405162461bcd60e51b815260040161020890610811565b60008281526001602081905260408220805473ffffffffffffffffffffffffffffffffffffffff191681550155600280548290811061047e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001600090557ffcb9b89d9fdad6183290641024092e3a078212303eda7df8d64648902cd7600b826040516104bb9190610764565b60405180910390a15050565b6000908152600160205260409020546001600160a01b031690565b600160208190526000918252604090912080549101546001600160a01b039091169082565b60005460405163d09a20c560e01b81526001600160a01b039091169063d09a20c590610559907fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e90339060040161076d565b60006040518083038186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b5050506000848152600160205260409020546001600160a01b03161590506105bf5760405162461bcd60e51b8152600401610208906107a3565b6040805180820182526001600160a01b038481168252602080830185815260008881526001928390528581209451855473ffffffffffffffffffffffffffffffffffffffff19169416939093178455519281019290925560028054928301815590527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01849055517f41f0868602f01af184ca25746dd5d2fff355679ad1861385cf8bd3f6d3da8a579061029790859085908590610784565b600060208284031215610689578081fd5b5035919050565b6000806000606084860312156106a4578182fd5b8335925060208401356001600160a01b03811681146106c1578283fd5b929592945050506040919091013590565b600080604083850312156106e4578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156107585783518352928401929184019160010161073c565b50909695505050505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03919091166020830152604082015260600190565b60208082526017908201527f636f6e747261637420616c726561647920657869737473000000000000000000604082015260600190565b60208082526015908201527f636f6e747261637420646f65736e742065786973740000000000000000000000604082015260600190565b6020808252602c908201527f74686973206973206e6f742074686520636f6e747261637420796f752061726560408201527f206c6f6f6b696e6720666f72000000000000000000000000000000000000000060608201526080019056fea2646970667358221220f2460ad83bbe5bdf81ca7657053d185584ba1b8fd4f40295e0b72fe92af6843b64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063d5a161091161005b578063d5a16109146100f5578063e16c7d9814610108578063ec56a3731461011b578063fe3c458e1461013c57610088565b806334d40a8f1461008d57806337df1e9d146100a25780633ca6bb92146100c05780639160380e146100e0575b600080fd5b6100a061009b366004610690565b61014f565b005b6100aa6102a4565b6040516100b79190610720565b60405180910390f35b6100d36100ce366004610678565b6102fc565b6040516100b79190610764565b6100e861031d565b6040516100b791906106f3565b6100a06101033660046106d2565b61032c565b6100e8610116366004610678565b6104c7565b61012e610129366004610678565b6104e2565b6040516100b7929190610707565b6100a061014a366004610690565b610507565b60005460405163d09a20c560e01b81526001600160a01b039091169063d09a20c5906101a1907fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e90339060040161076d565b60006040518083038186803b1580156101b957600080fd5b505afa1580156101cd573d6000803e3d6000fd5b5050506000848152600160205260409020546001600160a01b0316151590506102115760405162461bcd60e51b8152600401610208906107da565b60405180910390fd5b6040805180820182526001600160a01b038481168252602080830185815260008881526001928390528590209351845473ffffffffffffffffffffffffffffffffffffffff191693169290921783559051910155517fb69768dcac5758cdbac4aa0c3113c765359474832ce059d53f5e799e0922db6f9061029790859085908590610784565b60405180910390a1505050565b606060028054806020026020016040519081016040528092919081815260200182805480156102f257602002820191906000526020600020905b8154815260200190600101908083116102de575b5050505050905090565b6002818154811061030c57600080fd5b600091825260209091200154905081565b6000546001600160a01b031681565b60005460405163d09a20c560e01b81526001600160a01b039091169063d09a20c59061037e907fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e90339060040161076d565b60006040518083038186803b15801561039657600080fd5b505afa1580156103aa573d6000803e3d6000fd5b5050506000838152600160205260409020546001600160a01b0316151590506103e55760405162461bcd60e51b8152600401610208906107da565b816002828154811061040757634e487b7160e01b600052603260045260246000fd5b90600052602060002001541461042f5760405162461bcd60e51b815260040161020890610811565b60008281526001602081905260408220805473ffffffffffffffffffffffffffffffffffffffff191681550155600280548290811061047e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001600090557ffcb9b89d9fdad6183290641024092e3a078212303eda7df8d64648902cd7600b826040516104bb9190610764565b60405180910390a15050565b6000908152600160205260409020546001600160a01b031690565b600160208190526000918252604090912080549101546001600160a01b039091169082565b60005460405163d09a20c560e01b81526001600160a01b039091169063d09a20c590610559907fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e90339060040161076d565b60006040518083038186803b15801561057157600080fd5b505afa158015610585573d6000803e3d6000fd5b5050506000848152600160205260409020546001600160a01b03161590506105bf5760405162461bcd60e51b8152600401610208906107a3565b6040805180820182526001600160a01b038481168252602080830185815260008881526001928390528581209451855473ffffffffffffffffffffffffffffffffffffffff19169416939093178455519281019290925560028054928301815590527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01849055517f41f0868602f01af184ca25746dd5d2fff355679ad1861385cf8bd3f6d3da8a579061029790859085908590610784565b600060208284031215610689578081fd5b5035919050565b6000806000606084860312156106a4578182fd5b8335925060208401356001600160a01b03811681146106c1578283fd5b929592945050506040919091013590565b600080604083850312156106e4578182fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156107585783518352928401929184019160010161073c565b50909695505050505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03919091166020830152604082015260600190565b60208082526017908201527f636f6e747261637420616c726561647920657869737473000000000000000000604082015260600190565b60208082526015908201527f636f6e747261637420646f65736e742065786973740000000000000000000000604082015260600190565b6020808252602c908201527f74686973206973206e6f742074686520636f6e747261637420796f752061726560408201527f206c6f6f6b696e6720666f72000000000000000000000000000000000000000060608201526080019056fea2646970667358221220f2460ad83bbe5bdf81ca7657053d185584ba1b8fd4f40295e0b72fe92af6843b64736f6c63430008000033",
  "devdoc": {
    "details": "This Contract holds reference to all our contracts. Every contract A that needs to interact with another contract B calls this contract to ask for the address of B. This allows us to update addresses in one central point and reduces constructing and management overhead.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5893,
        "contract": "contracts/core/utils/ContractRegistry.sol:ContractRegistry",
        "label": "aclRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IACLRegistry)5141"
      },
      {
        "astId": 5898,
        "contract": "contracts/core/utils/ContractRegistry.sol:ContractRegistry",
        "label": "contracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Contract)5890_storage)"
      },
      {
        "astId": 5901,
        "contract": "contracts/core/utils/ContractRegistry.sol:ContractRegistry",
        "label": "contractNames",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IACLRegistry)5141": {
        "encoding": "inplace",
        "label": "contract IACLRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(Contract)5890_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ContractRegistry.Contract)",
        "numberOfBytes": "32",
        "value": "t_struct(Contract)5890_storage"
      },
      "t_struct(Contract)5890_storage": {
        "encoding": "inplace",
        "label": "struct ContractRegistry.Contract",
        "members": [
          {
            "astId": 5887,
            "contract": "contracts/core/utils/ContractRegistry.sol:ContractRegistry",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5889,
            "contract": "contracts/core/utils/ContractRegistry.sol:ContractRegistry",
            "label": "version",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}