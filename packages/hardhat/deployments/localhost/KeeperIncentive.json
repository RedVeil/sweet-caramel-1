{
  "address": "0x4631BCAbD6dF18D94796344963cB60d44a4136b6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IContractRegistry",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_burnRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_requiredKeeperStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contractName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "openToEveryone",
          "type": "bool"
        }
      ],
      "name": "ApprovalToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "BurnRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contractName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "ControllerContractAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contractName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldOpenToEveryone",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newOpenToEveryone",
          "type": "bool"
        }
      ],
      "name": "IncentiveChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contractName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "openToEveryone",
          "type": "bool"
        }
      ],
      "name": "IncentiveCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IncentiveFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contractName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "IncentiveToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRequirement",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRequirement",
          "type": "uint256"
        }
      ],
      "name": "RequiredKeeperStakeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractName",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "addControllerContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "contract IContractRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "controllerContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_openToEveryone",
          "type": "bool"
        }
      ],
      "name": "createIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractName",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_i",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "handleKeeperIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentiveBudget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "incentives",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "openToEveryone",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredKeeperStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractName",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_i",
          "type": "uint8"
        }
      ],
      "name": "toggleApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractName",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_i",
          "type": "uint8"
        }
      ],
      "name": "toggleIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_burnRate",
          "type": "uint256"
        }
      ],
      "name": "updateBurnRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_contractName",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_i",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_openToEveryone",
          "type": "bool"
        }
      ],
      "name": "updateIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateRequiredKeeperStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x14c14b9450e84cc490b00c21b59bb8d21e841d3f9ed0e30920ae5836378ba3c1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4631BCAbD6dF18D94796344963cB60d44a4136b6",
    "transactionIndex": 0,
    "gasUsed": "1672773",
    "logsBloom": "0x
    "blockHash": "0x69835f639ff56edfe66efeefd3a07b2845b7cf810ec4951169fb84465f7a9a65",
    "transactionHash": "0x14c14b9450e84cc490b00c21b59bb8d21e841d3f9ed0e30920ae5836378ba3c1",
    "logs": [],
    "blockNumber": 13739672,
    "cumulativeGasUsed": "1672773",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49fd2BE640DB2910c2fAb69bB8531Ab6E76127ff",
    "0",
    "0"
  ],
  "solcInputHash": "3f091cf8708e652c084fc8a920e3103f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredKeeperStake\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"openToEveryone\",\"type\":\"bool\"}],\"name\":\"ApprovalToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"BurnRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ControllerContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldOpenToEveryone\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newOpenToEveryone\",\"type\":\"bool\"}],\"name\":\"IncentiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"openToEveryone\",\"type\":\"bool\"}],\"name\":\"IncentiveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"IncentiveToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRequirement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequiredKeeperStakeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"addControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"controllerContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_openToEveryone\",\"type\":\"bool\"}],\"name\":\"createIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_i\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"handleKeeperIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incentives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"openToEveryone\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredKeeperStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_i\",\"type\":\"uint8\"}],\"name\":\"toggleApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_i\",\"type\":\"uint8\"}],\"name\":\"toggleIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"updateBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_i\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_openToEveryone\",\"type\":\"bool\"}],\"name\":\"updateIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateRequiredKeeperStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addControllerContract(bytes32,address)\":{\"details\":\"all critical functions to init/open vaults and add shares to them can only be called by controller contracts\",\"params\":{\"_contractName\":\"the name of the controller contract in bytes32\",\"contract_\":\"the address of the controller contract\"}},\"createIncentive(bytes32,uint256,bool,bool)\":{\"details\":\"This function is only for creating unique incentives for future contractsMultiple functions can use the same incentive which can than be updated with one governance vote\",\"params\":{\"_contractName\":\"Name of contract that uses ParticipationRewards in bytes32\",\"_enabled\":\"Is this Incentive currently enabled?\",\"_openToEveryone\":\"Can anyone call the function for rewards or only keeper?\",\"_reward\":\"The amount in POP the Keeper receives for calling the function\"}},\"updateBurnRate(uint256)\":{\"params\":{\"_burnRate\":\"Percentage in Mantissa. (1e14 = 1 Basis Point)\"}},\"updateRequiredKeeperStake(uint256)\":{\"params\":{\"_amount\":\"Amount of POP a keeper needs to stake\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addControllerContract(bytes32,address)\":{\"notice\":\"In order to allow a contract to use ParticipationReward they need to be added as a controller contract\"},\"createIncentive(bytes32,uint256,bool,bool)\":{\"notice\":\"Create Incentives for keeper to call a function\"},\"updateBurnRate(uint256)\":{\"notice\":\"Sets the current burn rate as a percentage of the incentive reward.\"},\"updateRequiredKeeperStake(uint256)\":{\"notice\":\"Sets the required amount of POP a keeper needs to have staked to handle incentivized functions.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/utils/KeeperIncentive.sol\":\"KeeperIncentive\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/core/interfaces/IACLRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IACLRegistry {\\n  /**\\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n   *\\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n   * {RoleAdminChanged} not being emitted signaling this.\\n   *\\n   * _Available since v3.1._\\n   */\\n  event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n  /**\\n   * @dev Emitted when `account` is granted `role`.\\n   *\\n   * `sender` is the account that originated the contract call, an admin role\\n   * bearer except when using {AccessControl-_setupRole}.\\n   */\\n  event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  /**\\n   * @dev Emitted when `account` is revoked `role`.\\n   *\\n   * `sender` is the account that originated the contract call:\\n   *   - if using `revokeRole`, it is the admin role bearer\\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n   */\\n  event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `role`.\\n   */\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns `true` if `account` has been granted `permission`.\\n   */\\n  function hasPermission(bytes32 permission, address account) external view returns (bool);\\n\\n  /**\\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\\n   * {revokeRole}.\\n   *\\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n   */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @dev Grants `role` to `account`.\\n   *\\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function grantRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from `account`.\\n   *\\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have ``role``'s admin role.\\n   */\\n  function revokeRole(bytes32 role, address account) external;\\n\\n  /**\\n   * @dev Revokes `role` from the calling account.\\n   *\\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n   * purpose is to provide a mechanism for accounts to lose their privileges\\n   * if they are compromised (such as when a trusted device is misplaced).\\n   *\\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\\n   * event.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must be `account`.\\n   */\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  function grantPermission(bytes32 permission, address account) external;\\n\\n  function revokePermission(bytes32 permission) external;\\n\\n  function requireApprovedContractOrEOA(address account) external view;\\n\\n  function requireRole(bytes32 role, address account) external view;\\n\\n  function requirePermission(bytes32 permission, address account) external view;\\n\\n  function isRoleAdmin(bytes32 role, address account) external view;\\n}\\n\",\"keccak256\":\"0xa4794a01a8dca3385b545642fc378d7c01f787190d8614d3d9e2f374bdc6ab19\",\"license\":\"MIT\"},\"contracts/core/interfaces/IContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of ContractRegistry.\\n */\\ninterface IContractRegistry {\\n  function getContract(bytes32 _name) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc43db33e962fbd24ff774f9ced47a5278276e38d709a5d8cf963f007f4bac0c9\",\"license\":\"MIT\"},\"contracts/core/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStaking {\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function stake(uint256 amount, uint256 lengthOfTime) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getVoiceCredits(address _address) external view returns (uint256);\\n\\n  function getWithdrawableBalance(address _address)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function notifyRewardAmount(uint256 reward) external;\\n}\\n\",\"keccak256\":\"0x8206c98c4a5afea6e615835bec8b801200efef75b8333623e9e184ea54e2be5c\",\"license\":\"MIT\"},\"contracts/core/utils/KeeperIncentive.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IACLRegistry.sol\\\";\\nimport \\\"../interfaces/IContractRegistry.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\n\\ncontract KeeperIncentive {\\n  using SafeERC20 for IERC20;\\n\\n  struct Incentive {\\n    uint256 reward; //pop reward for calling the function\\n    bool enabled;\\n    bool openToEveryone; //can everyone call the function to get the reward or only approved?\\n  }\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IContractRegistry public contractRegistry;\\n\\n  uint256 public incentiveBudget;\\n  mapping(bytes32 => Incentive[]) public incentives;\\n  mapping(bytes32 => address) public controllerContracts;\\n  uint256 public burnRate;\\n  address internal immutable burnAddress =\\n    0x00000000219ab540356cBB839Cbe05303d7705Fa; //ETH2.0 Staking Contract\\n  uint256 public requiredKeeperStake;\\n\\n  /* ========== EVENTS ========== */\\n\\n  event IncentiveCreated(\\n    bytes32 contractName,\\n    uint256 reward,\\n    bool openToEveryone\\n  );\\n  event IncentiveChanged(\\n    bytes32 contractName,\\n    uint256 oldReward,\\n    uint256 newReward,\\n    bool oldOpenToEveryone,\\n    bool newOpenToEveryone\\n  );\\n  event IncentiveFunded(uint256 amount);\\n  event ApprovalToggled(bytes32 contractName, bool openToEveryone);\\n  event IncentiveToggled(bytes32 contractName, bool enabled);\\n  event ControllerContractAdded(bytes32 contractName, address contractAddress);\\n  event Burned(uint256 amount);\\n  event BurnRateChanged(uint256 oldRate, uint256 newRate);\\n  event RequiredKeeperStakeChanged(\\n    uint256 oldRequirement,\\n    uint256 newRequirement\\n  );\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(\\n    IContractRegistry _contractRegistry,\\n    uint256 _burnRate,\\n    uint256 _requiredKeeperStake\\n  ) public {\\n    contractRegistry = _contractRegistry;\\n    burnRate = _burnRate; //25e16\\n    requiredKeeperStake = _requiredKeeperStake; // 2000 ether\\n  }\\n\\n  /* ==========  MUTATIVE FUNCTIONS  ========== */\\n\\n  function handleKeeperIncentive(\\n    bytes32 _contractName,\\n    uint8 _i,\\n    address _keeper\\n  ) external {\\n    require(\\n      msg.sender == controllerContracts[_contractName],\\n      \\\"Can only be called by the controlling contract\\\"\\n    );\\n\\n    Incentive memory incentive = incentives[_contractName][_i];\\n\\n    if (!incentive.openToEveryone) {\\n      IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n        .requireRole(keccak256(\\\"Keeper\\\"), _keeper);\\n      require(\\n        IStaking(contractRegistry.getContract(keccak256(\\\"Staking\\\"))).balanceOf(\\n          _keeper\\n        ) >= requiredKeeperStake,\\n        \\\"not enough pop at stake\\\"\\n      );\\n    }\\n    if (incentive.enabled && incentive.reward <= incentiveBudget) {\\n      incentiveBudget = incentiveBudget - incentive.reward;\\n      uint256 amountToBurn = (incentive.reward * burnRate) / 1e18;\\n      uint256 incentivePayout = incentive.reward - amountToBurn;\\n      IERC20(contractRegistry.getContract(keccak256(\\\"POP\\\"))).safeTransfer(\\n        _keeper,\\n        incentivePayout\\n      );\\n      _burn(amountToBurn);\\n    }\\n  }\\n\\n  /* ========== SETTER ========== */\\n\\n  /**\\n   * @notice Create Incentives for keeper to call a function\\n   * @param _contractName Name of contract that uses ParticipationRewards in bytes32\\n   * @param _reward The amount in POP the Keeper receives for calling the function\\n   * @param _enabled Is this Incentive currently enabled?\\n   * @param _openToEveryone Can anyone call the function for rewards or only keeper?\\n   * @dev This function is only for creating unique incentives for future contracts\\n   * @dev Multiple functions can use the same incentive which can than be updated with one governance vote\\n   */\\n  function createIncentive(\\n    bytes32 _contractName,\\n    uint256 _reward,\\n    bool _enabled,\\n    bool _openToEveryone\\n  ) public {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    incentives[_contractName].push(\\n      Incentive({\\n        reward: _reward,\\n        enabled: _enabled,\\n        openToEveryone: _openToEveryone\\n      })\\n    );\\n    emit IncentiveCreated(_contractName, _reward, _openToEveryone);\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function updateIncentive(\\n    bytes32 _contractName,\\n    uint8 _i,\\n    uint256 _reward,\\n    bool _enabled,\\n    bool _openToEveryone\\n  ) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    Incentive storage incentive = incentives[_contractName][_i];\\n    uint256 oldReward = incentive.reward;\\n    bool oldOpenToEveryone = incentive.openToEveryone;\\n    incentive.reward = _reward;\\n    incentive.enabled = _enabled;\\n    incentive.openToEveryone = _openToEveryone;\\n    emit IncentiveChanged(\\n      _contractName,\\n      oldReward,\\n      _reward,\\n      oldOpenToEveryone,\\n      _openToEveryone\\n    );\\n  }\\n\\n  function toggleApproval(bytes32 _contractName, uint8 _i) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    Incentive storage incentive = incentives[_contractName][_i];\\n    incentive.openToEveryone = !incentive.openToEveryone;\\n    emit ApprovalToggled(_contractName, incentive.openToEveryone);\\n  }\\n\\n  function toggleIncentive(bytes32 _contractName, uint8 _i) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    Incentive storage incentive = incentives[_contractName][_i];\\n    incentive.enabled = !incentive.enabled;\\n    emit IncentiveToggled(_contractName, incentive.enabled);\\n  }\\n\\n  function fundIncentive(uint256 _amount) external {\\n    IERC20(contractRegistry.getContract(keccak256(\\\"POP\\\"))).safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      _amount\\n    );\\n    incentiveBudget = incentiveBudget + _amount;\\n    emit IncentiveFunded(_amount);\\n  }\\n\\n  /**\\n   * @notice In order to allow a contract to use ParticipationReward they need to be added as a controller contract\\n   * @param _contractName the name of the controller contract in bytes32\\n   * @param contract_ the address of the controller contract\\n   * @dev all critical functions to init/open vaults and add shares to them can only be called by controller contracts\\n   */\\n  function addControllerContract(bytes32 _contractName, address contract_)\\n    external\\n  {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    controllerContracts[_contractName] = contract_;\\n    emit ControllerContractAdded(_contractName, contract_);\\n  }\\n\\n  /**\\n   * @notice Sets the current burn rate as a percentage of the incentive reward.\\n   * @param _burnRate Percentage in Mantissa. (1e14 = 1 Basis Point)\\n   */\\n  function updateBurnRate(uint256 _burnRate) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    emit BurnRateChanged(burnRate, _burnRate);\\n    burnRate = _burnRate;\\n  }\\n\\n  function _burn(uint256 _amount) internal {\\n    IERC20(contractRegistry.getContract(keccak256(\\\"POP\\\"))).transfer(\\n      burnAddress,\\n      _amount\\n    );\\n    emit Burned(_amount);\\n  }\\n\\n  /**\\n   * @notice Sets the required amount of POP a keeper needs to have staked to handle incentivized functions.\\n   * @param _amount Amount of POP a keeper needs to stake\\n   */\\n  function updateRequiredKeeperStake(uint256 _amount) external {\\n    IACLRegistry(contractRegistry.getContract(keccak256(\\\"ACLRegistry\\\")))\\n      .requireRole(keccak256(\\\"DAO\\\"), msg.sender);\\n    emit RequiredKeeperStakeChanged(requiredKeeperStake, _amount);\\n    requiredKeeperStake = _amount;\\n  }\\n}\\n\",\"keccak256\":\"0x73ee9b75acaa3870eee474a6d267b6bc220dd92e57892f2de607ab2d60cb424a\"}},\"version\":1}",
  "bytecode": "0x60a06040527b219ab540356cbb839cbe05303d7705fa00000000000000000000000060805234801561003057600080fd5b50604051611da3380380611da383398101604081905261004f9161007b565b600080546001600160a01b0319166001600160a01b0394909416939093179092556004556005556100bc565b60008060006060848603121561008f578283fd5b83516001600160a01b03811681146100a5578384fd5b602085015160409095015190969495509392505050565b60805160601c611cc96100da60003960006114c10152611cc96000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806344027e4611610097578063bcd0dbc911610066578063bcd0dbc9146101cf578063bed99850146101f1578063e96a262d146101f9578063f18086a51461020c576100f5565b806344027e461461019957806355b8efcc146101ac578063a8d58496146101bf578063abf410e5146101c7576100f5565b80632b788787116100d35780632b7887871461014b5780632e3ea85a1461015e5780633d9f49951461017157806341267de514610184576100f5565b806319e1f454146100fa5780631c5f82eb146101235780632b6f6f8d14610138575b600080fd5b61010d610108366004611774565b61021f565b60405161011a919061191f565b60405180910390f35b610136610131366004611774565b61023a565b005b610136610146366004611825565b610341565b610136610159366004611774565b6104fb565b61013661016c36600461178c565b610658565b61013661017f366004611825565b6107f2565b61018c6109af565b60405161011a9190611970565b6101366101a7366004611774565b6109b5565b6101366101ba366004611850565b610b12565b61018c610f56565b61010d610f5c565b6101e26101dd3660046117bb565b610f6b565b60405161011a93929190611b97565b61018c610fb3565b6101366102073660046117dc565b610fb9565b61013661021a36600461188f565b61118a565b6003602052600090815260409020546001600160a01b031681565b600054604051631c2d8fb360e31b81526102f5913391309185916001600160a01b039091169063e16c7d9890610294907f69e547947a4514871bf84679401f91758bd0fe92e4c005143f6d0e5213dab0cb90600401611970565b60206040518083038186803b1580156102ac57600080fd5b505afa1580156102c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e4919061173c565b6001600160a01b0316929190611368565b806001546103039190611bbd565b6001556040517f9ad4c05cff4861564f4d1572799ac5d03d82f40ea702646c7b3bfd552f570cde90610336908390611970565b60405180910390a150565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610391907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b1580156103a957600080fd5b505afa1580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e1919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b815260040161042e929190611979565b60006040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050600083815260026020526040812080549192509060ff841690811061049257634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201908101805460ff19811660ff9182161517918290556040519293507f12da359f5c0e3be0f99345920ec462d30c20b61db9290817368a28851439008b926104ee9287921690611990565b60405180910390a1505050565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d989061054b907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b15801561056357600080fd5b505afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b81526004016105e8929190611979565b60006040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050507f229952885149023c7b324c7187b4b260b1a8e44dfee2bf619ef6f1296d52706d6004548260405161064b929190611baf565b60405180910390a1600455565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d98906106a8907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f8919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401610745929190611979565b60006040518083038186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b5050506000838152600360205260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038516179055517ff6c4dabf3ee4c924bd9069622cd7d390b44d0f38fe8742cf5fdf8f5c5a6be5f891506107e69084908490611979565b60405180910390a15050565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610842907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610892919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b81526004016108df929190611979565b60006040518083038186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050600083815260026020526040812080549192509060ff841690811061094357634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201908101805460ff610100808304821615810261ff001990931692909217928390556040519394507f8e7eb7be6cb0d1a07f05197e6d857593753decc27b9d7294da4c6ee65c3191f6936104ee938893900490911690611990565b60015481565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610a05907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b158015610a1d57600080fd5b505afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a55919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401610aa2929190611979565b60006040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050507f7620b5c06aea6c6af1f14fed9558f4c9b0f13656c3041e8dc17a5f912af7652d60055482604051610b05929190611baf565b60405180910390a1600555565b6000838152600360205260409020546001600160a01b03163314610b515760405162461bcd60e51b8152600401610b4890611a6f565b60405180910390fd5b6000838152600260205260408120805460ff8516908110610b8257634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516060810182526002909302909101805483526001015460ff808216151594840194909452610100900490921615159181018290529150610e2457600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610c1b907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b919061173c565b6001600160a01b031663d09a20c57f4f78afe9dfc9a0cb0441c27b9405070cd2a48b490636a7bdd09f355e33a5d7de846040518363ffffffff1660e01b8152600401610cb8929190611979565b60006040518083038186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b5050600554600054604051631c2d8fb360e31b81529193506001600160a01b0316915063e16c7d9890610d3b907f1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d16703490600401611970565b60206040518083038186803b158015610d5357600080fd5b505afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b919061173c565b6001600160a01b03166370a08231846040518263ffffffff1660e01b8152600401610db6919061191f565b60206040518083038186803b158015610dce57600080fd5b505afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0691906118eb565b1015610e245760405162461bcd60e51b8152600401610b4890611b60565b80602001518015610e385750600154815111155b15610f50578051600154610e4c9190611c14565b6001556004548151600091670de0b6b3a764000091610e6b9190611bf5565b610e759190611bd5565b90506000818360000151610e899190611c14565b600054604051631c2d8fb360e31b8152919250610f4491869184916001600160a01b039091169063e16c7d9890610ee4907f69e547947a4514871bf84679401f91758bd0fe92e4c005143f6d0e5213dab0cb90600401611970565b60206040518083038186803b158015610efc57600080fd5b505afa158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f34919061173c565b6001600160a01b031691906113ed565b610f4d82611411565b50505b50505050565b60055481565b6000546001600160a01b031681565b60026020528160005260406000208181548110610f8757600080fd5b60009182526020909120600290910201805460019091015490925060ff80821692506101009091041683565b60045481565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890611009907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611059919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b81526004016110a6929190611979565b60006040518083038186803b1580156110be57600080fd5b505afa1580156110d2573d6000803e3d6000fd5b5050506000858152600260208181526040808420815160608101835289815288151581850190815288151582850190815283546001818101865594895295909720915194909502019283559251919092018054935115156101000261ff001992151560ff19909516949094179190911692909217909155517f880fd3397515485fabc2f3d44892d2dabbc45bc79a356562afe1b34f1301a870915061117c908690869085906119a0565b60405180910390a150505050565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d98906111da907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b1580156111f257600080fd5b505afa158015611206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122a919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401611277929190611979565b60006040518083038186803b15801561128f57600080fd5b505afa1580156112a3573d6000803e3d6000fd5b505050600086815260026020526040812080549192509060ff87169081106112db57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201805460018201805487845585151561010090810261ff001989151560ff198516171617909255604051939450919260ff9190920416907f248e6a6ffe6039c6908db49d17064442179a7e2854e33d9f55c7eaacdde06b2390611356908a9085908a9086908a906119b8565b60405180910390a15050505050505050565b610f50846323b872dd60e01b85858560405160240161138993929190611933565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611580565b61140c8363a9059cbb60e01b8484604051602401611389929190611957565b505050565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890611461907f69e547947a4514871bf84679401f91758bd0fe92e4c005143f6d0e5213dab0cb90600401611970565b60206040518083038186803b15801561147957600080fd5b505afa15801561148d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b1919061173c565b6001600160a01b031663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016114fe929190611957565b602060405180830381600087803b15801561151857600080fd5b505af115801561152c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115509190611758565b507fd83c63197e8e676d80ab0122beba9a9d20f3828839e9a1d6fe81d242e9cd7e6e816040516103369190611970565b60006115d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661160f9092919063ffffffff16565b80519091501561140c57808060200190518101906115f39190611758565b61140c5760405162461bcd60e51b8152600401610b4890611b03565b606061161e8484600085611628565b90505b9392505050565b60608247101561164a5760405162461bcd60e51b8152600401610b4890611a12565b611653856116e8565b61166f5760405162461bcd60e51b8152600401610b4890611acc565b600080866001600160a01b0316858760405161168b9190611903565b60006040518083038185875af1925050503d80600081146116c8576040519150601f19603f3d011682016040523d82523d6000602084013e6116cd565b606091505b50915091506116dd8282866116f2565b979650505050505050565b803b15155b919050565b60608315611701575081611621565b8251156117115782518084602001fd5b8160405162461bcd60e51b8152600401610b4891906119df565b803560ff811681146116ed57600080fd5b60006020828403121561174d578081fd5b815161162181611c6d565b600060208284031215611769578081fd5b815161162181611c85565b600060208284031215611785578081fd5b5035919050565b6000806040838503121561179e578081fd5b8235915060208301356117b081611c6d565b809150509250929050565b600080604083850312156117cd578182fd5b50508035926020909101359150565b600080600080608085870312156117f1578182fd5b8435935060208501359250604085013561180a81611c85565b9150606085013561181a81611c85565b939692955090935050565b60008060408385031215611837578182fd5b823591506118476020840161172b565b90509250929050565b600080600060608486031215611864578283fd5b833592506118746020850161172b565b9150604084013561188481611c6d565b809150509250925092565b600080600080600060a086880312156118a6578081fd5b853594506118b66020870161172b565b93506040860135925060608601356118cd81611c85565b915060808601356118dd81611c85565b809150509295509295909350565b6000602082840312156118fc578081fd5b5051919050565b60008251611915818460208701611c2b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9182521515602082015260400190565b92835260208301919091521515604082015260600190565b94855260208501939093526040840191909152151560608301521515608082015260a00190565b60006020825282518060208401526119fe816040850160208701611c2b565b601f01601f19169190910160400192915050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f43616e206f6e6c792062652063616c6c65642062792074686520636f6e74726f60408201527f6c6c696e6720636f6e7472616374000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f6e6f7420656e6f75676820706f70206174207374616b65000000000000000000604082015260600190565b92835290151560208301521515604082015260600190565b918252602082015260400190565b60008219821115611bd057611bd0611c57565b500190565b600082611bf057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611c0f57611c0f611c57565b500290565b600082821015611c2657611c26611c57565b500390565b60005b83811015611c46578181015183820152602001611c2e565b83811115610f505750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611c8257600080fd5b50565b8015158114611c8257600080fdfea26469706673582212207acbfc4974841220f1a2aa2fcb9c9180ca8cc5a2382c4fc79ba1404c2436782264736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806344027e4611610097578063bcd0dbc911610066578063bcd0dbc9146101cf578063bed99850146101f1578063e96a262d146101f9578063f18086a51461020c576100f5565b806344027e461461019957806355b8efcc146101ac578063a8d58496146101bf578063abf410e5146101c7576100f5565b80632b788787116100d35780632b7887871461014b5780632e3ea85a1461015e5780633d9f49951461017157806341267de514610184576100f5565b806319e1f454146100fa5780631c5f82eb146101235780632b6f6f8d14610138575b600080fd5b61010d610108366004611774565b61021f565b60405161011a919061191f565b60405180910390f35b610136610131366004611774565b61023a565b005b610136610146366004611825565b610341565b610136610159366004611774565b6104fb565b61013661016c36600461178c565b610658565b61013661017f366004611825565b6107f2565b61018c6109af565b60405161011a9190611970565b6101366101a7366004611774565b6109b5565b6101366101ba366004611850565b610b12565b61018c610f56565b61010d610f5c565b6101e26101dd3660046117bb565b610f6b565b60405161011a93929190611b97565b61018c610fb3565b6101366102073660046117dc565b610fb9565b61013661021a36600461188f565b61118a565b6003602052600090815260409020546001600160a01b031681565b600054604051631c2d8fb360e31b81526102f5913391309185916001600160a01b039091169063e16c7d9890610294907f69e547947a4514871bf84679401f91758bd0fe92e4c005143f6d0e5213dab0cb90600401611970565b60206040518083038186803b1580156102ac57600080fd5b505afa1580156102c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e4919061173c565b6001600160a01b0316929190611368565b806001546103039190611bbd565b6001556040517f9ad4c05cff4861564f4d1572799ac5d03d82f40ea702646c7b3bfd552f570cde90610336908390611970565b60405180910390a150565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610391907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b1580156103a957600080fd5b505afa1580156103bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e1919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b815260040161042e929190611979565b60006040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050600083815260026020526040812080549192509060ff841690811061049257634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201908101805460ff19811660ff9182161517918290556040519293507f12da359f5c0e3be0f99345920ec462d30c20b61db9290817368a28851439008b926104ee9287921690611990565b60405180910390a1505050565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d989061054b907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b15801561056357600080fd5b505afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b81526004016105e8929190611979565b60006040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050507f229952885149023c7b324c7187b4b260b1a8e44dfee2bf619ef6f1296d52706d6004548260405161064b929190611baf565b60405180910390a1600455565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d98906106a8907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f8919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401610745929190611979565b60006040518083038186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b5050506000838152600360205260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038516179055517ff6c4dabf3ee4c924bd9069622cd7d390b44d0f38fe8742cf5fdf8f5c5a6be5f891506107e69084908490611979565b60405180910390a15050565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610842907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610892919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b81526004016108df929190611979565b60006040518083038186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050600083815260026020526040812080549192509060ff841690811061094357634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600290920201908101805460ff610100808304821615810261ff001990931692909217928390556040519394507f8e7eb7be6cb0d1a07f05197e6d857593753decc27b9d7294da4c6ee65c3191f6936104ee938893900490911690611990565b60015481565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610a05907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b158015610a1d57600080fd5b505afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a55919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401610aa2929190611979565b60006040518083038186803b158015610aba57600080fd5b505afa158015610ace573d6000803e3d6000fd5b505050507f7620b5c06aea6c6af1f14fed9558f4c9b0f13656c3041e8dc17a5f912af7652d60055482604051610b05929190611baf565b60405180910390a1600555565b6000838152600360205260409020546001600160a01b03163314610b515760405162461bcd60e51b8152600401610b4890611a6f565b60405180910390fd5b6000838152600260205260408120805460ff8516908110610b8257634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516060810182526002909302909101805483526001015460ff808216151594840194909452610100900490921615159181018290529150610e2457600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890610c1b907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b919061173c565b6001600160a01b031663d09a20c57f4f78afe9dfc9a0cb0441c27b9405070cd2a48b490636a7bdd09f355e33a5d7de846040518363ffffffff1660e01b8152600401610cb8929190611979565b60006040518083038186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b5050600554600054604051631c2d8fb360e31b81529193506001600160a01b0316915063e16c7d9890610d3b907f1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d16703490600401611970565b60206040518083038186803b158015610d5357600080fd5b505afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b919061173c565b6001600160a01b03166370a08231846040518263ffffffff1660e01b8152600401610db6919061191f565b60206040518083038186803b158015610dce57600080fd5b505afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0691906118eb565b1015610e245760405162461bcd60e51b8152600401610b4890611b60565b80602001518015610e385750600154815111155b15610f50578051600154610e4c9190611c14565b6001556004548151600091670de0b6b3a764000091610e6b9190611bf5565b610e759190611bd5565b90506000818360000151610e899190611c14565b600054604051631c2d8fb360e31b8152919250610f4491869184916001600160a01b039091169063e16c7d9890610ee4907f69e547947a4514871bf84679401f91758bd0fe92e4c005143f6d0e5213dab0cb90600401611970565b60206040518083038186803b158015610efc57600080fd5b505afa158015610f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f34919061173c565b6001600160a01b031691906113ed565b610f4d82611411565b50505b50505050565b60055481565b6000546001600160a01b031681565b60026020528160005260406000208181548110610f8757600080fd5b60009182526020909120600290910201805460019091015490925060ff80821692506101009091041683565b60045481565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890611009907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611059919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b81526004016110a6929190611979565b60006040518083038186803b1580156110be57600080fd5b505afa1580156110d2573d6000803e3d6000fd5b5050506000858152600260208181526040808420815160608101835289815288151581850190815288151582850190815283546001818101865594895295909720915194909502019283559251919092018054935115156101000261ff001992151560ff19909516949094179190911692909217909155517f880fd3397515485fabc2f3d44892d2dabbc45bc79a356562afe1b34f1301a870915061117c908690869085906119a0565b60405180910390a150505050565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d98906111da907f15fa0125f52e5705da1148bfcf00974823c4381bee4314203ede255f9477b73e90600401611970565b60206040518083038186803b1580156111f257600080fd5b505afa158015611206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122a919061173c565b6001600160a01b031663d09a20c57fd0a4ad96d49edb1c33461cebc6fb2609190f32c904e3c3f5877edb4488dee91e336040518363ffffffff1660e01b8152600401611277929190611979565b60006040518083038186803b15801561128f57600080fd5b505afa1580156112a3573d6000803e3d6000fd5b505050600086815260026020526040812080549192509060ff87169081106112db57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201805460018201805487845585151561010090810261ff001989151560ff198516171617909255604051939450919260ff9190920416907f248e6a6ffe6039c6908db49d17064442179a7e2854e33d9f55c7eaacdde06b2390611356908a9085908a9086908a906119b8565b60405180910390a15050505050505050565b610f50846323b872dd60e01b85858560405160240161138993929190611933565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611580565b61140c8363a9059cbb60e01b8484604051602401611389929190611957565b505050565b600054604051631c2d8fb360e31b81526001600160a01b039091169063e16c7d9890611461907f69e547947a4514871bf84679401f91758bd0fe92e4c005143f6d0e5213dab0cb90600401611970565b60206040518083038186803b15801561147957600080fd5b505afa15801561148d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b1919061173c565b6001600160a01b031663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016114fe929190611957565b602060405180830381600087803b15801561151857600080fd5b505af115801561152c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115509190611758565b507fd83c63197e8e676d80ab0122beba9a9d20f3828839e9a1d6fe81d242e9cd7e6e816040516103369190611970565b60006115d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661160f9092919063ffffffff16565b80519091501561140c57808060200190518101906115f39190611758565b61140c5760405162461bcd60e51b8152600401610b4890611b03565b606061161e8484600085611628565b90505b9392505050565b60608247101561164a5760405162461bcd60e51b8152600401610b4890611a12565b611653856116e8565b61166f5760405162461bcd60e51b8152600401610b4890611acc565b600080866001600160a01b0316858760405161168b9190611903565b60006040518083038185875af1925050503d80600081146116c8576040519150601f19603f3d011682016040523d82523d6000602084013e6116cd565b606091505b50915091506116dd8282866116f2565b979650505050505050565b803b15155b919050565b60608315611701575081611621565b8251156117115782518084602001fd5b8160405162461bcd60e51b8152600401610b4891906119df565b803560ff811681146116ed57600080fd5b60006020828403121561174d578081fd5b815161162181611c6d565b600060208284031215611769578081fd5b815161162181611c85565b600060208284031215611785578081fd5b5035919050565b6000806040838503121561179e578081fd5b8235915060208301356117b081611c6d565b809150509250929050565b600080604083850312156117cd578182fd5b50508035926020909101359150565b600080600080608085870312156117f1578182fd5b8435935060208501359250604085013561180a81611c85565b9150606085013561181a81611c85565b939692955090935050565b60008060408385031215611837578182fd5b823591506118476020840161172b565b90509250929050565b600080600060608486031215611864578283fd5b833592506118746020850161172b565b9150604084013561188481611c6d565b809150509250925092565b600080600080600060a086880312156118a6578081fd5b853594506118b66020870161172b565b93506040860135925060608601356118cd81611c85565b915060808601356118dd81611c85565b809150509295509295909350565b6000602082840312156118fc578081fd5b5051919050565b60008251611915818460208701611c2b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9182521515602082015260400190565b92835260208301919091521515604082015260600190565b94855260208501939093526040840191909152151560608301521515608082015260a00190565b60006020825282518060208401526119fe816040850160208701611c2b565b601f01601f19169190910160400192915050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f43616e206f6e6c792062652063616c6c65642062792074686520636f6e74726f60408201527f6c6c696e6720636f6e7472616374000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f6e6f7420656e6f75676820706f70206174207374616b65000000000000000000604082015260600190565b92835290151560208301521515604082015260600190565b918252602082015260400190565b60008219821115611bd057611bd0611c57565b500190565b600082611bf057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611c0f57611c0f611c57565b500290565b600082821015611c2657611c26611c57565b500390565b60005b83811015611c46578181015183820152602001611c2e565b83811115610f505750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611c8257600080fd5b50565b8015158114611c8257600080fdfea26469706673582212207acbfc4974841220f1a2aa2fcb9c9180ca8cc5a2382c4fc79ba1404c2436782264736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addControllerContract(bytes32,address)": {
        "details": "all critical functions to init/open vaults and add shares to them can only be called by controller contracts",
        "params": {
          "_contractName": "the name of the controller contract in bytes32",
          "contract_": "the address of the controller contract"
        }
      },
      "createIncentive(bytes32,uint256,bool,bool)": {
        "details": "This function is only for creating unique incentives for future contractsMultiple functions can use the same incentive which can than be updated with one governance vote",
        "params": {
          "_contractName": "Name of contract that uses ParticipationRewards in bytes32",
          "_enabled": "Is this Incentive currently enabled?",
          "_openToEveryone": "Can anyone call the function for rewards or only keeper?",
          "_reward": "The amount in POP the Keeper receives for calling the function"
        }
      },
      "updateBurnRate(uint256)": {
        "params": {
          "_burnRate": "Percentage in Mantissa. (1e14 = 1 Basis Point)"
        }
      },
      "updateRequiredKeeperStake(uint256)": {
        "params": {
          "_amount": "Amount of POP a keeper needs to stake"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addControllerContract(bytes32,address)": {
        "notice": "In order to allow a contract to use ParticipationReward they need to be added as a controller contract"
      },
      "createIncentive(bytes32,uint256,bool,bool)": {
        "notice": "Create Incentives for keeper to call a function"
      },
      "updateBurnRate(uint256)": {
        "notice": "Sets the current burn rate as a percentage of the incentive reward."
      },
      "updateRequiredKeeperStake(uint256)": {
        "notice": "Sets the required amount of POP a keeper needs to have staked to handle incentivized functions."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6379,
        "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IContractRegistry)5395"
      },
      {
        "astId": 6381,
        "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
        "label": "incentiveBudget",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6387,
        "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
        "label": "incentives",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_array(t_struct(Incentive)6376_storage)dyn_storage)"
      },
      {
        "astId": 6391,
        "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
        "label": "controllerContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 6393,
        "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
        "label": "burnRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6398,
        "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
        "label": "requiredKeeperStake",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Incentive)6376_storage)dyn_storage": {
        "base": "t_struct(Incentive)6376_storage",
        "encoding": "dynamic_array",
        "label": "struct KeeperIncentive.Incentive[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IContractRegistry)5395": {
        "encoding": "inplace",
        "label": "contract IContractRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_array(t_struct(Incentive)6376_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct KeeperIncentive.Incentive[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Incentive)6376_storage)dyn_storage"
      },
      "t_struct(Incentive)6376_storage": {
        "encoding": "inplace",
        "label": "struct KeeperIncentive.Incentive",
        "members": [
          {
            "astId": 6371,
            "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
            "label": "reward",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6373,
            "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
            "label": "enabled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6375,
            "contract": "contracts/core/utils/KeeperIncentive.sol:KeeperIncentive",
            "label": "openToEveryone",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}