{
  "address": "0x720472c8ce72c2A2D711333e064ABD3E6BbEAdd3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_pop",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "AddStaking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "escrowDuration",
          "type": "uint256"
        }
      ],
      "name": "EscrowDurationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "RemoveStaking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POP",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "addStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_escrowId",
          "type": "bytes32"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_escrowIdsByAddress",
          "type": "bytes32[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "escrowIdsByAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "escrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getEscrowIdsByUser",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_escrowIds",
          "type": "bytes32[]"
        }
      ],
      "name": "getEscrows",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "internalType": "struct RewardsEscrow.Escrow[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_escrowId",
          "type": "bytes32"
        }
      ],
      "name": "isClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "removeStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "staking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_escrowDuration",
          "type": "uint256"
        }
      ],
      "name": "updateEscrowDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde28cd0933c50d061936b149fb88557af0e874ad6c83899499cdebb0b5bb89d1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x720472c8ce72c2A2D711333e064ABD3E6BbEAdd3",
    "transactionIndex": 0,
    "gasUsed": "1419069",
    "logsBloom": "0x
    "blockHash": "0xbbbb28a668f76c1fba9b4a4104056079af78e4242c8748dca848217222d61c7c",
    "transactionHash": "0xde28cd0933c50d061936b149fb88557af0e874ad6c83899499cdebb0b5bb89d1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13739682,
        "transactionHash": "0xde28cd0933c50d061936b149fb88557af0e874ad6c83899499cdebb0b5bb89d1",
        "address": "0x720472c8ce72c2A2D711333e064ABD3E6BbEAdd3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbbbb28a668f76c1fba9b4a4104056079af78e4242c8748dca848217222d61c7c"
      }
    ],
    "blockNumber": 13739682,
    "cumulativeGasUsed": "1419069",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf953b3A269d80e3eB0F2947630Da976B896A8C5b"
  ],
  "solcInputHash": "31fd7e5d3f14650b4d0b908e90e5bd82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_pop\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"AddStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"escrowDuration\",\"type\":\"uint256\"}],\"name\":\"EscrowDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"RemoveStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"addStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_escrowIdsByAddress\",\"type\":\"bytes32[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowIdsByAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getEscrowIdsByUser\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_escrowIds\",\"type\":\"bytes32[]\"}],\"name\":\"getEscrows\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct RewardsEscrow.Escrow[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"removeStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_escrowDuration\",\"type\":\"uint256\"}],\"name\":\"updateEscrowDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(bytes32)\":{\"details\":\"Uses the escrowId at the specified index of escrowIdsByAddress.This function is used when a user only wants to claim a specific escrowVault or if they decide the gas cost of claimRewards is too high for now.(lower cost but also lower reward)\"},\"claimRewards(bytes32[])\":{\"details\":\"Uses the vaultIds at the specified indices of escrowIdsByAddress.This function is used when a user wants to claim multiple escrowVaults at once (probably most of the time)The array of indices is limited to 20 as we want to prevent gas overflow of looping through too many vaults TODO the upper bound of indices that can be used should be calculated with a simulation\"},\"getEscrowIdsByUser(address)\":{\"params\":{\"_account\":\"address\"}},\"getEscrows(bytes32[])\":{\"details\":\"there is no check to ensure that all escrows are owned by the same account. Make sure to account for this either by only sending ids for a specific account or by filtering the Escrows by account later on.\",\"params\":{\"_escrowIds\":\"array of escrow ids\"}},\"isClaimable(bytes32)\":{\"params\":{\"_escrowId\":\"Bytes32 escrow ID\"}},\"lock(address,uint256)\":{\"details\":\"This creates a separate escrow structure which can later be iterated upon to unlock the escrowed funds\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimReward(bytes32)\":{\"notice\":\"Claim vested funds in escrow\"},\"claimRewards(bytes32[])\":{\"notice\":\"Claim rewards for multiple escrows\"},\"getEscrowIdsByUser(address)\":{\"notice\":\"Returns all escrowIdsByAddress which an account has/had claims in\"},\"getEscrows(bytes32[])\":{\"notice\":\"Returns an array of Escrows\"},\"isClaimable(bytes32)\":{\"notice\":\"Returns whether the escrow is claimable\"},\"lock(address,uint256)\":{\"notice\":\"Locks funds for escrow\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/dao/RewardsEscrow.sol\":\"RewardsEscrow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xe936fc79332de2ca7b1c06a70f81345aa2466958aab00f463e312ca0585e85cf\",\"license\":\"MIT\"},\"contracts/core/dao/RewardsEscrow.sol\":{\"content\":\"// Docgen-SOLC: 0.8.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/IRewardsEscrow.sol\\\";\\n\\ncontract RewardsEscrow is IRewardsEscrow, ReentrancyGuard, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n  struct Escrow {\\n    uint256 start;\\n    uint256 end;\\n    uint256 balance;\\n    address account;\\n  }\\n\\n  IERC20 public immutable POP;\\n  mapping(address => bool) public staking;\\n  mapping(bytes32 => Escrow) public escrows;\\n  mapping(address => bytes32[]) public escrowIdsByAddress;\\n  uint256 public escrowDuration = 365 days;\\n  uint256 internal nonce;\\n\\n  /* ========== EVENTS ========== */\\n  event Locked(address account, uint256 amount);\\n  event RewardsClaimed(address account, uint256 amount);\\n  event EscrowDurationChanged(uint256 escrowDuration);\\n  event TokenAdded(address token, uint256 index);\\n  event AddStaking(address _contract);\\n  event RemoveStaking(address _contract);\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(IERC20 _pop) {\\n    POP = _pop;\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  /**\\n   * @notice Returns whether the escrow is claimable\\n   * @param _escrowId Bytes32 escrow ID\\n   */\\n  function isClaimable(bytes32 _escrowId) external view returns (bool) {\\n    return escrows[_escrowId].start != 0 && escrows[_escrowId].balance > 0;\\n  }\\n\\n  /**\\n   * @notice Returns all escrowIdsByAddress which an account has/had claims in\\n   * @param _account address\\n   */\\n  function getEscrowIdsByUser(address _account) external view returns (bytes32[] memory) {\\n    return escrowIdsByAddress[_account];\\n  }\\n\\n  /**\\n   * @notice Returns an array of Escrows\\n   * @param _escrowIds array of escrow ids\\n   * @dev there is no check to ensure that all escrows are owned by the same account. Make sure to account for this either by only sending ids for a specific account or by filtering the Escrows by account later on.\\n   */\\n  function getEscrows(bytes32[] calldata _escrowIds) external view returns (Escrow[] memory) {\\n    require(_escrowIds.length <= 20, \\\"too many ids\\\");\\n\\n    Escrow[] memory selectedEscrows = new Escrow[](_escrowIds.length);\\n    for (uint256 i = 0; i < _escrowIds.length; i++) {\\n      selectedEscrows[i] = escrows[_escrowIds[i]];\\n    }\\n    return selectedEscrows;\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * @notice Locks funds for escrow\\n   * @dev This creates a separate escrow structure which can later be iterated upon to unlock the escrowed funds\\n   */\\n  function lock(address _account, uint256 _amount) external override nonReentrant {\\n    require(staking[msg.sender], \\\"unauthorized\\\");\\n    require(_amount > 0, \\\"amount must be greater than 0\\\");\\n    require(POP.balanceOf(msg.sender) >= _amount, \\\"insufficient balance\\\");\\n\\n    nonce++;\\n    uint256 start = block.timestamp;\\n    uint256 end = start + escrowDuration;\\n    bytes32 id = keccak256(abi.encodePacked(_account, _amount, start, nonce));\\n\\n    escrows[id] = Escrow({start: start, end: end, balance: _amount, account: _account});\\n    escrowIdsByAddress[_account].push(id);\\n\\n    POP.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    emit Locked(_account, _amount);\\n  }\\n\\n  /**\\n   * @notice Claim vested funds in escrow\\n   * @dev Uses the escrowId at the specified index of escrowIdsByAddress.\\n   * @dev This function is used when a user only wants to claim a specific escrowVault or if they decide the gas cost of claimRewards is too high for now.\\n   * @dev (lower cost but also lower reward)\\n   */\\n  function claimReward(bytes32 _escrowId) external nonReentrant {\\n    Escrow memory escrow = escrows[_escrowId];\\n    require(msg.sender == escrow.account, \\\"unauthorized\\\");\\n    uint256 reward = _claimReward(_escrowId);\\n    require(reward > 0, \\\"no rewards\\\");\\n\\n    POP.safeTransfer(msg.sender, reward);\\n\\n    emit RewardsClaimed(msg.sender, reward);\\n  }\\n\\n  /**\\n   * @notice Claim rewards for multiple escrows\\n   * @dev Uses the vaultIds at the specified indices of escrowIdsByAddress.\\n   * @dev This function is used when a user wants to claim multiple escrowVaults at once (probably most of the time)\\n   * @dev The array of indices is limited to 20 as we want to prevent gas overflow of looping through too many vaults\\n   * TODO the upper bound of indices that can be used should be calculated with a simulation\\n   */\\n  function claimRewards(bytes32[] calldata _escrowIdsByAddress) external nonReentrant {\\n    require(_escrowIdsByAddress.length <= 20, \\\"claiming too many escrows\\\");\\n    uint256 total;\\n\\n    for (uint256 i = 0; i < _escrowIdsByAddress.length; i++) {\\n      bytes32 _escrowId = _escrowIdsByAddress[i];\\n      Escrow memory escrow = escrows[_escrowId];\\n      require(msg.sender == escrow.account, \\\"unauthorized\\\");\\n      uint256 reward = _claimReward(_escrowId);\\n      total += reward;\\n    }\\n    require(total > 0, \\\"no rewards\\\");\\n\\n    POP.safeTransfer(msg.sender, total);\\n\\n    emit RewardsClaimed(msg.sender, total);\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function updateEscrowDuration(uint256 _escrowDuration) external onlyOwner {\\n    escrowDuration = _escrowDuration;\\n    emit EscrowDurationChanged(_escrowDuration);\\n  }\\n\\n  function addStakingContract(address _staking) external onlyOwner {\\n    staking[_staking] = true;\\n    emit AddStaking(_staking);\\n  }\\n\\n  function removeStakingContract(address _staking) external onlyOwner {\\n    delete staking[_staking];\\n    emit RemoveStaking(_staking);\\n  }\\n\\n  /**\\n   * @notice Underlying function to calculate the rewards that a user gets\\n   * @dev We dont want it to error when a vault is empty for the user as this would terminate the entire loop when used in claimRewards()\\n   */\\n  function _claimReward(bytes32 _escrowId) internal returns (uint256) {\\n    Escrow storage escrow = escrows[_escrowId];\\n    if (escrow.start <= block.timestamp) {\\n      uint256 claimable = _getClaimableAmount(escrow);\\n      escrow.balance -= claimable;\\n      return claimable;\\n    }\\n    return 0;\\n  }\\n\\n  function _getClaimableAmount(Escrow memory _escrow) internal view returns (uint256) {\\n    if (_escrow.start == 0 || _escrow.end == 0) {\\n      return 0;\\n    }\\n    return\\n      Math.min((_escrow.balance * (block.timestamp - _escrow.start)) / (_escrow.end - _escrow.start), _escrow.balance);\\n  }\\n}\\n\",\"keccak256\":\"0x107610c7f4e74482f26746351f34c2779580054411035b4c42ef84ed3e326321\"},\"contracts/core/interfaces/IRewardsEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsEscrow {\\n  function lock(address _address, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x809501ca26ed07a09aef037d472b6531b79fd1fd2cf3b6e684272615cdac9f0b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStaking {\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function stake(uint256 amount, uint256 lengthOfTime) external;\\n\\n  function stakeFor(\\n    address account,\\n    uint256 amount,\\n    uint256 lengthOfTime\\n  ) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getVoiceCredits(address _address) external view returns (uint256);\\n\\n  function getWithdrawableBalance(address _address) external view returns (uint256);\\n\\n  function notifyRewardAmount(uint256 reward) external;\\n}\\n\",\"keccak256\":\"0x1eeec7236e6ba1a53b2b0d2094bdc05295c84ab7f0697b432787da181ca05219\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526301e133806005553480156200001957600080fd5b506040516200189b3803806200189b8339810160408190526200003c91620000c1565b6001600055620000556200004f6200006b565b6200006f565b60601b6001600160601b031916608052620000f1565b3390565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215620000d3578081fd5b81516001600160a01b0381168114620000ea578182fd5b9392505050565b60805160601c61177662000125600039600081816103e301528181610647015281816107de01526108ba01526117766000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80638da5cb5b116100b2578063e35c9b4411610081578063f0dc2c2011610066578063f0dc2c201461025a578063f2fde38b1461026d578063f5414023146102805761011b565b8063e35c9b4414610234578063e8a7bf91146102475761011b565b80638da5cb5b146101e6578063a327df75146101ee578063bff7309f1461020e578063d764b78f146102215761011b565b8063455f468f116100ee578063455f468f1461019457806357c2c2ba146101b45780636c660b01146101c9578063715018a6146101de5761011b565b80630f3c34d11461012057806312b310e414610135578063282d3fdf1461015e5780632d83549c14610171575b600080fd5b61013361012e3660046110fa565b610293565b005b6101486101433660046110fa565b61044d565b6040516101559190611299565b60405180910390f35b61013361016c3660046110d1565b61059e565b61018461017f366004611189565b61084b565b6040516101559493929190611651565b6101a76101a2366004611189565b61087d565b6040516101559190611306565b6101bc6108b2565b6040516101559190611311565b6101d16108b8565b6040516101559190611204565b6101336108dc565b6101d1610927565b6102016101fc3660046110b7565b610936565b6040516101559190611255565b6101bc61021c3660046110d1565b6109a2565b6101a761022f3660046110b7565b6109d3565b6101336102423660046110b7565b6109e8565b610133610255366004611189565b610a82565b6101336102683660046110b7565b610af6565b61013361027b3660046110b7565b610b88565b61013361028e366004611189565b610bf9565b600260005414156102bf5760405162461bcd60e51b81526004016102b6906115e3565b60405180910390fd5b600260005560148111156102e55760405162461bcd60e51b81526004016102b69061161a565b6000805b828110156103b557600084848381811061031357634e487b7160e01b600052603260045260246000fd5b602090810292909201356000818152600380855260409182902082516080810184528154815260018201549681019690965260028101549286019290925201546001600160a01b031660608401819052909350331490506103865760405162461bcd60e51b81526004016102b690611475565b600061039183610cb6565b905061039d8186611675565b945050505080806103ad9061170f565b9150506102e9565b50600081116103d65760405162461bcd60e51b81526004016102b690611407565b61040a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610d3d565b7ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe338260405161043b92919061123c565b60405180910390a15050600160005550565b606060148211156104705760405162461bcd60e51b81526004016102b69061154f565b60008267ffffffffffffffff81111561049957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104d257816020015b6104bf61106f565b8152602001906001900390816104b75790505b50905060005b83811015610596576003600086868481811061050457634e487b7160e01b600052603260045260246000fd5b60209081029290920135835250818101929092526040908101600020815160808101835281548152600182015493810193909352600281015491830191909152600301546001600160a01b03166060820152825183908390811061057857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061058e9061170f565b9150506104d8565b509392505050565b600260005414156105c15760405162461bcd60e51b81526004016102b6906115e3565b60026000818155338152602091909152604090205460ff166105f55760405162461bcd60e51b81526004016102b690611475565b600081116106155760405162461bcd60e51b81526004016102b69061143e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061067c903390600401611204565b60206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc91906111a1565b10156106ea5760405162461bcd60e51b81526004016102b6906114e1565b600680549060006106fa8361170f565b909155505060055442906000906107119083611675565b9050600084848460065460405160200161072e94939291906111b9565b60408051808303601f1901815282825280516020918201206080840183528684528184018681528484018981526001600160a01b038b811660608801818152600086815260038089528982209a518b5595516001808c0191909155945160028b0155905198909401805473ffffffffffffffffffffffffffffffffffffffff19169883169890981790975595825260048452938120805494850181558152919091209091018190559150610806907f000000000000000000000000000000000000000000000000000000000000000016333087610dc5565b7f9f1ec8c880f76798e7b793325d625e9b60e4082a553c98f42b6cda368dd60008858560405161083792919061123c565b60405180910390a150506001600055505050565b60036020819052600091825260409091208054600182015460028301549290930154909291906001600160a01b031684565b600081815260036020526040812054158015906108aa575060008281526003602052604090206002015415155b90505b919050565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108e4610dec565b6001600160a01b03166108f5610927565b6001600160a01b03161461091b5760405162461bcd60e51b81526004016102b6906114ac565b6109256000610df0565b565b6001546001600160a01b031690565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561099657602002820191906000526020600020905b815481526020019060010190808311610982575b50505050509050919050565b600460205281600052604060002081815481106109be57600080fd5b90600052602060002001600091509150505481565b60026020526000908152604090205460ff1681565b6109f0610dec565b6001600160a01b0316610a01610927565b6001600160a01b031614610a275760405162461bcd60e51b81526004016102b6906114ac565b6001600160a01b03811660009081526002602052604090819020805460ff19169055517f752eed3ce65b2ce43f311706c3ce8dd03ed5cb4f3091c0cd1d54a782ae46152990610a77908390611204565b60405180910390a150565b610a8a610dec565b6001600160a01b0316610a9b610927565b6001600160a01b031614610ac15760405162461bcd60e51b81526004016102b6906114ac565b60058190556040517facb2ab6d02fafbae9aab5b75beb76be199b67e646a65ac2fb423dbb97fface6d90610a77908390611311565b610afe610dec565b6001600160a01b0316610b0f610927565b6001600160a01b031614610b355760405162461bcd60e51b81526004016102b6906114ac565b6001600160a01b03811660009081526002602052604090819020805460ff19166001179055517fc1f5c3ce008b83e15734d6ffe4c7aa5f21ffcdfef7af0f0f040d0bbbcfcd1e1a90610a77908390611204565b610b90610dec565b6001600160a01b0316610ba1610927565b6001600160a01b031614610bc75760405162461bcd60e51b81526004016102b6906114ac565b6001600160a01b038116610bed5760405162461bcd60e51b81526004016102b69061134d565b610bf681610df0565b50565b60026000541415610c1c5760405162461bcd60e51b81526004016102b6906115e3565b6002600081815582815260036020818152604092839020835160808101855281548152600182015492810192909252938401549281019290925291909101546001600160a01b0316606082018190523314610c895760405162461bcd60e51b81526004016102b690611475565b6000610c9483610cb6565b9050600081116103d65760405162461bcd60e51b81526004016102b690611407565b600081815260036020526040812080544210610d345760408051608081018252825481526001830154602082015260028301549181019190915260038201546001600160a01b03166060820152600090610d0f90610e4f565b905080826002016000828254610d2591906116cc565b909155509092506108ad915050565b50600092915050565b610dc08363a9059cbb60e01b8484604051602401610d5c92919061123c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610eb2565b505050565b610de6846323b872dd60e01b858585604051602401610d5c93929190611218565b50505050565b3390565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516000901580610e6257506020820151155b15610e6f575060006108ad565b815160208301516108aa91610e83916116cc565b8351610e8f90426116cc565b8460400151610e9e91906116ad565b610ea8919061168d565b8360400151610f41565b6000610f07826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f599092919063ffffffff16565b805190915015610dc05780806020019051810190610f259190611169565b610dc05760405162461bcd60e51b81526004016102b690611586565b6000818310610f505781610f52565b825b9392505050565b6060610f688484600085610f70565b949350505050565b606082471015610f925760405162461bcd60e51b81526004016102b6906113aa565b610f9b85611030565b610fb75760405162461bcd60e51b81526004016102b690611518565b600080866001600160a01b03168587604051610fd391906111e8565b60006040518083038185875af1925050503d8060008114611010576040519150601f19603f3d011682016040523d82523d6000602084013e611015565b606091505b5091509150611025828286611036565b979650505050505050565b3b151590565b60608315611045575081610f52565b8251156110555782518084602001fd5b8160405162461bcd60e51b81526004016102b6919061131a565b604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b80356001600160a01b03811681146108ad57600080fd5b6000602082840312156110c8578081fd5b610f52826110a0565b600080604083850312156110e3578081fd5b6110ec836110a0565b946020939093013593505050565b6000806020838503121561110c578182fd5b823567ffffffffffffffff80821115611123578384fd5b818501915085601f830112611136578384fd5b813581811115611144578485fd5b8660208083028501011115611157578485fd5b60209290920196919550909350505050565b60006020828403121561117a578081fd5b81518015158114610f52578182fd5b60006020828403121561119a578081fd5b5035919050565b6000602082840312156111b2578081fd5b5051919050565b60609490941b6bffffffffffffffffffffffff1916845260148401929092526034830152605482015260740190565b600082516111fa8184602087016116e3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561128d57835183529284019291840191600101611271565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156112f957815180518552868101518786015285810151868601526060908101516001600160a01b031690850152608090930192908501906001016112b6565b5091979650505050505050565b901515815260200190565b90815260200190565b60006020825282518060208401526113398160408501602087016116e3565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f6e6f207265776172647300000000000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b6020808252600c908201527f756e617574686f72697a65640000000000000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527f696e73756666696369656e742062616c616e6365000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252600c908201527f746f6f206d616e79206964730000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526019908201527f636c61696d696e6720746f6f206d616e7920657363726f777300000000000000604082015260600190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b600082198211156116885761168861172a565b500190565b6000826116a857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156116c7576116c761172a565b500290565b6000828210156116de576116de61172a565b500390565b60005b838110156116fe5781810151838201526020016116e6565b83811115610de65750506000910152565b60006000198214156117235761172361172a565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220330018cd262b87474cb89e08e114b5fe6e987057ad904c904b20c25178f5ceee64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80638da5cb5b116100b2578063e35c9b4411610081578063f0dc2c2011610066578063f0dc2c201461025a578063f2fde38b1461026d578063f5414023146102805761011b565b8063e35c9b4414610234578063e8a7bf91146102475761011b565b80638da5cb5b146101e6578063a327df75146101ee578063bff7309f1461020e578063d764b78f146102215761011b565b8063455f468f116100ee578063455f468f1461019457806357c2c2ba146101b45780636c660b01146101c9578063715018a6146101de5761011b565b80630f3c34d11461012057806312b310e414610135578063282d3fdf1461015e5780632d83549c14610171575b600080fd5b61013361012e3660046110fa565b610293565b005b6101486101433660046110fa565b61044d565b6040516101559190611299565b60405180910390f35b61013361016c3660046110d1565b61059e565b61018461017f366004611189565b61084b565b6040516101559493929190611651565b6101a76101a2366004611189565b61087d565b6040516101559190611306565b6101bc6108b2565b6040516101559190611311565b6101d16108b8565b6040516101559190611204565b6101336108dc565b6101d1610927565b6102016101fc3660046110b7565b610936565b6040516101559190611255565b6101bc61021c3660046110d1565b6109a2565b6101a761022f3660046110b7565b6109d3565b6101336102423660046110b7565b6109e8565b610133610255366004611189565b610a82565b6101336102683660046110b7565b610af6565b61013361027b3660046110b7565b610b88565b61013361028e366004611189565b610bf9565b600260005414156102bf5760405162461bcd60e51b81526004016102b6906115e3565b60405180910390fd5b600260005560148111156102e55760405162461bcd60e51b81526004016102b69061161a565b6000805b828110156103b557600084848381811061031357634e487b7160e01b600052603260045260246000fd5b602090810292909201356000818152600380855260409182902082516080810184528154815260018201549681019690965260028101549286019290925201546001600160a01b031660608401819052909350331490506103865760405162461bcd60e51b81526004016102b690611475565b600061039183610cb6565b905061039d8186611675565b945050505080806103ad9061170f565b9150506102e9565b50600081116103d65760405162461bcd60e51b81526004016102b690611407565b61040a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610d3d565b7ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe338260405161043b92919061123c565b60405180910390a15050600160005550565b606060148211156104705760405162461bcd60e51b81526004016102b69061154f565b60008267ffffffffffffffff81111561049957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104d257816020015b6104bf61106f565b8152602001906001900390816104b75790505b50905060005b83811015610596576003600086868481811061050457634e487b7160e01b600052603260045260246000fd5b60209081029290920135835250818101929092526040908101600020815160808101835281548152600182015493810193909352600281015491830191909152600301546001600160a01b03166060820152825183908390811061057857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061058e9061170f565b9150506104d8565b509392505050565b600260005414156105c15760405162461bcd60e51b81526004016102b6906115e3565b60026000818155338152602091909152604090205460ff166105f55760405162461bcd60e51b81526004016102b690611475565b600081116106155760405162461bcd60e51b81526004016102b69061143e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061067c903390600401611204565b60206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc91906111a1565b10156106ea5760405162461bcd60e51b81526004016102b6906114e1565b600680549060006106fa8361170f565b909155505060055442906000906107119083611675565b9050600084848460065460405160200161072e94939291906111b9565b60408051808303601f1901815282825280516020918201206080840183528684528184018681528484018981526001600160a01b038b811660608801818152600086815260038089528982209a518b5595516001808c0191909155945160028b0155905198909401805473ffffffffffffffffffffffffffffffffffffffff19169883169890981790975595825260048452938120805494850181558152919091209091018190559150610806907f000000000000000000000000000000000000000000000000000000000000000016333087610dc5565b7f9f1ec8c880f76798e7b793325d625e9b60e4082a553c98f42b6cda368dd60008858560405161083792919061123c565b60405180910390a150506001600055505050565b60036020819052600091825260409091208054600182015460028301549290930154909291906001600160a01b031684565b600081815260036020526040812054158015906108aa575060008281526003602052604090206002015415155b90505b919050565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108e4610dec565b6001600160a01b03166108f5610927565b6001600160a01b03161461091b5760405162461bcd60e51b81526004016102b6906114ac565b6109256000610df0565b565b6001546001600160a01b031690565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561099657602002820191906000526020600020905b815481526020019060010190808311610982575b50505050509050919050565b600460205281600052604060002081815481106109be57600080fd5b90600052602060002001600091509150505481565b60026020526000908152604090205460ff1681565b6109f0610dec565b6001600160a01b0316610a01610927565b6001600160a01b031614610a275760405162461bcd60e51b81526004016102b6906114ac565b6001600160a01b03811660009081526002602052604090819020805460ff19169055517f752eed3ce65b2ce43f311706c3ce8dd03ed5cb4f3091c0cd1d54a782ae46152990610a77908390611204565b60405180910390a150565b610a8a610dec565b6001600160a01b0316610a9b610927565b6001600160a01b031614610ac15760405162461bcd60e51b81526004016102b6906114ac565b60058190556040517facb2ab6d02fafbae9aab5b75beb76be199b67e646a65ac2fb423dbb97fface6d90610a77908390611311565b610afe610dec565b6001600160a01b0316610b0f610927565b6001600160a01b031614610b355760405162461bcd60e51b81526004016102b6906114ac565b6001600160a01b03811660009081526002602052604090819020805460ff19166001179055517fc1f5c3ce008b83e15734d6ffe4c7aa5f21ffcdfef7af0f0f040d0bbbcfcd1e1a90610a77908390611204565b610b90610dec565b6001600160a01b0316610ba1610927565b6001600160a01b031614610bc75760405162461bcd60e51b81526004016102b6906114ac565b6001600160a01b038116610bed5760405162461bcd60e51b81526004016102b69061134d565b610bf681610df0565b50565b60026000541415610c1c5760405162461bcd60e51b81526004016102b6906115e3565b6002600081815582815260036020818152604092839020835160808101855281548152600182015492810192909252938401549281019290925291909101546001600160a01b0316606082018190523314610c895760405162461bcd60e51b81526004016102b690611475565b6000610c9483610cb6565b9050600081116103d65760405162461bcd60e51b81526004016102b690611407565b600081815260036020526040812080544210610d345760408051608081018252825481526001830154602082015260028301549181019190915260038201546001600160a01b03166060820152600090610d0f90610e4f565b905080826002016000828254610d2591906116cc565b909155509092506108ad915050565b50600092915050565b610dc08363a9059cbb60e01b8484604051602401610d5c92919061123c565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610eb2565b505050565b610de6846323b872dd60e01b858585604051602401610d5c93929190611218565b50505050565b3390565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516000901580610e6257506020820151155b15610e6f575060006108ad565b815160208301516108aa91610e83916116cc565b8351610e8f90426116cc565b8460400151610e9e91906116ad565b610ea8919061168d565b8360400151610f41565b6000610f07826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f599092919063ffffffff16565b805190915015610dc05780806020019051810190610f259190611169565b610dc05760405162461bcd60e51b81526004016102b690611586565b6000818310610f505781610f52565b825b9392505050565b6060610f688484600085610f70565b949350505050565b606082471015610f925760405162461bcd60e51b81526004016102b6906113aa565b610f9b85611030565b610fb75760405162461bcd60e51b81526004016102b690611518565b600080866001600160a01b03168587604051610fd391906111e8565b60006040518083038185875af1925050503d8060008114611010576040519150601f19603f3d011682016040523d82523d6000602084013e611015565b606091505b5091509150611025828286611036565b979650505050505050565b3b151590565b60608315611045575081610f52565b8251156110555782518084602001fd5b8160405162461bcd60e51b81526004016102b6919061131a565b604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b80356001600160a01b03811681146108ad57600080fd5b6000602082840312156110c8578081fd5b610f52826110a0565b600080604083850312156110e3578081fd5b6110ec836110a0565b946020939093013593505050565b6000806020838503121561110c578182fd5b823567ffffffffffffffff80821115611123578384fd5b818501915085601f830112611136578384fd5b813581811115611144578485fd5b8660208083028501011115611157578485fd5b60209290920196919550909350505050565b60006020828403121561117a578081fd5b81518015158114610f52578182fd5b60006020828403121561119a578081fd5b5035919050565b6000602082840312156111b2578081fd5b5051919050565b60609490941b6bffffffffffffffffffffffff1916845260148401929092526034830152605482015260740190565b600082516111fa8184602087016116e3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561128d57835183529284019291840191600101611271565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156112f957815180518552868101518786015285810151868601526060908101516001600160a01b031690850152608090930192908501906001016112b6565b5091979650505050505050565b901515815260200190565b90815260200190565b60006020825282518060208401526113398160408501602087016116e3565b601f01601f19169190910160400192915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f6e6f207265776172647300000000000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f616d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b6020808252600c908201527f756e617574686f72697a65640000000000000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527f696e73756666696369656e742062616c616e6365000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252600c908201527f746f6f206d616e79206964730000000000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526019908201527f636c61696d696e6720746f6f206d616e7920657363726f777300000000000000604082015260600190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b600082198211156116885761168861172a565b500190565b6000826116a857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156116c7576116c761172a565b500290565b6000828210156116de576116de61172a565b500390565b60005b838110156116fe5781810151838201526020016116e6565b83811115610de65750506000910152565b60006000198214156117235761172361172a565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220330018cd262b87474cb89e08e114b5fe6e987057ad904c904b20c25178f5ceee64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimReward(bytes32)": {
        "details": "Uses the escrowId at the specified index of escrowIdsByAddress.This function is used when a user only wants to claim a specific escrowVault or if they decide the gas cost of claimRewards is too high for now.(lower cost but also lower reward)"
      },
      "claimRewards(bytes32[])": {
        "details": "Uses the vaultIds at the specified indices of escrowIdsByAddress.This function is used when a user wants to claim multiple escrowVaults at once (probably most of the time)The array of indices is limited to 20 as we want to prevent gas overflow of looping through too many vaults TODO the upper bound of indices that can be used should be calculated with a simulation"
      },
      "getEscrowIdsByUser(address)": {
        "params": {
          "_account": "address"
        }
      },
      "getEscrows(bytes32[])": {
        "details": "there is no check to ensure that all escrows are owned by the same account. Make sure to account for this either by only sending ids for a specific account or by filtering the Escrows by account later on.",
        "params": {
          "_escrowIds": "array of escrow ids"
        }
      },
      "isClaimable(bytes32)": {
        "params": {
          "_escrowId": "Bytes32 escrow ID"
        }
      },
      "lock(address,uint256)": {
        "details": "This creates a separate escrow structure which can later be iterated upon to unlock the escrowed funds"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimReward(bytes32)": {
        "notice": "Claim vested funds in escrow"
      },
      "claimRewards(bytes32[])": {
        "notice": "Claim rewards for multiple escrows"
      },
      "getEscrowIdsByUser(address)": {
        "notice": "Returns all escrowIdsByAddress which an account has/had claims in"
      },
      "getEscrows(bytes32[])": {
        "notice": "Returns an array of Escrows"
      },
      "isClaimable(bytes32)": {
        "notice": "Returns whether the escrow is claimable"
      },
      "lock(address,uint256)": {
        "notice": "Locks funds for escrow"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 207,
        "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3991,
        "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3996,
        "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
        "label": "escrows",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Escrow)3984_storage)"
      },
      {
        "astId": 4001,
        "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
        "label": "escrowIdsByAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 4004,
        "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
        "label": "escrowDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4006,
        "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
        "label": "nonce",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Escrow)3984_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RewardsEscrow.Escrow)",
        "numberOfBytes": "32",
        "value": "t_struct(Escrow)3984_storage"
      },
      "t_struct(Escrow)3984_storage": {
        "encoding": "inplace",
        "label": "struct RewardsEscrow.Escrow",
        "members": [
          {
            "astId": 3977,
            "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3979,
            "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3981,
            "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
            "label": "balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3983,
            "contract": "contracts/core/dao/RewardsEscrow.sol:RewardsEscrow",
            "label": "account",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}