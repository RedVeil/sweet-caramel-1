{
  "address": "0x4b6aB5F819A515382B0dEB6935D793817bB4af28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewardsEscrow",
          "name": "_rewardsEscrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsEscrow",
      "outputs": [
        {
          "internalType": "contract IRewardsEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a4bdd18d8d77532fd3503c9b7b8b3de9f708da44faebd8ef1f686f085a59a66",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4b6aB5F819A515382B0dEB6935D793817bB4af28",
    "transactionIndex": 0,
    "gasUsed": "1520558",
    "logsBloom": "0x
    "blockHash": "0x466f1a8c73ff9d1a6d2a649991aec40b798fb50174c6591b53e961936c100324",
    "transactionHash": "0x9a4bdd18d8d77532fd3503c9b7b8b3de9f708da44faebd8ef1f686f085a59a66",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13739690,
        "transactionHash": "0x9a4bdd18d8d77532fd3503c9b7b8b3de9f708da44faebd8ef1f686f085a59a66",
        "address": "0x4b6aB5F819A515382B0dEB6935D793817bB4af28",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x466f1a8c73ff9d1a6d2a649991aec40b798fb50174c6591b53e961936c100324"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13739690,
        "transactionHash": "0x9a4bdd18d8d77532fd3503c9b7b8b3de9f708da44faebd8ef1f686f085a59a66",
        "address": "0xf953b3A269d80e3eB0F2947630Da976B896A8C5b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004b6ab5f819a515382b0deb6935d793817bb4af28",
          "0x000000000000000000000000720472c8ce72c2a2d711333e064abd3e6bbeadd3"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x466f1a8c73ff9d1a6d2a649991aec40b798fb50174c6591b53e961936c100324"
      }
    ],
    "blockNumber": 13739690,
    "cumulativeGasUsed": "1520558",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf953b3A269d80e3eB0F2947630Da976B896A8C5b",
    "0x3b0967B0710a22c1a5CEB6Ae649B5819Cb8bb999",
    "0x720472c8ce72c2A2D711333e064ABD3E6BbEAdd3"
  ],
  "solcInputHash": "31fd7e5d3f14650b4d0b908e90e5bd82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsEscrow\",\"name\":\"_rewardsEscrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsEscrow\",\"outputs\":[{\"internalType\":\"contract IRewardsEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/dao/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/core/dao/Staking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/IRewardsEscrow.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/stakingrewards\\ncontract Staking is IStakingRewards, Ownable, ReentrancyGuard, Pausable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IERC20 public rewardsToken;\\n  IERC20 public stakingToken;\\n  IRewardsEscrow public rewardsEscrow;\\n  uint256 public periodFinish = 0;\\n  uint256 public rewardRate = 0;\\n  uint256 public rewardsDuration = 7 days;\\n  uint256 public lastUpdateTime;\\n  uint256 public rewardPerTokenStored;\\n\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\n  mapping(address => uint256) public rewards;\\n\\n  uint256 private _totalSupply;\\n  mapping(address => uint256) private _balances;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(\\n    IERC20 _rewardsToken,\\n    IERC20 _stakingToken,\\n    IRewardsEscrow _rewardsEscrow\\n  ) {\\n    rewardsToken = _rewardsToken;\\n    stakingToken = _stakingToken;\\n    rewardsEscrow = _rewardsEscrow;\\n\\n    _rewardsToken.safeIncreaseAllowance(address(_rewardsEscrow), type(uint256).max);\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  function totalSupply() external view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) external view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function lastTimeRewardApplicable() public view override returns (uint256) {\\n    return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n  }\\n\\n  function rewardPerToken() public view override returns (uint256) {\\n    if (_totalSupply == 0) {\\n      return rewardPerTokenStored;\\n    }\\n    return\\n      rewardPerTokenStored.add(\\n        lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\\n      );\\n  }\\n\\n  function earned(address account) public view override returns (uint256) {\\n    return\\n      _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\\n  }\\n\\n  function getRewardForDuration() external view override returns (uint256) {\\n    return rewardRate.mul(rewardsDuration);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  function stake(uint256 amount) external override nonReentrant whenNotPaused updateReward(msg.sender) {\\n    require(amount > 0, \\\"Cannot stake 0\\\");\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\\n    stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n    emit Staked(msg.sender, amount);\\n  }\\n\\n  function withdraw(uint256 amount) public override nonReentrant updateReward(msg.sender) {\\n    require(amount > 0, \\\"Cannot withdraw 0\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n    stakingToken.safeTransfer(msg.sender, amount);\\n    emit Withdrawn(msg.sender, amount);\\n  }\\n\\n  function getReward() public override nonReentrant updateReward(msg.sender) {\\n    uint256 reward = rewards[msg.sender];\\n    if (reward > 0) {\\n      rewards[msg.sender] = 0;\\n      uint256 payout = reward / uint256(10);\\n      uint256 escrowed = payout * uint256(9);\\n\\n      rewardsToken.safeTransfer(msg.sender, payout);\\n      rewardsEscrow.lock(msg.sender, escrowed);\\n      emit RewardPaid(msg.sender, reward);\\n    }\\n  }\\n\\n  function exit() external override {\\n    withdraw(_balances[msg.sender]);\\n    getReward();\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function notifyRewardAmount(uint256 reward) external override onlyOwner updateReward(address(0)) {\\n    if (block.timestamp >= periodFinish) {\\n      rewardRate = reward.div(rewardsDuration);\\n    } else {\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rewardRate);\\n      rewardRate = reward.add(leftover).div(rewardsDuration);\\n    }\\n\\n    // Ensure the provided reward amount is not more than the balance in the contract.\\n    // This keeps the reward rate in the right range, preventing overflows due to\\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n    uint256 balance = rewardsToken.balanceOf(address(this));\\n    require(rewardRate <= balance.div(rewardsDuration), \\\"Provided reward too high\\\");\\n\\n    lastUpdateTime = block.timestamp;\\n    periodFinish = block.timestamp.add(rewardsDuration);\\n    emit RewardAdded(reward);\\n  }\\n\\n  // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n    require(tokenAddress != address(stakingToken), \\\"Cannot withdraw the staking token\\\");\\n    IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n    require(\\n      block.timestamp > periodFinish,\\n      \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n    );\\n    rewardsDuration = _rewardsDuration;\\n    emit RewardsDurationUpdated(rewardsDuration);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier updateReward(address account) {\\n    rewardPerTokenStored = rewardPerToken();\\n    lastUpdateTime = lastTimeRewardApplicable();\\n    if (account != address(0)) {\\n      rewards[account] = earned(account);\\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n    _;\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  event RewardAdded(uint256 reward);\\n  event Staked(address indexed user, uint256 amount);\\n  event Withdrawn(address indexed user, uint256 amount);\\n  event RewardPaid(address indexed user, uint256 reward);\\n  event RewardsDurationUpdated(uint256 newDuration);\\n  event Recovered(address token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x3080d1030b14a306223ead19c6c4447ff90dcbf27f44474108d30c88c9ea3951\"},\"contracts/core/interfaces/IRewardsEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsEscrow {\\n  function lock(address _address, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x809501ca26ed07a09aef037d472b6531b79fd1fd2cf3b6e684272615cdac9f0b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IStakingRewards.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\ninterface IStakingRewards {\\n  // Views\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function lastTimeRewardApplicable() external view returns (uint256);\\n\\n  function rewardPerToken() external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function getRewardForDuration() external view returns (uint256);\\n\\n  // Mutative\\n  function stake(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getReward() external;\\n\\n  function exit() external;\\n\\n  function notifyRewardAmount(uint256 reward) external;\\n}\\n\",\"keccak256\":\"0xd0fac859035cd3b24ed0d6cc4776d6cfa2530421fdd72804d43ea6f2cda4aa11\"}},\"version\":1}",
  "bytecode": "0x60806040526000600555600060065562093a806007553480156200002257600080fd5b5060405162001d5a38038062001d5a833981016040819052620000459162000412565b6200005962000053620000ce565b620000d2565b60018055600280546001600160a81b0319166101006001600160a01b0386811691820292909217909255600380546001600160a01b03199081168684161790915560048054909116918416919091179055620000c5908260001962000122602090811b62000da017901c565b50505062000638565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401620001559291906200049c565b60206040518083038186803b1580156200016e57600080fd5b505afa15801562000183573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a9919062000465565b620001b59190620005cb565b9050620002128463095ea7b360e01b8584604051602401620001d9929190620004b6565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200021816565b50505050565b600062000274826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620002c260201b62000eb6179092919060201c565b805190915015620002bd5780806020019051810190620002959190620003f0565b620002bd5760405162461bcd60e51b8152600401620002b49062000581565b60405180910390fd5b505050565b6060620002d38484600085620002dd565b90505b9392505050565b606082471015620003025760405162461bcd60e51b8152600401620002b49062000504565b6200030d85620003ac565b6200032c5760405162461bcd60e51b8152600401620002b4906200054a565b600080866001600160a01b031685876040516200034a91906200047e565b60006040518083038185875af1925050503d806000811462000389576040519150601f19603f3d011682016040523d82523d6000602084013e6200038e565b606091505b509092509050620003a1828286620003b2565b979650505050505050565b3b151590565b60608315620003c3575081620002d6565b825115620003d45782518084602001fd5b8160405162461bcd60e51b8152600401620002b49190620004cf565b60006020828403121562000402578081fd5b81518015158114620002d6578182fd5b60008060006060848603121562000427578182fd5b835162000434816200061f565b602085015190935062000447816200061f565b60408501519092506200045a816200061f565b809150509250925092565b60006020828403121562000477578081fd5b5051919050565b6000825162000492818460208701620005f0565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152620004f0816040850160208701620005f0565b601f01601f19169190910160400192915050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60008219821115620005eb57634e487b7160e01b81526011600452602481fd5b500190565b60005b838110156200060d578181015183820152602001620005f3565b83811115620002125750506000910152565b6001600160a01b03811681146200063557600080fd5b50565b61171280620006486000396000f3fe608060405234801561001057600080fd5b50600436106101b85760003560e01c806380faa57d116100f9578063cd3daf9d11610097578063e9fad8ee11610071578063e9fad8ee1461030a578063ebe2b12b14610312578063f21579321461031a578063f2fde38b14610322576101b8565b8063cd3daf9d146102f2578063d1af0c7d146102fa578063df136d6514610302576101b8565b80638da5cb5b116100d35780638da5cb5b146102bc578063a694fc3a146102c4578063c8f33c91146102d7578063cc1a378f146102df576101b8565b806380faa57d1461028e5780638980f11f146102965780638b876347146102a9576101b8565b80633c6b16ab1161016657806370a082311161014057806370a0823114610256578063715018a61461026957806372f702f3146102715780637b0a47ee14610286576101b8565b80633c6b16ab146102265780633d18b912146102395780635c975abb14610241576101b8565b80631c1f78eb116101975780631c1f78eb146102015780632e1a7d4d14610209578063386a95251461021e576101b8565b80628cc262146101bd5780630700037d146101e657806318160ddd146101f9575b600080fd5b6101d06101cb366004611155565b610335565b6040516101dd9190611623565b60405180910390f35b6101d06101f4366004611155565b6103b5565b6101d06103c7565b6101d06103ce565b61021c6102173660046111b8565b6103ec565b005b6101d0610537565b61021c6102343660046111b8565b61053d565b61021c610764565b610249610910565b6040516101dd919061126f565b6101d0610264366004611155565b610919565b61021c610934565b61027961097f565b6040516101dd9190611204565b6101d061098e565b6101d0610994565b61021c6102a436600461116f565b6109ac565b6101d06102b7366004611155565b610a72565b610279610a84565b61021c6102d23660046111b8565b610a93565b6101d0610beb565b61021c6102ed3660046111b8565b610bf1565b6101d0610c91565b610279610cdf565b6101d0610cf3565b61021c610cf9565b6101d0610d1a565b610279610d20565b61021c610330366004611155565b610d2f565b6001600160a01b0381166000908152600b6020908152604080832054600a9092528220546103ad91906103a790670de0b6b3a7640000906103a1906103829061037c610c91565b90610ecf565b6001600160a01b0388166000908152600d602052604090205490610edb565b90610ee7565b90610ef3565b90505b919050565b600b6020526000908152604090205481565b600c545b90565b60006103e7600754600654610edb90919063ffffffff16565b905090565b600260015414156104185760405162461bcd60e51b815260040161040f9061158f565b60405180910390fd5b600260015533610426610c91565b600955610431610994565b6008556001600160a01b038116156104785761044c81610335565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b600082116104985760405162461bcd60e51b815260040161040f90611458565b600c546104a59083610ecf565b600c55336000908152600d60205260409020546104c29083610ecf565b336000818152600d60205260409020919091556003546104ee916001600160a01b039091169084610eff565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516105279190611623565b60405180910390a2505060018055565b60075481565b610545610f23565b6001600160a01b0316610556610a84565b6001600160a01b03161461057c5760405162461bcd60e51b815260040161040f9061148f565b6000610586610c91565b600955610591610994565b6008556001600160a01b038116156105d8576105ac81610335565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60055442106105f7576007546105ef908390610ee7565b60065561063a565b6005546000906106079042610ecf565b9050600061062060065483610edb90919063ffffffff16565b600754909150610634906103a18684610ef3565b60065550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906370a0823190610689903090600401611204565b60206040518083038186803b1580156106a157600080fd5b505afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d991906111d0565b90506106f060075482610ee790919063ffffffff16565b60065411156107115760405162461bcd60e51b815260040161040f906114c4565b4260088190556007546107249190610ef3565b6005556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d90610757908590611623565b60405180910390a1505050565b600260015414156107875760405162461bcd60e51b815260040161040f9061158f565b600260015533610795610c91565b6009556107a0610994565b6008556001600160a01b038116156107e7576107bb81610335565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b336000908152600b6020526040902054801561090857336000908152600b6020526040812081905561081a600a83611644565b90506000610829600983611664565b6002549091506108489061010090046001600160a01b03163384610eff565b600480546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163282d3fdf91610892913391869101611256565b600060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b50505050336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486846040516108fd9190611623565b60405180910390a250505b505060018055565b60025460ff1690565b6001600160a01b03166000908152600d602052604090205490565b61093c610f23565b6001600160a01b031661094d610a84565b6001600160a01b0316146109735760405162461bcd60e51b815260040161040f9061148f565b61097d6000610f27565b565b6003546001600160a01b031681565b60065481565b600060055442106109a7576005546103e7565b504290565b6109b4610f23565b6001600160a01b03166109c5610a84565b6001600160a01b0316146109eb5760405162461bcd60e51b815260040161040f9061148f565b6003546001600160a01b0383811691161415610a195760405162461bcd60e51b815260040161040f906115c6565b610a35610a24610a84565b6001600160a01b0384169083610eff565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051610a66929190611256565b60405180910390a15050565b600a6020526000908152604090205481565b6000546001600160a01b031690565b60026001541415610ab65760405162461bcd60e51b815260040161040f9061158f565b6002600155610ac3610910565b15610ae05760405162461bcd60e51b815260040161040f90611421565b33610ae9610c91565b600955610af4610994565b6008556001600160a01b03811615610b3b57610b0f81610335565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60008211610b5b5760405162461bcd60e51b815260040161040f9061138d565b600c54610b689083610ef3565b600c55336000908152600d6020526040902054610b859083610ef3565b336000818152600d6020526040902091909155600354610bb2916001600160a01b03909116903085610f8f565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516105279190611623565b60085481565b610bf9610f23565b6001600160a01b0316610c0a610a84565b6001600160a01b031614610c305760405162461bcd60e51b815260040161040f9061148f565b6005544211610c515760405162461bcd60e51b815260040161040f906112ad565b60078190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390610c86908390611623565b60405180910390a150565b6000600c5460001415610ca757506009546103cb565b6103e7610cd6600c546103a1670de0b6b3a7640000610cd0600654610cd060085461037c610994565b90610edb565b60095490610ef3565b60025461010090046001600160a01b031681565b60095481565b336000908152600d6020526040902054610d12906103ec565b61097d610764565b60055481565b6004546001600160a01b031681565b610d37610f23565b6001600160a01b0316610d48610a84565b6001600160a01b031614610d6e5760405162461bcd60e51b815260040161040f9061148f565b6001600160a01b038116610d945760405162461bcd60e51b815260040161040f90611330565b610d9d81610f27565b50565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401610dd1929190611218565b60206040518083038186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2191906111d0565b610e2b919061162c565b9050610eb08463095ea7b360e01b8584604051602401610e4c929190611256565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610fb0565b50505050565b6060610ec5848460008561103f565b90505b9392505050565b6000610ec88284611683565b6000610ec88284611664565b6000610ec88284611644565b6000610ec8828461162c565b610f1e8363a9059cbb60e01b8484604051602401610e4c929190611256565b505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610eb0846323b872dd60e01b858585604051602401610e4c93929190611232565b6000611005826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eb69092919063ffffffff16565b805190915015610f1e57808060200190518101906110239190611198565b610f1e5760405162461bcd60e51b815260040161040f90611532565b6060824710156110615760405162461bcd60e51b815260040161040f906113c4565b61106a856110ff565b6110865760405162461bcd60e51b815260040161040f906114fb565b600080866001600160a01b031685876040516110a291906111e8565b60006040518083038185875af1925050503d80600081146110df576040519150601f19603f3d011682016040523d82523d6000602084013e6110e4565b606091505b50915091506110f4828286611105565b979650505050505050565b3b151590565b60608315611114575081610ec8565b8251156111245782518084602001fd5b8160405162461bcd60e51b815260040161040f919061127a565b80356001600160a01b03811681146103b057600080fd5b600060208284031215611166578081fd5b610ec88261113e565b60008060408385031215611181578081fd5b61118a8361113e565b946020939093013593505050565b6000602082840312156111a9578081fd5b81518015158114610ec8578182fd5b6000602082840312156111c9578081fd5b5035919050565b6000602082840312156111e1578081fd5b5051919050565b600082516111fa81846020870161169a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261129981604085016020870161169a565b601f01601f19169190910160400192915050565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b6000821982111561163f5761163f6116c6565b500190565b60008261165f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561167e5761167e6116c6565b500290565b600082821015611695576116956116c6565b500390565b60005b838110156116b557818101518382015260200161169d565b83811115610eb05750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122037d06979d1b86f0618d533074281714a753e67e64294a5bf8f1c1a5c163d463d64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b85760003560e01c806380faa57d116100f9578063cd3daf9d11610097578063e9fad8ee11610071578063e9fad8ee1461030a578063ebe2b12b14610312578063f21579321461031a578063f2fde38b14610322576101b8565b8063cd3daf9d146102f2578063d1af0c7d146102fa578063df136d6514610302576101b8565b80638da5cb5b116100d35780638da5cb5b146102bc578063a694fc3a146102c4578063c8f33c91146102d7578063cc1a378f146102df576101b8565b806380faa57d1461028e5780638980f11f146102965780638b876347146102a9576101b8565b80633c6b16ab1161016657806370a082311161014057806370a0823114610256578063715018a61461026957806372f702f3146102715780637b0a47ee14610286576101b8565b80633c6b16ab146102265780633d18b912146102395780635c975abb14610241576101b8565b80631c1f78eb116101975780631c1f78eb146102015780632e1a7d4d14610209578063386a95251461021e576101b8565b80628cc262146101bd5780630700037d146101e657806318160ddd146101f9575b600080fd5b6101d06101cb366004611155565b610335565b6040516101dd9190611623565b60405180910390f35b6101d06101f4366004611155565b6103b5565b6101d06103c7565b6101d06103ce565b61021c6102173660046111b8565b6103ec565b005b6101d0610537565b61021c6102343660046111b8565b61053d565b61021c610764565b610249610910565b6040516101dd919061126f565b6101d0610264366004611155565b610919565b61021c610934565b61027961097f565b6040516101dd9190611204565b6101d061098e565b6101d0610994565b61021c6102a436600461116f565b6109ac565b6101d06102b7366004611155565b610a72565b610279610a84565b61021c6102d23660046111b8565b610a93565b6101d0610beb565b61021c6102ed3660046111b8565b610bf1565b6101d0610c91565b610279610cdf565b6101d0610cf3565b61021c610cf9565b6101d0610d1a565b610279610d20565b61021c610330366004611155565b610d2f565b6001600160a01b0381166000908152600b6020908152604080832054600a9092528220546103ad91906103a790670de0b6b3a7640000906103a1906103829061037c610c91565b90610ecf565b6001600160a01b0388166000908152600d602052604090205490610edb565b90610ee7565b90610ef3565b90505b919050565b600b6020526000908152604090205481565b600c545b90565b60006103e7600754600654610edb90919063ffffffff16565b905090565b600260015414156104185760405162461bcd60e51b815260040161040f9061158f565b60405180910390fd5b600260015533610426610c91565b600955610431610994565b6008556001600160a01b038116156104785761044c81610335565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b600082116104985760405162461bcd60e51b815260040161040f90611458565b600c546104a59083610ecf565b600c55336000908152600d60205260409020546104c29083610ecf565b336000818152600d60205260409020919091556003546104ee916001600160a01b039091169084610eff565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516105279190611623565b60405180910390a2505060018055565b60075481565b610545610f23565b6001600160a01b0316610556610a84565b6001600160a01b03161461057c5760405162461bcd60e51b815260040161040f9061148f565b6000610586610c91565b600955610591610994565b6008556001600160a01b038116156105d8576105ac81610335565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60055442106105f7576007546105ef908390610ee7565b60065561063a565b6005546000906106079042610ecf565b9050600061062060065483610edb90919063ffffffff16565b600754909150610634906103a18684610ef3565b60065550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906370a0823190610689903090600401611204565b60206040518083038186803b1580156106a157600080fd5b505afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d991906111d0565b90506106f060075482610ee790919063ffffffff16565b60065411156107115760405162461bcd60e51b815260040161040f906114c4565b4260088190556007546107249190610ef3565b6005556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d90610757908590611623565b60405180910390a1505050565b600260015414156107875760405162461bcd60e51b815260040161040f9061158f565b600260015533610795610c91565b6009556107a0610994565b6008556001600160a01b038116156107e7576107bb81610335565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b336000908152600b6020526040902054801561090857336000908152600b6020526040812081905561081a600a83611644565b90506000610829600983611664565b6002549091506108489061010090046001600160a01b03163384610eff565b600480546040517f282d3fdf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169163282d3fdf91610892913391869101611256565b600060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b50505050336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486846040516108fd9190611623565b60405180910390a250505b505060018055565b60025460ff1690565b6001600160a01b03166000908152600d602052604090205490565b61093c610f23565b6001600160a01b031661094d610a84565b6001600160a01b0316146109735760405162461bcd60e51b815260040161040f9061148f565b61097d6000610f27565b565b6003546001600160a01b031681565b60065481565b600060055442106109a7576005546103e7565b504290565b6109b4610f23565b6001600160a01b03166109c5610a84565b6001600160a01b0316146109eb5760405162461bcd60e51b815260040161040f9061148f565b6003546001600160a01b0383811691161415610a195760405162461bcd60e51b815260040161040f906115c6565b610a35610a24610a84565b6001600160a01b0384169083610eff565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051610a66929190611256565b60405180910390a15050565b600a6020526000908152604090205481565b6000546001600160a01b031690565b60026001541415610ab65760405162461bcd60e51b815260040161040f9061158f565b6002600155610ac3610910565b15610ae05760405162461bcd60e51b815260040161040f90611421565b33610ae9610c91565b600955610af4610994565b6008556001600160a01b03811615610b3b57610b0f81610335565b6001600160a01b0382166000908152600b6020908152604080832093909355600954600a909152919020555b60008211610b5b5760405162461bcd60e51b815260040161040f9061138d565b600c54610b689083610ef3565b600c55336000908152600d6020526040902054610b859083610ef3565b336000818152600d6020526040902091909155600354610bb2916001600160a01b03909116903085610f8f565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516105279190611623565b60085481565b610bf9610f23565b6001600160a01b0316610c0a610a84565b6001600160a01b031614610c305760405162461bcd60e51b815260040161040f9061148f565b6005544211610c515760405162461bcd60e51b815260040161040f906112ad565b60078190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390610c86908390611623565b60405180910390a150565b6000600c5460001415610ca757506009546103cb565b6103e7610cd6600c546103a1670de0b6b3a7640000610cd0600654610cd060085461037c610994565b90610edb565b60095490610ef3565b60025461010090046001600160a01b031681565b60095481565b336000908152600d6020526040902054610d12906103ec565b61097d610764565b60055481565b6004546001600160a01b031681565b610d37610f23565b6001600160a01b0316610d48610a84565b6001600160a01b031614610d6e5760405162461bcd60e51b815260040161040f9061148f565b6001600160a01b038116610d945760405162461bcd60e51b815260040161040f90611330565b610d9d81610f27565b50565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401610dd1929190611218565b60206040518083038186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2191906111d0565b610e2b919061162c565b9050610eb08463095ea7b360e01b8584604051602401610e4c929190611256565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610fb0565b50505050565b6060610ec5848460008561103f565b90505b9392505050565b6000610ec88284611683565b6000610ec88284611664565b6000610ec88284611644565b6000610ec8828461162c565b610f1e8363a9059cbb60e01b8484604051602401610e4c929190611256565b505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610eb0846323b872dd60e01b858585604051602401610e4c93929190611232565b6000611005826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eb69092919063ffffffff16565b805190915015610f1e57808060200190518101906110239190611198565b610f1e5760405162461bcd60e51b815260040161040f90611532565b6060824710156110615760405162461bcd60e51b815260040161040f906113c4565b61106a856110ff565b6110865760405162461bcd60e51b815260040161040f906114fb565b600080866001600160a01b031685876040516110a291906111e8565b60006040518083038185875af1925050503d80600081146110df576040519150601f19603f3d011682016040523d82523d6000602084013e6110e4565b606091505b50915091506110f4828286611105565b979650505050505050565b3b151590565b60608315611114575081610ec8565b8251156111245782518084602001fd5b8160405162461bcd60e51b815260040161040f919061127a565b80356001600160a01b03811681146103b057600080fd5b600060208284031215611166578081fd5b610ec88261113e565b60008060408385031215611181578081fd5b61118a8361113e565b946020939093013593505050565b6000602082840312156111a9578081fd5b81518015158114610ec8578182fd5b6000602082840312156111c9578081fd5b5035919050565b6000602082840312156111e1578081fd5b5051919050565b600082516111fa81846020870161169a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261129981604085016020870161169a565b601f01601f19169190910160400192915050565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b6000821982111561163f5761163f6116c6565b500190565b60008261165f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561167e5761167e6116c6565b500290565b600082821015611695576116956116c6565b500390565b60005b838110156116b557818101518382015260200161169d565b83811115610eb05750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122037d06979d1b86f0618d533074281714a753e67e64294a5bf8f1c1a5c163d463d64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 122,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4544,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "rewardsToken",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IERC20)860"
      },
      {
        "astId": 4547,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)860"
      },
      {
        "astId": 4550,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "rewardsEscrow",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRewardsEscrow)7715"
      },
      {
        "astId": 4553,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4556,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4559,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4561,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4563,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4567,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4571,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4573,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4577,
        "contract": "contracts/core/dao/Staking.sol:Staking",
        "label": "_balances",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)860": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsEscrow)7715": {
        "encoding": "inplace",
        "label": "contract IRewardsEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}