// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.0;

import { Test } from "forge-std/Test.sol";
import "../../../contracts/core/defi/zapper/ZeroXSwapZapIn.sol";

address constant AFFILIATE = address(0);

address constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;
address constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

address constant ZEROX_ROUTER = 0xDef1C0ded9bec7F1a1670819833240f027b25EfF;
address constant NOT_ZEROX_ROUTER = 0xdef1c0dEd9bec7f1a1670819833240F027B24eFF;

// Fork Block 15521406
contract ZeroXSwapZapInTest is Test {
  using SafeERC20 for IERC20;

  ZeroXSwapZapIn internal zapIn;

  receive() external payable {}

  function setUp() public {
    zapIn = new ZeroXSwapZapIn();
    deal(address(this), 1 ether);
    deal(DAI, address(this), 100 ether);
  }

  function test_zap_in_dai_to_usdt() public {
    uint256 daiBalanceBefore = IERC20(DAI).balanceOf(address(this));
    uint256 usdtBalanceBefore = IERC20(USDT).balanceOf(address(this));
    IERC20(DAI).approve(address(zapIn), 100 ether);
    // https://api.0x.org/swap/v1/quote?buyToken=USDT&sellToken=0x6B175474E89094C44Da98b954EedeAC495271d0F&sellAmount=100000000000000000000&slippagePercentage=0.03
    zapIn.ZapIn(
      DAI,
      USDT,
      address(0),
      100 ether,
      99_000_000,
      ZEROX_ROUTER,
      hex"d9627aa400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000005c2a3ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000d67318a137631f4655",
      AFFILIATE
    );
    uint256 daiBalanceAfter = IERC20(DAI).balanceOf(address(this));
    uint256 usdtBalanceAfter = IERC20(USDT).balanceOf(address(this));
    assertEq(daiBalanceBefore, 100 ether);
    assertEq(daiBalanceAfter, 0);
    assertEq(usdtBalanceBefore, 0);
    assertEq(usdtBalanceAfter, 99_630_890);
  }

  function test_zap_in_eth_to_usdt() public {
    uint256 ethBalanceBefore = address(this).balance;
    uint256 usdtBalanceBefore = IERC20(USDT).balanceOf(address(this));
    // https://api.0x.org/swap/v1/quote?buyToken=USDT&sellToken=ETH&sellAmount=1000000000000000000&slippagePercentage=0.03
    zapIn.ZapIn{ value: 1 ether }(
      address(0),
      USDT,
      address(0),
      1 ether,
      1567_000_000,
      ZEROX_ROUTER,
      hex"3598d8ab000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000649fcd880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f4dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000581fe2f189631f465f",
      AFFILIATE
    );
    uint256 ethBalanceAfter = address(this).balance;
    uint256 usdtBalanceAfter = IERC20(USDT).balanceOf(address(this));
    assertEq(ethBalanceBefore, 1 ether);
    assertEq(ethBalanceAfter, 0);
    assertEq(usdtBalanceBefore, 0);
    assertEq(usdtBalanceAfter, 1_738_318_854);
  }

  function test_zap_in_usdt_to_eth() public {
    deal(USDT, address(this), 100 ether);
    uint256 ethBalanceBefore = address(this).balance;
    uint256 usdtBalanceBefore = IERC20(USDT).balanceOf(address(this));
    IERC20(USDT).safeApprove(address(zapIn), 200 * 1e6);

    // https://api.0x.org/swap/v1/quote?buyToken=ETH&sellToken=USDT&sellAmount=200000000&slippagePercentage=1
    zapIn.ZapIn(
      USDT,
      address(0),
      address(0),
      200 * 1e6,
      0,
      ZEROX_ROUTER,
      hex"803ba26d0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000bebc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bdac17f958d2ee523a2206206994597c13d831ec70001f4c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000a9644b1395631f4669",
      AFFILIATE
    );
    uint256 ethBalanceAfter = address(this).balance;
    uint256 usdtBalanceAfter = IERC20(USDT).balanceOf(address(this));
    assertEq(ethBalanceBefore, 1 ether);
    assertEq(ethBalanceAfter, 1114936808132237020);
    assertEq(usdtBalanceBefore, 100000000000000000000);
    assertEq(usdtBalanceAfter, 99999999999800000000);
  }

  function test_zap_in_eth_to_weth() public {
    uint256 ethBalanceBefore = address(this).balance;
    uint256 wethBalanceBefore = IERC20(WETH).balanceOf(address(this));
    // https://api.0x.org/swap/v1/quote?buyToken=WETH&sellToken=ETH&sellAmount=1000000000000000000&slippagePercentage=0.03
    zapIn.ZapIn{ value: 1 ether }(address(0), WETH, address(0), 1 ether, 1 ether, WETH, hex"", AFFILIATE);
    uint256 ethBalanceAfter = address(this).balance;
    uint256 wethBalanceAfter = IERC20(WETH).balanceOf(address(this));
    assertEq(ethBalanceBefore, 1 ether);
    assertEq(ethBalanceAfter, 0);
    assertEq(wethBalanceBefore, 0);
    assertEq(wethBalanceAfter, 1 ether);
  }

  function test_zap_in_dai_to_usdt_reverts_low_slippage() public {
    IERC20(DAI).approve(address(zapIn), 100 ether);
    // https://api.0x.org/swap/v1/quote?buyToken=USDT&sellToken=0x6B175474E89094C44Da98b954EedeAC495271d0F&sellAmount=100000000000000000000&slippagePercentage=0.03
    vm.expectRevert("Received less than minTokensOut");
    zapIn.ZapIn(
      DAI,
      USDT,
      address(0),
      100 ether,
      100_000_000,
      ZEROX_ROUTER,
      hex"d9627aa400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000005c2a3ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000005d9951bda4631f467c",
      AFFILIATE
    );
  }

  function test_zap_in_dai_to_usdt_reverts_insufficient_allowance() public {
    IERC20(DAI).approve(address(zapIn), 90 ether);
    // https://api.0x.org/swap/v1/quote?buyToken=USDT&sellToken=0x6B175474E89094C44Da98b954EedeAC495271d0F&sellAmount=100000000000000000000&slippagePercentage=0.03
    vm.expectRevert("Dai/insufficient-allowance");
    zapIn.ZapIn(
      DAI,
      USDT,
      address(0),
      100 ether,
      99_000_000,
      ZEROX_ROUTER,
      hex"d9627aa400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000005c2a3ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000005d9951bda4631f467c",
      AFFILIATE
    );
  }

  function test_zap_in_dai_to_usdt_reverts_insufficient_balance() public {
    IERC20(DAI).approve(address(zapIn), 150 ether);
    // https://api.0x.org/swap/v1/quote?buyToken=USDT&sellToken=0x6B175474E89094C44Da98b954EedeAC495271d0F&sellAmount=100000000000000000000&slippagePercentage=0.03
    vm.expectRevert("Dai/insufficient-balance");
    zapIn.ZapIn(
      DAI,
      USDT,
      address(0),
      150 ether,
      149_000_000,
      ZEROX_ROUTER,
      hex"d9627aa400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000005c2a3ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000008584c27c47631f468a",
      AFFILIATE
    );
  }

  function test_zap_in_dai_to_usdt_reverts_with_eth_sent() public {
    IERC20(DAI).approve(address(zapIn), 100 ether);
    // https://api.0x.org/swap/v1/quote?buyToken=USDT&sellToken=0x6B175474E89094C44Da98b954EedeAC495271d0F&sellAmount=100000000000000000000&slippagePercentage=0.03
    vm.expectRevert("Eth sent with token");
    zapIn.ZapIn{ value: 1 ether }(
      DAI,
      USDT,
      address(0),
      100 ether,
      99_000_000,
      ZEROX_ROUTER,
      hex"d9627aa400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000005c2a3ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000008584c27c47631f468a",
      AFFILIATE
    );
  }

  function test_zap_in_dai_to_usdt_reverts_wrong_swap_target() public {
    IERC20(DAI).approve(address(zapIn), 100 ether);
    // https://api.0x.org/swap/v1/quote?buyToken=USDT&sellToken=0x6B175474E89094C44Da98b954EedeAC495271d0F&sellAmount=100000000000000000000&slippagePercentage=0.03
    vm.expectRevert("Target not Authorized");
    zapIn.ZapIn(
      DAI,
      USDT,
      address(0),
      100 ether,
      99_000_000,
      NOT_ZEROX_ROUTER,
      hex"d9627aa400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000005c2a3ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000ebed87586d631f469a",
      AFFILIATE
    );
  }

  function test_zap_in_dai_to_usdt_reverts_wrong_swap_data() public {
    IERC20(DAI).approve(address(zapIn), 100 ether);
    // https://api.0x.org/swap/v1/quote?buyToken=USDT&sellToken=0x6B175474E89094C44Da98b954EedeAC495271d0F&sellAmount=100000000000000000000&slippagePercentage=0.03
    vm.expectRevert("Error Swapping Tokens");
    zapIn.ZapIn(
      DAI,
      USDT,
      address(0),
      100 ether,
      99_000_000,
      ZEROX_ROUTER,
      hex"d9627aa400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000005c3027b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954efdeac495271d0f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000d6be23fc7d630e16d1",
      AFFILIATE
    );
  }
}
